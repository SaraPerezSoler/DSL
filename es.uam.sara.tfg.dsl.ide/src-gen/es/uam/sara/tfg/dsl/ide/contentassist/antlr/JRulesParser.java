/*
 * generated by Xtext 2.10.0
 */
package es.uam.sara.tfg.dsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import es.uam.sara.tfg.dsl.ide.contentassist.antlr.internal.InternalJRulesParser;
import es.uam.sara.tfg.dsl.services.JRulesGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class JRulesParser extends AbstractContentAssistParser {

	@Inject
	private JRulesGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalJRulesParser createParser() {
		InternalJRulesParser result = new InternalJRulesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSatisfyAccess().getAlternatives(), "rule__Satisfy__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getAndAccess().getAlternatives(), "rule__And__Alternatives");
					put(grammarAccess.getImplementsAccess().getAlternatives_2(), "rule__Implements__Alternatives_2");
					put(grammarAccess.getBlendModifiersAccess().getAlternatives(), "rule__BlendModifiers__Alternatives");
					put(grammarAccess.getQuantifierAccess().getAlternatives(), "rule__Quantifier__Alternatives");
					put(grammarAccess.getElementJavaAccess().getAlternatives(), "rule__ElementJava__Alternatives");
					put(grammarAccess.getNameCheckAccess().getAlternatives(), "rule__NameCheck__Alternatives");
					put(grammarAccess.getNameOperatorAccess().getAlternatives(), "rule__NameOperator__Alternatives");
					put(grammarAccess.getLanguageAccess().getAlternatives(), "rule__Language__Alternatives");
					put(grammarAccess.getAccessModifierAccess().getAlternatives(), "rule__AccessModifier__Alternatives");
					put(grammarAccess.getRuleSetAccess().getGroup(), "rule__RuleSet__Group__0");
					put(grammarAccess.getRuleSetAccess().getGroup_4(), "rule__RuleSet__Group_4__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getRuleAccess().getGroup_3(), "rule__Rule__Group_3__0");
					put(grammarAccess.getRuleAccess().getGroup_4(), "rule__Rule__Group_4__0");
					put(grammarAccess.getFilterAccess().getGroup(), "rule__Filter__Group__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup_1_4(), "rule__And__Group_1_4__0");
					put(grammarAccess.getIsImplementedAccess().getGroup(), "rule__IsImplemented__Group__0");
					put(grammarAccess.getIsInheritorAccess().getGroup(), "rule__IsInheritor__Group__0");
					put(grammarAccess.getImplementsAccess().getGroup(), "rule__Implements__Group__0");
					put(grammarAccess.getImplementsAccess().getGroup_2_0(), "rule__Implements__Group_2_0__0");
					put(grammarAccess.getImplementsAccess().getGroup_2_0_2(), "rule__Implements__Group_2_0_2__0");
					put(grammarAccess.getImplementsAccess().getGroup_2_1(), "rule__Implements__Group_2_1__0");
					put(grammarAccess.getImplementsAccess().getGroup_2_1_2(), "rule__Implements__Group_2_1_2__0");
					put(grammarAccess.getIsExtendedAccess().getGroup(), "rule__IsExtended__Group__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getParameterAccess().getGroup_2(), "rule__Parameter__Group_2__0");
					put(grammarAccess.getParameterAccess().getGroup_2_4(), "rule__Parameter__Group_2_4__0");
					put(grammarAccess.getConstructorAccess().getGroup(), "rule__Constructor__Group__0");
					put(grammarAccess.getReturnAccess().getGroup(), "rule__Return__Group__0");
					put(grammarAccess.getAttributeTypeAccess().getGroup(), "rule__AttributeType__Group__0");
					put(grammarAccess.getInitializeAccess().getGroup(), "rule__Initialize__Group__0");
					put(grammarAccess.getNoEmptyAccess().getGroup(), "rule__NoEmpty__Group__0");
					put(grammarAccess.getNameOperationAccess().getGroup(), "rule__NameOperation__Group__0");
					put(grammarAccess.getNameOperationAccess().getGroup_4(), "rule__NameOperation__Group_4__0");
					put(grammarAccess.getNameTypeAccess().getGroup(), "rule__NameType__Group__0");
					put(grammarAccess.getJavaDocAccess().getGroup(), "rule__JavaDoc__Group__0");
					put(grammarAccess.getContainsAccess().getGroup(), "rule__Contains__Group__0");
					put(grammarAccess.getModifiersAccess().getGroup(), "rule__Modifiers__Group__0");
					put(grammarAccess.getModifiersAccess().getGroup_5(), "rule__Modifiers__Group_5__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getEBigIntegerAccess().getGroup(), "rule__EBigInteger__Group__0");
					put(grammarAccess.getBlendModifiersAccess().getGroup_0(), "rule__BlendModifiers__Group_0__0");
					put(grammarAccess.getBlendModifiersAccess().getGroup_0_1(), "rule__BlendModifiers__Group_0_1__0");
					put(grammarAccess.getBlendModifiersAccess().getGroup_0_2(), "rule__BlendModifiers__Group_0_2__0");
					put(grammarAccess.getBlendModifiersAccess().getGroup_0_3(), "rule__BlendModifiers__Group_0_3__0");
					put(grammarAccess.getBlendModifiersAccess().getGroup_0_4(), "rule__BlendModifiers__Group_0_4__0");
					put(grammarAccess.getBlendModifiersAccess().getGroup_1(), "rule__BlendModifiers__Group_1__0");
					put(grammarAccess.getBlendModifiersAccess().getGroup_1_1(), "rule__BlendModifiers__Group_1_1__0");
					put(grammarAccess.getBlendModifiersAccess().getGroup_1_2(), "rule__BlendModifiers__Group_1_2__0");
					put(grammarAccess.getBlendModifiersAccess().getGroup_1_3(), "rule__BlendModifiers__Group_1_3__0");
					put(grammarAccess.getBlendModifiersAccess().getGroup_2(), "rule__BlendModifiers__Group_2__0");
					put(grammarAccess.getBlendModifiersAccess().getGroup_2_1(), "rule__BlendModifiers__Group_2_1__0");
					put(grammarAccess.getBlendModifiersAccess().getGroup_2_2(), "rule__BlendModifiers__Group_2_2__0");
					put(grammarAccess.getBlendModifiersAccess().getGroup_3(), "rule__BlendModifiers__Group_3__0");
					put(grammarAccess.getBlendModifiersAccess().getGroup_3_1(), "rule__BlendModifiers__Group_3_1__0");
					put(grammarAccess.getRuleSetAccess().getProjectNameAssignment_1(), "rule__RuleSet__ProjectNameAssignment_1");
					put(grammarAccess.getRuleSetAccess().getRulesAssignment_2(), "rule__RuleSet__RulesAssignment_2");
					put(grammarAccess.getRuleSetAccess().getRulesAssignment_4_0(), "rule__RuleSet__RulesAssignment_4_0");
					put(grammarAccess.getRuleAccess().getNoAssignment_0(), "rule__Rule__NoAssignment_0");
					put(grammarAccess.getRuleAccess().getQuantifierAssignment_1(), "rule__Rule__QuantifierAssignment_1");
					put(grammarAccess.getRuleAccess().getElementAssignment_2(), "rule__Rule__ElementAssignment_2");
					put(grammarAccess.getRuleAccess().getFilterAssignment_3_1(), "rule__Rule__FilterAssignment_3_1");
					put(grammarAccess.getRuleAccess().getSatisfyAssignment_4_1(), "rule__Rule__SatisfyAssignment_4_1");
					put(grammarAccess.getFilterAccess().getNoAssignment_0(), "rule__Filter__NoAssignment_0");
					put(grammarAccess.getFilterAccess().getFilterAssignment_1(), "rule__Filter__FilterAssignment_1");
					put(grammarAccess.getOrAccess().getOpAssignment_0(), "rule__Or__OpAssignment_0");
					put(grammarAccess.getOrAccess().getOpAssignment_1_1(), "rule__Or__OpAssignment_1_1");
					put(grammarAccess.getAndAccess().getOpAssignment_0(), "rule__And__OpAssignment_0");
					put(grammarAccess.getAndAccess().getOpAssignment_1_1(), "rule__And__OpAssignment_1_1");
					put(grammarAccess.getAndAccess().getOpAssignment_1_3(), "rule__And__OpAssignment_1_3");
					put(grammarAccess.getAndAccess().getOpAssignment_1_4_1(), "rule__And__OpAssignment_1_4_1");
					put(grammarAccess.getImplementsAccess().getMinInterfaceAssignment_2_0_1(), "rule__Implements__MinInterfaceAssignment_2_0_1");
					put(grammarAccess.getImplementsAccess().getMaxInterfaceAssignment_2_0_2_2(), "rule__Implements__MaxInterfaceAssignment_2_0_2_2");
					put(grammarAccess.getImplementsAccess().getMaxInterfaceAssignment_2_1_1(), "rule__Implements__MaxInterfaceAssignment_2_1_1");
					put(grammarAccess.getImplementsAccess().getMinInterfaceAssignment_2_1_2_2(), "rule__Implements__MinInterfaceAssignment_2_1_2_2");
					put(grammarAccess.getParameterAccess().getNumParamAssignment_1(), "rule__Parameter__NumParamAssignment_1");
					put(grammarAccess.getParameterAccess().getTypesParamAssignment_2_3(), "rule__Parameter__TypesParamAssignment_2_3");
					put(grammarAccess.getParameterAccess().getTypesParamAssignment_2_4_1(), "rule__Parameter__TypesParamAssignment_2_4_1");
					put(grammarAccess.getReturnAccess().getReturnTypeAssignment_2(), "rule__Return__ReturnTypeAssignment_2");
					put(grammarAccess.getAttributeTypeAccess().getTypeAssignment_1(), "rule__AttributeType__TypeAssignment_1");
					put(grammarAccess.getNameOperationAccess().getOperatorAssignment_2(), "rule__NameOperation__OperatorAssignment_2");
					put(grammarAccess.getNameOperationAccess().getNameAssignment_3(), "rule__NameOperation__NameAssignment_3");
					put(grammarAccess.getNameOperationAccess().getLanguageAssignment_4_1(), "rule__NameOperation__LanguageAssignment_4_1");
					put(grammarAccess.getNameTypeAccess().getTypeAssignment_2(), "rule__NameType__TypeAssignment_2");
					put(grammarAccess.getJavaDocAccess().getAuthorAssignment_2(), "rule__JavaDoc__AuthorAssignment_2");
					put(grammarAccess.getJavaDocAccess().getParameterAssignment_3(), "rule__JavaDoc__ParameterAssignment_3");
					put(grammarAccess.getJavaDocAccess().getReturnAssignment_4(), "rule__JavaDoc__ReturnAssignment_4");
					put(grammarAccess.getJavaDocAccess().getVersionAssignment_5(), "rule__JavaDoc__VersionAssignment_5");
					put(grammarAccess.getJavaDocAccess().getThrowsAssignment_6(), "rule__JavaDoc__ThrowsAssignment_6");
					put(grammarAccess.getJavaDocAccess().getSeeAssignment_7(), "rule__JavaDoc__SeeAssignment_7");
					put(grammarAccess.getContainsAccess().getWhichAssignment_2(), "rule__Contains__WhichAssignment_2");
					put(grammarAccess.getModifiersAccess().getBlendAssignment_3(), "rule__Modifiers__BlendAssignment_3");
					put(grammarAccess.getModifiersAccess().getBlendAssignment_5_2(), "rule__Modifiers__BlendAssignment_5_2");
					put(grammarAccess.getBlendModifiersAccess().getAccessAssignment_0_0(), "rule__BlendModifiers__AccessAssignment_0_0");
					put(grammarAccess.getBlendModifiersAccess().getStaticAssignment_0_1_1(), "rule__BlendModifiers__StaticAssignment_0_1_1");
					put(grammarAccess.getBlendModifiersAccess().getFinalAssignment_0_2_1(), "rule__BlendModifiers__FinalAssignment_0_2_1");
					put(grammarAccess.getBlendModifiersAccess().getAbstractAssignment_0_3_1(), "rule__BlendModifiers__AbstractAssignment_0_3_1");
					put(grammarAccess.getBlendModifiersAccess().getSynchronizedAssignment_0_4_1(), "rule__BlendModifiers__SynchronizedAssignment_0_4_1");
					put(grammarAccess.getBlendModifiersAccess().getStaticAssignment_1_0(), "rule__BlendModifiers__StaticAssignment_1_0");
					put(grammarAccess.getBlendModifiersAccess().getFinalAssignment_1_1_1(), "rule__BlendModifiers__FinalAssignment_1_1_1");
					put(grammarAccess.getBlendModifiersAccess().getAbstractAssignment_1_2_1(), "rule__BlendModifiers__AbstractAssignment_1_2_1");
					put(grammarAccess.getBlendModifiersAccess().getSynchronizedAssignment_1_3_1(), "rule__BlendModifiers__SynchronizedAssignment_1_3_1");
					put(grammarAccess.getBlendModifiersAccess().getFinalAssignment_2_0(), "rule__BlendModifiers__FinalAssignment_2_0");
					put(grammarAccess.getBlendModifiersAccess().getAbstractAssignment_2_1_1(), "rule__BlendModifiers__AbstractAssignment_2_1_1");
					put(grammarAccess.getBlendModifiersAccess().getSynchronizedAssignment_2_2_1(), "rule__BlendModifiers__SynchronizedAssignment_2_2_1");
					put(grammarAccess.getBlendModifiersAccess().getAbstractAssignment_3_0(), "rule__BlendModifiers__AbstractAssignment_3_0");
					put(grammarAccess.getBlendModifiersAccess().getSynchronizedAssignment_3_1_1(), "rule__BlendModifiers__SynchronizedAssignment_3_1_1");
					put(grammarAccess.getBlendModifiersAccess().getSynchronizedAssignment_4(), "rule__BlendModifiers__SynchronizedAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalJRulesParser typedParser = (InternalJRulesParser) parser;
			typedParser.entryRuleRuleSet();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public JRulesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(JRulesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
