/*
 * generated by Xtext 2.10.0
 */
package es.uam.sara.tfg.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JRuleGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.RuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cProjectNameKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cProjectNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cProjectNameEStringParserRuleCall_0_1_0 = (RuleCall)cProjectNameAssignment_0_1.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		private final Assignment cRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulesRuleParserRuleCall_2_0 = (RuleCall)cRulesAssignment_2.eContents().get(0);
		
		//RuleSet:
		//	('Project Name:' ProjectName=EString)?
		//	rules+=Rule rules+=Rule*;
		@Override public ParserRule getRule() { return rule; }
		
		//('Project Name:' ProjectName=EString)? rules+=Rule rules+=Rule*
		public Group getGroup() { return cGroup; }
		
		//('Project Name:' ProjectName=EString)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'Project Name:'
		public Keyword getProjectNameKeyword_0_0() { return cProjectNameKeyword_0_0; }
		
		//ProjectName=EString
		public Assignment getProjectNameAssignment_0_1() { return cProjectNameAssignment_0_1; }
		
		//EString
		public RuleCall getProjectNameEStringParserRuleCall_0_1_0() { return cProjectNameEStringParserRuleCall_0_1_0; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_0() { return cRulesRuleParserRuleCall_1_0; }
		
		//rules+=Rule*
		public Assignment getRulesAssignment_2() { return cRulesAssignment_2; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_2_0() { return cRulesRuleParserRuleCall_2_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionActionEnumRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Assignment cOnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOnTestingParserRuleCall_1_0 = (RuleCall)cOnAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Rule:
		//	action=Action on=Testing ';';
		@Override public ParserRule getRule() { return rule; }
		
		//action=Action on=Testing ';'
		public Group getGroup() { return cGroup; }
		
		//action=Action
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }
		
		//Action
		public RuleCall getActionActionEnumRuleCall_0_0() { return cActionActionEnumRuleCall_0_0; }
		
		//on=Testing
		public Assignment getOnAssignment_1() { return cOnAssignment_1; }
		
		//Testing
		public RuleCall getOnTestingParserRuleCall_1_0() { return cOnTestingParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class TestingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.Testing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNoNoKeyword_0_0 = (Keyword)cNoAssignment_0.eContents().get(0);
		private final Assignment cQuantifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuantifierQuantifierEnumRuleCall_1_0 = (RuleCall)cQuantifierAssignment_1.eContents().get(0);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementElementParserRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Keyword cSatisfyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSatisfyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSatisfyOrParserRuleCall_4_0 = (RuleCall)cSatisfyAssignment_4.eContents().get(0);
		
		//Testing:
		//	no?='no'? quantifier=Quantifier element=Element 'satisfy' satisfy=Or;
		@Override public ParserRule getRule() { return rule; }
		
		//no?='no'? quantifier=Quantifier element=Element 'satisfy' satisfy=Or
		public Group getGroup() { return cGroup; }
		
		//no?='no'?
		public Assignment getNoAssignment_0() { return cNoAssignment_0; }
		
		//'no'
		public Keyword getNoNoKeyword_0_0() { return cNoNoKeyword_0_0; }
		
		//quantifier=Quantifier
		public Assignment getQuantifierAssignment_1() { return cQuantifierAssignment_1; }
		
		//Quantifier
		public RuleCall getQuantifierQuantifierEnumRuleCall_1_0() { return cQuantifierQuantifierEnumRuleCall_1_0; }
		
		//element=Element
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//Element
		public RuleCall getElementElementParserRuleCall_2_0() { return cElementElementParserRuleCall_2_0; }
		
		//'satisfy'
		public Keyword getSatisfyKeyword_3() { return cSatisfyKeyword_3; }
		
		//satisfy=Or
		public Assignment getSatisfyAssignment_4() { return cSatisfyAssignment_4; }
		
		//Or
		public RuleCall getSatisfyOrParserRuleCall_4_0() { return cSatisfyOrParserRuleCall_4_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.Element");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementElementJavaEnumRuleCall_0_0 = (RuleCall)cElementAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWhichKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFilterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFilterOrParserRuleCall_1_1_0 = (RuleCall)cFilterAssignment_1_1.eContents().get(0);
		
		//Element:
		//	element=ElementJava ('which' filter=Or)?;
		@Override public ParserRule getRule() { return rule; }
		
		//element=ElementJava ('which' filter=Or)?
		public Group getGroup() { return cGroup; }
		
		//element=ElementJava
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }
		
		//ElementJava
		public RuleCall getElementElementJavaEnumRuleCall_0_0() { return cElementElementJavaEnumRuleCall_0_0; }
		
		//('which' filter=Or)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'which'
		public Keyword getWhichKeyword_1_0() { return cWhichKeyword_1_0; }
		
		//filter=Or
		public Assignment getFilterAssignment_1_1() { return cFilterAssignment_1_1; }
		
		//Or
		public RuleCall getFilterOrParserRuleCall_1_1_0() { return cFilterOrParserRuleCall_1_1_0; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.Or");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOpAndParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpAndParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cOrKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cOpAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cOpAndParserRuleCall_1_3_2_0 = (RuleCall)cOpAssignment_1_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		
		//Or:
		//	op+=And | '(' op+=And ')' ('or' '(' op+=And ')')+;
		@Override public ParserRule getRule() { return rule; }
		
		//op+=And | '(' op+=And ')' ('or' '(' op+=And ')')+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//op+=And
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//And
		public RuleCall getOpAndParserRuleCall_0_0() { return cOpAndParserRuleCall_0_0; }
		
		//'(' op+=And ')' ('or' '(' op+=And ')')+
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//op+=And
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//And
		public RuleCall getOpAndParserRuleCall_1_1_0() { return cOpAndParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//('or' '(' op+=And ')')+
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'or'
		public Keyword getOrKeyword_1_3_0() { return cOrKeyword_1_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_3_1() { return cLeftParenthesisKeyword_1_3_1; }
		
		//op+=And
		public Assignment getOpAssignment_1_3_2() { return cOpAssignment_1_3_2; }
		
		//And
		public RuleCall getOpAndParserRuleCall_1_3_2_0() { return cOpAndParserRuleCall_1_3_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3_3() { return cRightParenthesisKeyword_1_3_3; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpSatisfyParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpSatisfyParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		
		//And:
		//	op+=Satisfy ('and' op+=Satisfy)*;
		@Override public ParserRule getRule() { return rule; }
		
		//op+=Satisfy ('and' op+=Satisfy)*
		public Group getGroup() { return cGroup; }
		
		//op+=Satisfy
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//Satisfy
		public RuleCall getOpSatisfyParserRuleCall_0_0() { return cOpSatisfyParserRuleCall_0_0; }
		
		//('and' op+=Satisfy)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//op+=Satisfy
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//Satisfy
		public RuleCall getOpSatisfyParserRuleCall_1_1_0() { return cOpSatisfyParserRuleCall_1_1_0; }
	}
	public class SatisfyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.Satisfy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIsInheritorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImplementsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIsExtendedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHaveConstantParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVariableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParametreParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConstructorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cReturnParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cAttributeTypeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cInitializeParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cNoEmptyParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cNameParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cJavaDocParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cConteinsParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cModifiersParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//Satisfy:
		//	IsInheritor | Implements | IsExtended | HaveConstant | Variable | Parametre | Constructor | Return | AttributeType |
		//	Initialize | NoEmpty | Name | JavaDoc | Conteins | Modifiers;
		@Override public ParserRule getRule() { return rule; }
		
		//IsInheritor | Implements | IsExtended | HaveConstant | Variable | Parametre | Constructor | Return | AttributeType |
		//Initialize | NoEmpty | Name | JavaDoc | Conteins | Modifiers
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IsInheritor
		public RuleCall getIsInheritorParserRuleCall_0() { return cIsInheritorParserRuleCall_0; }
		
		//Implements
		public RuleCall getImplementsParserRuleCall_1() { return cImplementsParserRuleCall_1; }
		
		//IsExtended
		public RuleCall getIsExtendedParserRuleCall_2() { return cIsExtendedParserRuleCall_2; }
		
		//HaveConstant
		public RuleCall getHaveConstantParserRuleCall_3() { return cHaveConstantParserRuleCall_3; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_4() { return cVariableParserRuleCall_4; }
		
		//Parametre
		public RuleCall getParametreParserRuleCall_5() { return cParametreParserRuleCall_5; }
		
		//Constructor
		public RuleCall getConstructorParserRuleCall_6() { return cConstructorParserRuleCall_6; }
		
		//Return
		public RuleCall getReturnParserRuleCall_7() { return cReturnParserRuleCall_7; }
		
		//AttributeType
		public RuleCall getAttributeTypeParserRuleCall_8() { return cAttributeTypeParserRuleCall_8; }
		
		//Initialize
		public RuleCall getInitializeParserRuleCall_9() { return cInitializeParserRuleCall_9; }
		
		//NoEmpty
		public RuleCall getNoEmptyParserRuleCall_10() { return cNoEmptyParserRuleCall_10; }
		
		//Name
		public RuleCall getNameParserRuleCall_11() { return cNameParserRuleCall_11; }
		
		//JavaDoc
		public RuleCall getJavaDocParserRuleCall_12() { return cJavaDocParserRuleCall_12; }
		
		//Conteins
		public RuleCall getConteinsParserRuleCall_13() { return cConteinsParserRuleCall_13; }
		
		//Modifiers
		public RuleCall getModifiersParserRuleCall_14() { return cModifiersParserRuleCall_14; }
	}
	public class IsInheritorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.IsInheritor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsInheritorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsInheritorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cMaxLevelKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMaxLevelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMaxLevelEBigIntegerParserRuleCall_2_1_0 = (RuleCall)cMaxLevelAssignment_2_1.eContents().get(0);
		
		//IsInheritor:
		//	{IsInheritor}
		//	'is inheritor' ('max level=' maxLevel=EBigInteger)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{IsInheritor} 'is inheritor' ('max level=' maxLevel=EBigInteger)?
		public Group getGroup() { return cGroup; }
		
		//{IsInheritor}
		public Action getIsInheritorAction_0() { return cIsInheritorAction_0; }
		
		//'is inheritor'
		public Keyword getIsInheritorKeyword_1() { return cIsInheritorKeyword_1; }
		
		//('max level=' maxLevel=EBigInteger)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'max level='
		public Keyword getMaxLevelKeyword_2_0() { return cMaxLevelKeyword_2_0; }
		
		//maxLevel=EBigInteger
		public Assignment getMaxLevelAssignment_2_1() { return cMaxLevelAssignment_2_1; }
		
		//EBigInteger
		public RuleCall getMaxLevelEBigIntegerParserRuleCall_2_1_0() { return cMaxLevelEBigIntegerParserRuleCall_2_1_0; }
	}
	public class ImplementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.Implements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImplementsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImplementsInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cMaxInterfaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMaxInterfaceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMaxInterfaceEBigIntegerParserRuleCall_2_1_0 = (RuleCall)cMaxInterfaceAssignment_2_1.eContents().get(0);
		
		//Implements:
		//	{Implements}
		//	'implements interface' ('max interface=' maxInterface=EBigInteger)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Implements} 'implements interface' ('max interface=' maxInterface=EBigInteger)?
		public Group getGroup() { return cGroup; }
		
		//{Implements}
		public Action getImplementsAction_0() { return cImplementsAction_0; }
		
		//'implements interface'
		public Keyword getImplementsInterfaceKeyword_1() { return cImplementsInterfaceKeyword_1; }
		
		//('max interface=' maxInterface=EBigInteger)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'max interface='
		public Keyword getMaxInterfaceKeyword_2_0() { return cMaxInterfaceKeyword_2_0; }
		
		//maxInterface=EBigInteger
		public Assignment getMaxInterfaceAssignment_2_1() { return cMaxInterfaceAssignment_2_1; }
		
		//EBigInteger
		public RuleCall getMaxInterfaceEBigIntegerParserRuleCall_2_1_0() { return cMaxInterfaceEBigIntegerParserRuleCall_2_1_0; }
	}
	public class IsExtendedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.IsExtended");
		private final Assignment cIsExtendsAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIsExtendsIsExtendsKeyword_0 = (Keyword)cIsExtendsAssignment.eContents().get(0);
		
		//IsExtended:
		//	isExtends?='is extends';
		@Override public ParserRule getRule() { return rule; }
		
		//isExtends?='is extends'
		public Assignment getIsExtendsAssignment() { return cIsExtendsAssignment; }
		
		//'is extends'
		public Keyword getIsExtendsIsExtendsKeyword_0() { return cIsExtendsIsExtendsKeyword_0; }
	}
	public class HaveConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.HaveConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHaveConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUseConstantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//HaveConstant:
		//	{HaveConstant}
		//	'use constant';
		@Override public ParserRule getRule() { return rule; }
		
		//{HaveConstant} 'use constant'
		public Group getGroup() { return cGroup; }
		
		//{HaveConstant}
		public Action getHaveConstantAction_0() { return cHaveConstantAction_0; }
		
		//'use constant'
		public Keyword getUseConstantKeyword_1() { return cUseConstantKeyword_1; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariablesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cPositionAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cPositionRightPositionKeyword_1_0_0_0 = (Keyword)cPositionAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cAndKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cInitializeAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final Keyword cInitializeInitializedKeyword_1_0_1_1_0 = (Keyword)cInitializeAssignment_1_0_1_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cInitializeAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cInitializeInitializedKeyword_1_1_0_0 = (Keyword)cInitializeAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cAndKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cPositionAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final Keyword cPositionRightPositionKeyword_1_1_1_1_0 = (Keyword)cPositionAssignment_1_1_1_1.eContents().get(0);
		
		//Variable:
		//	'variables' (position?='right position' ('and ' initialize?='initialized')? | initialize?='initialized' ('and '
		//	position?='right position')?);
		@Override public ParserRule getRule() { return rule; }
		
		//'variables' (position?='right position' ('and ' initialize?='initialized')? | initialize?='initialized' ('and '
		//position?='right position')?)
		public Group getGroup() { return cGroup; }
		
		//'variables'
		public Keyword getVariablesKeyword_0() { return cVariablesKeyword_0; }
		
		//(position?='right position' ('and ' initialize?='initialized')? | initialize?='initialized' ('and '
		//position?='right position')?)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//position?='right position' ('and ' initialize?='initialized')?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//position?='right position'
		public Assignment getPositionAssignment_1_0_0() { return cPositionAssignment_1_0_0; }
		
		//'right position'
		public Keyword getPositionRightPositionKeyword_1_0_0_0() { return cPositionRightPositionKeyword_1_0_0_0; }
		
		//('and ' initialize?='initialized')?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//'and '
		public Keyword getAndKeyword_1_0_1_0() { return cAndKeyword_1_0_1_0; }
		
		//initialize?='initialized'
		public Assignment getInitializeAssignment_1_0_1_1() { return cInitializeAssignment_1_0_1_1; }
		
		//'initialized'
		public Keyword getInitializeInitializedKeyword_1_0_1_1_0() { return cInitializeInitializedKeyword_1_0_1_1_0; }
		
		//initialize?='initialized' ('and ' position?='right position')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//initialize?='initialized'
		public Assignment getInitializeAssignment_1_1_0() { return cInitializeAssignment_1_1_0; }
		
		//'initialized'
		public Keyword getInitializeInitializedKeyword_1_1_0_0() { return cInitializeInitializedKeyword_1_1_0_0; }
		
		//('and ' position?='right position')?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//'and '
		public Keyword getAndKeyword_1_1_1_0() { return cAndKeyword_1_1_1_0; }
		
		//position?='right position'
		public Assignment getPositionAssignment_1_1_1_1() { return cPositionAssignment_1_1_1_1; }
		
		//'right position'
		public Keyword getPositionRightPositionKeyword_1_1_1_1_0() { return cPositionRightPositionKeyword_1_1_1_1_0; }
	}
	public class ParametreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.Parametre");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParametreAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberOfParametersKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNumParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNumParamEBigIntegerParserRuleCall_2_0 = (RuleCall)cNumParamAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndTypesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypesParamAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypesParamEStringParserRuleCall_3_1_0 = (RuleCall)cTypesParamAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTypesParamAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cTypesParamEStringParserRuleCall_3_2_1_0 = (RuleCall)cTypesParamAssignment_3_2_1.eContents().get(0);
		
		//Parametre:
		//	{Parametre}
		//	"number of parameters =" numParam=EBigInteger ("and types=" typesParam+=EString ("," typesParam+=EString)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parametre} "number of parameters =" numParam=EBigInteger ("and types=" typesParam+=EString ("," typesParam+=EString)*)?
		public Group getGroup() { return cGroup; }
		
		//{Parametre}
		public Action getParametreAction_0() { return cParametreAction_0; }
		
		//"number of parameters ="
		public Keyword getNumberOfParametersKeyword_1() { return cNumberOfParametersKeyword_1; }
		
		//numParam=EBigInteger
		public Assignment getNumParamAssignment_2() { return cNumParamAssignment_2; }
		
		//EBigInteger
		public RuleCall getNumParamEBigIntegerParserRuleCall_2_0() { return cNumParamEBigIntegerParserRuleCall_2_0; }
		
		//("and types=" typesParam+=EString ("," typesParam+=EString)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"and types="
		public Keyword getAndTypesKeyword_3_0() { return cAndTypesKeyword_3_0; }
		
		//typesParam+=EString
		public Assignment getTypesParamAssignment_3_1() { return cTypesParamAssignment_3_1; }
		
		//EString
		public RuleCall getTypesParamEStringParserRuleCall_3_1_0() { return cTypesParamEStringParserRuleCall_3_1_0; }
		
		//("," typesParam+=EString)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//typesParam+=EString
		public Assignment getTypesParamAssignment_3_2_1() { return cTypesParamAssignment_3_2_1; }
		
		//EString
		public RuleCall getTypesParamEStringParserRuleCall_3_2_1_0() { return cTypesParamEStringParserRuleCall_3_2_1_0; }
	}
	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstructorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsConstructorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Constructor:
		//	{Constructor}
		//	'is constructor';
		@Override public ParserRule getRule() { return rule; }
		
		//{Constructor} 'is constructor'
		public Group getGroup() { return cGroup; }
		
		//{Constructor}
		public Action getConstructorAction_0() { return cConstructorAction_0; }
		
		//'is constructor'
		public Keyword getIsConstructorKeyword_1() { return cIsConstructorKeyword_1; }
	}
	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeEStringParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		
		//Return:
		//	'return type=' returnType=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'return type=' returnType=EString
		public Group getGroup() { return cGroup; }
		
		//'return type='
		public Keyword getReturnTypeKeyword_0() { return cReturnTypeKeyword_0; }
		
		//returnType=EString
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//EString
		public RuleCall getReturnTypeEStringParserRuleCall_1_0() { return cReturnTypeEStringParserRuleCall_1_0; }
	}
	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.AttributeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeEStringParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//AttributeType:
		//	'attribute type=' Type=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute type=' Type=EString
		public Group getGroup() { return cGroup; }
		
		//'attribute type='
		public Keyword getAttributeTypeKeyword_0() { return cAttributeTypeKeyword_0; }
		
		//Type=EString
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//EString
		public RuleCall getTypeEStringParserRuleCall_1_0() { return cTypeEStringParserRuleCall_1_0; }
	}
	public class InitializeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.Initialize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitializeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsInitializedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Initialize:
		//	{Initialize}
		//	'is initialized';
		@Override public ParserRule getRule() { return rule; }
		
		//{Initialize} 'is initialized'
		public Group getGroup() { return cGroup; }
		
		//{Initialize}
		public Action getInitializeAction_0() { return cInitializeAction_0; }
		
		//'is initialized'
		public Keyword getIsInitializedKeyword_1() { return cIsInitializedKeyword_1; }
	}
	public class NoEmptyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.NoEmpty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNoEmptyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNoEmptyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NoEmpty:
		//	{NoEmpty}
		//	'no empty';
		@Override public ParserRule getRule() { return rule; }
		
		//{NoEmpty} 'no empty'
		public Group getGroup() { return cGroup; }
		
		//{NoEmpty}
		public Action getNoEmptyAction_0() { return cNoEmptyAction_0; }
		
		//'no empty'
		public Keyword getNoEmptyKeyword_1() { return cNoEmptyKeyword_1; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTypeNameKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeNameTypeEnumRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cAndNameKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cOperatorAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cOperatorNameOperatorEnumRuleCall_0_2_1_0 = (RuleCall)cOperatorAssignment_0_2_1.eContents().get(0);
		private final Assignment cNameAssignment_0_2_2 = (Assignment)cGroup_0_2.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_0_2_2_0 = (RuleCall)cNameAssignment_0_2_2.eContents().get(0);
		private final Group cGroup_0_2_3 = (Group)cGroup_0_2.eContents().get(3);
		private final Keyword cInKeyword_0_2_3_0 = (Keyword)cGroup_0_2_3.eContents().get(0);
		private final Assignment cLanguageAssignment_0_2_3_1 = (Assignment)cGroup_0_2_3.eContents().get(1);
		private final RuleCall cLanguageLanguageEnumRuleCall_0_2_3_1_0 = (RuleCall)cLanguageAssignment_0_2_3_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNameKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorNameOperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cInKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cLanguageAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cLanguageLanguageEnumRuleCall_1_3_1_0 = (RuleCall)cLanguageAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cAndTypeNameKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cTypeAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cTypeNameTypeEnumRuleCall_1_4_1_0 = (RuleCall)cTypeAssignment_1_4_1.eContents().get(0);
		
		//Name:
		//	'type name =' type=NameType ('and name ' operator=NameOperator name=EString ("in" Language=Language)?)? | 'name '
		//	operator=NameOperator name=EString ("in" Language=Language)? ('and type name =' type=NameType)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'type name =' type=NameType ('and name ' operator=NameOperator name=EString ("in" Language=Language)?)? | 'name '
		//operator=NameOperator name=EString ("in" Language=Language)? ('and type name =' type=NameType)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'type name =' type=NameType ('and name ' operator=NameOperator name=EString ("in" Language=Language)?)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'type name ='
		public Keyword getTypeNameKeyword_0_0() { return cTypeNameKeyword_0_0; }
		
		//type=NameType
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//NameType
		public RuleCall getTypeNameTypeEnumRuleCall_0_1_0() { return cTypeNameTypeEnumRuleCall_0_1_0; }
		
		//('and name ' operator=NameOperator name=EString ("in" Language=Language)?)?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'and name '
		public Keyword getAndNameKeyword_0_2_0() { return cAndNameKeyword_0_2_0; }
		
		//operator=NameOperator
		public Assignment getOperatorAssignment_0_2_1() { return cOperatorAssignment_0_2_1; }
		
		//NameOperator
		public RuleCall getOperatorNameOperatorEnumRuleCall_0_2_1_0() { return cOperatorNameOperatorEnumRuleCall_0_2_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_0_2_2() { return cNameAssignment_0_2_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_2_2_0() { return cNameEStringParserRuleCall_0_2_2_0; }
		
		//("in" Language=Language)?
		public Group getGroup_0_2_3() { return cGroup_0_2_3; }
		
		//"in"
		public Keyword getInKeyword_0_2_3_0() { return cInKeyword_0_2_3_0; }
		
		//Language=Language
		public Assignment getLanguageAssignment_0_2_3_1() { return cLanguageAssignment_0_2_3_1; }
		
		//Language
		public RuleCall getLanguageLanguageEnumRuleCall_0_2_3_1_0() { return cLanguageLanguageEnumRuleCall_0_2_3_1_0; }
		
		//'name ' operator=NameOperator name=EString ("in" Language=Language)? ('and type name =' type=NameType)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'name '
		public Keyword getNameKeyword_1_0() { return cNameKeyword_1_0; }
		
		//operator=NameOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//NameOperator
		public RuleCall getOperatorNameOperatorEnumRuleCall_1_1_0() { return cOperatorNameOperatorEnumRuleCall_1_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_2_0() { return cNameEStringParserRuleCall_1_2_0; }
		
		//("in" Language=Language)?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//"in"
		public Keyword getInKeyword_1_3_0() { return cInKeyword_1_3_0; }
		
		//Language=Language
		public Assignment getLanguageAssignment_1_3_1() { return cLanguageAssignment_1_3_1; }
		
		//Language
		public RuleCall getLanguageLanguageEnumRuleCall_1_3_1_0() { return cLanguageLanguageEnumRuleCall_1_3_1_0; }
		
		//('and type name =' type=NameType)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//'and type name ='
		public Keyword getAndTypeNameKeyword_1_4_0() { return cAndTypeNameKeyword_1_4_0; }
		
		//type=NameType
		public Assignment getTypeAssignment_1_4_1() { return cTypeAssignment_1_4_1; }
		
		//NameType
		public RuleCall getTypeNameTypeEnumRuleCall_1_4_1_0() { return cTypeNameTypeEnumRuleCall_1_4_1_0; }
	}
	public class JavaDocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.JavaDoc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJavaDocAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJavaDocKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAuthorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cAuthorAuthorKeyword_2_0 = (Keyword)cAuthorAssignment_2.eContents().get(0);
		private final Assignment cParametreAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cParametreParameterKeyword_3_0 = (Keyword)cParametreAssignment_3.eContents().get(0);
		private final Assignment cReturnAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cReturnReturnKeyword_4_0 = (Keyword)cReturnAssignment_4.eContents().get(0);
		private final Assignment cVersionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cVersionVersionKeyword_5_0 = (Keyword)cVersionAssignment_5.eContents().get(0);
		private final Assignment cThrowsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cThrowsThrowsKeyword_6_0 = (Keyword)cThrowsAssignment_6.eContents().get(0);
		private final Assignment cSeeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cSeeSeeKeyword_7_0 = (Keyword)cSeeAssignment_7.eContents().get(0);
		
		//JavaDoc:
		//	{JavaDoc}
		//	'JavaDoc'
		//	author?='@author'?
		//	parametre?='@parameter'?
		//	return?='@return'?
		//	version?='@version'?
		//	throws?='@throws'?
		//	see?='@see'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{JavaDoc} 'JavaDoc' author?='@author'? parametre?='@parameter'? return?='@return'? version?='@version'?
		//throws?='@throws'? see?='@see'?
		public Group getGroup() { return cGroup; }
		
		//{JavaDoc}
		public Action getJavaDocAction_0() { return cJavaDocAction_0; }
		
		//'JavaDoc'
		public Keyword getJavaDocKeyword_1() { return cJavaDocKeyword_1; }
		
		//author?='@author'?
		public Assignment getAuthorAssignment_2() { return cAuthorAssignment_2; }
		
		//'@author'
		public Keyword getAuthorAuthorKeyword_2_0() { return cAuthorAuthorKeyword_2_0; }
		
		//parametre?='@parameter'?
		public Assignment getParametreAssignment_3() { return cParametreAssignment_3; }
		
		//'@parameter'
		public Keyword getParametreParameterKeyword_3_0() { return cParametreParameterKeyword_3_0; }
		
		//return?='@return'?
		public Assignment getReturnAssignment_4() { return cReturnAssignment_4; }
		
		//'@return'
		public Keyword getReturnReturnKeyword_4_0() { return cReturnReturnKeyword_4_0; }
		
		//version?='@version'?
		public Assignment getVersionAssignment_5() { return cVersionAssignment_5; }
		
		//'@version'
		public Keyword getVersionVersionKeyword_5_0() { return cVersionVersionKeyword_5_0; }
		
		//throws?='@throws'?
		public Assignment getThrowsAssignment_6() { return cThrowsAssignment_6; }
		
		//'@throws'
		public Keyword getThrowsThrowsKeyword_6_0() { return cThrowsThrowsKeyword_6_0; }
		
		//see?='@see'?
		public Assignment getSeeAssignment_7() { return cSeeAssignment_7; }
		
		//'@see'
		public Keyword getSeeSeeKeyword_7_0() { return cSeeSeeKeyword_7_0; }
	}
	public class ConteinsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.Conteins");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHaveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWhichAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhichTestingParserRuleCall_2_0 = (RuleCall)cWhichAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Conteins:
		//	'have'
		//	'{'
		//	which=Testing
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'have' '{' which=Testing '}'
		public Group getGroup() { return cGroup; }
		
		//'have'
		public Keyword getHaveKeyword_0() { return cHaveKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//which=Testing
		public Assignment getWhichAssignment_2() { return cWhichAssignment_2; }
		
		//Testing
		public RuleCall getWhichTestingParserRuleCall_2_0() { return cWhichTestingParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ModifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.Modifiers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModifiersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBlendAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlendBlendModifiersParserRuleCall_2_0 = (RuleCall)cBlendAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOrKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cBlendAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cBlendBlendModifiersParserRuleCall_4_2_0 = (RuleCall)cBlendAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//Modifiers:
		//	'modifiers: '
		//	'(' blend+=BlendModifiers ')' ("or" '(' blend+=BlendModifiers ')')*;
		@Override public ParserRule getRule() { return rule; }
		
		//'modifiers: ' '(' blend+=BlendModifiers ')' ("or" '(' blend+=BlendModifiers ')')*
		public Group getGroup() { return cGroup; }
		
		//'modifiers: '
		public Keyword getModifiersKeyword_0() { return cModifiersKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//blend+=BlendModifiers
		public Assignment getBlendAssignment_2() { return cBlendAssignment_2; }
		
		//BlendModifiers
		public RuleCall getBlendBlendModifiersParserRuleCall_2_0() { return cBlendBlendModifiersParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//("or" '(' blend+=BlendModifiers ')')*
		public Group getGroup_4() { return cGroup_4; }
		
		//"or"
		public Keyword getOrKeyword_4_0() { return cOrKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//blend+=BlendModifiers
		public Assignment getBlendAssignment_4_2() { return cBlendAssignment_4_2; }
		
		//BlendModifiers
		public RuleCall getBlendBlendModifiersParserRuleCall_4_2_0() { return cBlendBlendModifiersParserRuleCall_4_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}
	public class BlendModifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.BlendModifiers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAccessAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAccessAccessModifierEnumRuleCall_0_0_0 = (RuleCall)cAccessAssignment_0_0.eContents().get(0);
		private final Assignment cStaticAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cStaticAndStaticKeyword_0_1_0 = (Keyword)cStaticAssignment_0_1.eContents().get(0);
		private final Assignment cFinalAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final Keyword cFinalAndFinalKeyword_0_2_0 = (Keyword)cFinalAssignment_0_2.eContents().get(0);
		private final Assignment cAbstractAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final Keyword cAbstractAndAbstractKeyword_0_3_0 = (Keyword)cAbstractAssignment_0_3.eContents().get(0);
		private final Assignment cSynchronizedAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final Keyword cSynchronizedAndSynchronizedKeyword_0_4_0 = (Keyword)cSynchronizedAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cStaticAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cStaticStaticKeyword_1_0_0 = (Keyword)cStaticAssignment_1_0.eContents().get(0);
		private final Assignment cFinalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cFinalAndFinalKeyword_1_1_0 = (Keyword)cFinalAssignment_1_1.eContents().get(0);
		private final Assignment cAbstractAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cAbstractAndAbstractKeyword_1_2_0 = (Keyword)cAbstractAssignment_1_2.eContents().get(0);
		private final Assignment cSynchronizedAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cSynchronizedAndSynchronizedKeyword_1_3_0 = (Keyword)cSynchronizedAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cFinalAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cFinalFinalKeyword_2_0_0 = (Keyword)cFinalAssignment_2_0.eContents().get(0);
		private final Assignment cAbstractAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cAbstractAndAbstractKeyword_2_1_0 = (Keyword)cAbstractAssignment_2_1.eContents().get(0);
		private final Assignment cSynchronizedAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Keyword cSynchronizedAndSynchronizedKeyword_2_2_0 = (Keyword)cSynchronizedAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cAbstractAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_3_0_0 = (Keyword)cAbstractAssignment_3_0.eContents().get(0);
		private final Assignment cSynchronizedAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cSynchronizedAndSynchronizedKeyword_3_1_0 = (Keyword)cSynchronizedAssignment_3_1.eContents().get(0);
		private final Assignment cSynchronizedAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cSynchronizedSynchronizedKeyword_4_0 = (Keyword)cSynchronizedAssignment_4.eContents().get(0);
		
		//BlendModifiers:
		//	access=AccessModifier static?='and static'? final?='and final'? abstract?='and abstract'?
		//	synchronized?='and synchronized'? | static?='static' final?='and final'? abstract?='and abstract'?
		//	synchronized?='and synchronized'? | final?='final' abstract?='and abstract'? synchronized?='and synchronized'? |
		//	abstract?='abstract' synchronized?='and synchronized'? | synchronized?='synchronized';
		@Override public ParserRule getRule() { return rule; }
		
		//access=AccessModifier static?='and static'? final?='and final'? abstract?='and abstract'?
		//synchronized?='and synchronized'? | static?='static' final?='and final'? abstract?='and abstract'?
		//synchronized?='and synchronized'? | final?='final' abstract?='and abstract'? synchronized?='and synchronized'? |
		//abstract?='abstract' synchronized?='and synchronized'? | synchronized?='synchronized'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//access=AccessModifier static?='and static'? final?='and final'? abstract?='and abstract'?
		//synchronized?='and synchronized'?
		public Group getGroup_0() { return cGroup_0; }
		
		//access=AccessModifier
		public Assignment getAccessAssignment_0_0() { return cAccessAssignment_0_0; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_0_0_0() { return cAccessAccessModifierEnumRuleCall_0_0_0; }
		
		//static?='and static'?
		public Assignment getStaticAssignment_0_1() { return cStaticAssignment_0_1; }
		
		//'and static'
		public Keyword getStaticAndStaticKeyword_0_1_0() { return cStaticAndStaticKeyword_0_1_0; }
		
		//final?='and final'?
		public Assignment getFinalAssignment_0_2() { return cFinalAssignment_0_2; }
		
		//'and final'
		public Keyword getFinalAndFinalKeyword_0_2_0() { return cFinalAndFinalKeyword_0_2_0; }
		
		//abstract?='and abstract'?
		public Assignment getAbstractAssignment_0_3() { return cAbstractAssignment_0_3; }
		
		//'and abstract'
		public Keyword getAbstractAndAbstractKeyword_0_3_0() { return cAbstractAndAbstractKeyword_0_3_0; }
		
		//synchronized?='and synchronized'?
		public Assignment getSynchronizedAssignment_0_4() { return cSynchronizedAssignment_0_4; }
		
		//'and synchronized'
		public Keyword getSynchronizedAndSynchronizedKeyword_0_4_0() { return cSynchronizedAndSynchronizedKeyword_0_4_0; }
		
		//static?='static' final?='and final'? abstract?='and abstract'? synchronized?='and synchronized'?
		public Group getGroup_1() { return cGroup_1; }
		
		//static?='static'
		public Assignment getStaticAssignment_1_0() { return cStaticAssignment_1_0; }
		
		//'static'
		public Keyword getStaticStaticKeyword_1_0_0() { return cStaticStaticKeyword_1_0_0; }
		
		//final?='and final'?
		public Assignment getFinalAssignment_1_1() { return cFinalAssignment_1_1; }
		
		//'and final'
		public Keyword getFinalAndFinalKeyword_1_1_0() { return cFinalAndFinalKeyword_1_1_0; }
		
		//abstract?='and abstract'?
		public Assignment getAbstractAssignment_1_2() { return cAbstractAssignment_1_2; }
		
		//'and abstract'
		public Keyword getAbstractAndAbstractKeyword_1_2_0() { return cAbstractAndAbstractKeyword_1_2_0; }
		
		//synchronized?='and synchronized'?
		public Assignment getSynchronizedAssignment_1_3() { return cSynchronizedAssignment_1_3; }
		
		//'and synchronized'
		public Keyword getSynchronizedAndSynchronizedKeyword_1_3_0() { return cSynchronizedAndSynchronizedKeyword_1_3_0; }
		
		//final?='final' abstract?='and abstract'? synchronized?='and synchronized'?
		public Group getGroup_2() { return cGroup_2; }
		
		//final?='final'
		public Assignment getFinalAssignment_2_0() { return cFinalAssignment_2_0; }
		
		//'final'
		public Keyword getFinalFinalKeyword_2_0_0() { return cFinalFinalKeyword_2_0_0; }
		
		//abstract?='and abstract'?
		public Assignment getAbstractAssignment_2_1() { return cAbstractAssignment_2_1; }
		
		//'and abstract'
		public Keyword getAbstractAndAbstractKeyword_2_1_0() { return cAbstractAndAbstractKeyword_2_1_0; }
		
		//synchronized?='and synchronized'?
		public Assignment getSynchronizedAssignment_2_2() { return cSynchronizedAssignment_2_2; }
		
		//'and synchronized'
		public Keyword getSynchronizedAndSynchronizedKeyword_2_2_0() { return cSynchronizedAndSynchronizedKeyword_2_2_0; }
		
		//abstract?='abstract' synchronized?='and synchronized'?
		public Group getGroup_3() { return cGroup_3; }
		
		//abstract?='abstract'
		public Assignment getAbstractAssignment_3_0() { return cAbstractAssignment_3_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_3_0_0() { return cAbstractAbstractKeyword_3_0_0; }
		
		//synchronized?='and synchronized'?
		public Assignment getSynchronizedAssignment_3_1() { return cSynchronizedAssignment_3_1; }
		
		//'and synchronized'
		public Keyword getSynchronizedAndSynchronizedKeyword_3_1_0() { return cSynchronizedAndSynchronizedKeyword_3_1_0; }
		
		//synchronized?='synchronized'
		public Assignment getSynchronizedAssignment_4() { return cSynchronizedAssignment_4; }
		
		//'synchronized'
		public Keyword getSynchronizedSynchronizedKeyword_4_0() { return cSynchronizedSynchronizedKeyword_4_0; }
	}
	public class EBigIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.EBigInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EBigInteger ecore::EBigInteger:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	public class ActionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCheckEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCheckCheckKeyword_0_0 = (Keyword)cCheckEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCorrectEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCorrectCorrectKeyword_1_0 = (Keyword)cCorrectEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Action:
		//	check | correct;
		public EnumRule getRule() { return rule; }
		
		//check | correct
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//check
		public EnumLiteralDeclaration getCheckEnumLiteralDeclaration_0() { return cCheckEnumLiteralDeclaration_0; }
		
		//'check'
		public Keyword getCheckCheckKeyword_0_0() { return cCheckCheckKeyword_0_0; }
		
		//correct
		public EnumLiteralDeclaration getCorrectEnumLiteralDeclaration_1() { return cCorrectEnumLiteralDeclaration_1; }
		
		//'correct'
		public Keyword getCorrectCorrectKeyword_1_0() { return cCorrectCorrectKeyword_1_0; }
	}
	public class QuantifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.Quantifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOneOneKeyword_0_0 = (Keyword)cOneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cExistsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cExistsExistsKeyword_1_0 = (Keyword)cExistsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAllEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAllAllKeyword_2_0 = (Keyword)cAllEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Quantifier:
		//	one | exists | all;
		public EnumRule getRule() { return rule; }
		
		//one | exists | all
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//one
		public EnumLiteralDeclaration getOneEnumLiteralDeclaration_0() { return cOneEnumLiteralDeclaration_0; }
		
		//'one'
		public Keyword getOneOneKeyword_0_0() { return cOneOneKeyword_0_0; }
		
		//exists
		public EnumLiteralDeclaration getExistsEnumLiteralDeclaration_1() { return cExistsEnumLiteralDeclaration_1; }
		
		//'exists'
		public Keyword getExistsExistsKeyword_1_0() { return cExistsExistsKeyword_1_0; }
		
		//all
		public EnumLiteralDeclaration getAllEnumLiteralDeclaration_2() { return cAllEnumLiteralDeclaration_2; }
		
		//'all'
		public Keyword getAllAllKeyword_2_0() { return cAllAllKeyword_2_0; }
	}
	public class ElementJavaElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.ElementJava");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPackageEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPackagePackageKeyword_0_0 = (Keyword)cPackageEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cClassEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cClassClassKeyword_1_0 = (Keyword)cClassEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInterfaceEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInterfaceInterfaceKeyword_2_0 = (Keyword)cInterfaceEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEnumEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEnumEnumKeyword_3_0 = (Keyword)cEnumEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMethodEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMethodMethodKeyword_4_0 = (Keyword)cMethodEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cAttributeEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cAttributeAttributeKeyword_5_0 = (Keyword)cAttributeEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ElementJava:
		//	Package='package' | Class='class' | Interface='interface' | Enum='enum' | Method='method' | Attribute='attribute';
		public EnumRule getRule() { return rule; }
		
		//Package='package' | Class='class' | Interface='interface' | Enum='enum' | Method='method' | Attribute='attribute'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Package='package'
		public EnumLiteralDeclaration getPackageEnumLiteralDeclaration_0() { return cPackageEnumLiteralDeclaration_0; }
		
		//'package'
		public Keyword getPackagePackageKeyword_0_0() { return cPackagePackageKeyword_0_0; }
		
		//Class='class'
		public EnumLiteralDeclaration getClassEnumLiteralDeclaration_1() { return cClassEnumLiteralDeclaration_1; }
		
		//'class'
		public Keyword getClassClassKeyword_1_0() { return cClassClassKeyword_1_0; }
		
		//Interface='interface'
		public EnumLiteralDeclaration getInterfaceEnumLiteralDeclaration_2() { return cInterfaceEnumLiteralDeclaration_2; }
		
		//'interface'
		public Keyword getInterfaceInterfaceKeyword_2_0() { return cInterfaceInterfaceKeyword_2_0; }
		
		//Enum='enum'
		public EnumLiteralDeclaration getEnumEnumLiteralDeclaration_3() { return cEnumEnumLiteralDeclaration_3; }
		
		//'enum'
		public Keyword getEnumEnumKeyword_3_0() { return cEnumEnumKeyword_3_0; }
		
		//Method='method'
		public EnumLiteralDeclaration getMethodEnumLiteralDeclaration_4() { return cMethodEnumLiteralDeclaration_4; }
		
		//'method'
		public Keyword getMethodMethodKeyword_4_0() { return cMethodMethodKeyword_4_0; }
		
		//Attribute='attribute'
		public EnumLiteralDeclaration getAttributeEnumLiteralDeclaration_5() { return cAttributeEnumLiteralDeclaration_5; }
		
		//'attribute'
		public Keyword getAttributeAttributeKeyword_5_0() { return cAttributeAttributeKeyword_5_0; }
	}
	public class NameTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.NameType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUpperCaseEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUpperCaseUpperCaseKeyword_0_0 = (Keyword)cUpperCaseEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLowerCaseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLowerCaseLowerCaseKeyword_1_0 = (Keyword)cLowerCaseEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUpperCamelCaseEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUpperCamelCaseUpperCamelCaseKeyword_2_0 = (Keyword)cUpperCamelCaseEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLowerCamelCaseEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLowerCamelCaseLowerCamelCaseKeyword_3_0 = (Keyword)cLowerCamelCaseEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cStartUpperCaseEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cStartUpperCaseStartUpperCaseKeyword_4_0 = (Keyword)cStartUpperCaseEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum NameType:
		//	upperCase | lowerCase | upperCamelCase | lowerCamelCase | startUpperCase;
		public EnumRule getRule() { return rule; }
		
		//upperCase | lowerCase | upperCamelCase | lowerCamelCase | startUpperCase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//upperCase
		public EnumLiteralDeclaration getUpperCaseEnumLiteralDeclaration_0() { return cUpperCaseEnumLiteralDeclaration_0; }
		
		//'upperCase'
		public Keyword getUpperCaseUpperCaseKeyword_0_0() { return cUpperCaseUpperCaseKeyword_0_0; }
		
		//lowerCase
		public EnumLiteralDeclaration getLowerCaseEnumLiteralDeclaration_1() { return cLowerCaseEnumLiteralDeclaration_1; }
		
		//'lowerCase'
		public Keyword getLowerCaseLowerCaseKeyword_1_0() { return cLowerCaseLowerCaseKeyword_1_0; }
		
		//upperCamelCase
		public EnumLiteralDeclaration getUpperCamelCaseEnumLiteralDeclaration_2() { return cUpperCamelCaseEnumLiteralDeclaration_2; }
		
		//'upperCamelCase'
		public Keyword getUpperCamelCaseUpperCamelCaseKeyword_2_0() { return cUpperCamelCaseUpperCamelCaseKeyword_2_0; }
		
		//lowerCamelCase
		public EnumLiteralDeclaration getLowerCamelCaseEnumLiteralDeclaration_3() { return cLowerCamelCaseEnumLiteralDeclaration_3; }
		
		//'lowerCamelCase'
		public Keyword getLowerCamelCaseLowerCamelCaseKeyword_3_0() { return cLowerCamelCaseLowerCamelCaseKeyword_3_0; }
		
		//startUpperCase
		public EnumLiteralDeclaration getStartUpperCaseEnumLiteralDeclaration_4() { return cStartUpperCaseEnumLiteralDeclaration_4; }
		
		//'startUpperCase'
		public Keyword getStartUpperCaseStartUpperCaseKeyword_4_0() { return cStartUpperCaseStartUpperCaseKeyword_4_0; }
	}
	public class NameOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.NameOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLikeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLikeLikeKeyword_0_0 = (Keyword)cLikeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEqualEqualKeyword_1_0 = (Keyword)cEqualEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum NameOperator:
		//	like | equal;
		public EnumRule getRule() { return rule; }
		
		//like | equal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//like
		public EnumLiteralDeclaration getLikeEnumLiteralDeclaration_0() { return cLikeEnumLiteralDeclaration_0; }
		
		//'like'
		public Keyword getLikeLikeKeyword_0_0() { return cLikeLikeKeyword_0_0; }
		
		//equal
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_1() { return cEqualEnumLiteralDeclaration_1; }
		
		//'equal'
		public Keyword getEqualEqualKeyword_1_0() { return cEqualEqualKeyword_1_0; }
	}
	public class LanguageElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.Language");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cENGLISHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cENGLISHEnglishKeyword_0_0 = (Keyword)cENGLISHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cESPANIOLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cESPANIOLSpanishKeyword_1_0 = (Keyword)cESPANIOLEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Language:
		//	ENGLISH='English' | ESPANIOL='Spanish';
		public EnumRule getRule() { return rule; }
		
		//ENGLISH='English' | ESPANIOL='Spanish'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ENGLISH='English'
		public EnumLiteralDeclaration getENGLISHEnumLiteralDeclaration_0() { return cENGLISHEnumLiteralDeclaration_0; }
		
		//'English'
		public Keyword getENGLISHEnglishKeyword_0_0() { return cENGLISHEnglishKeyword_0_0; }
		
		//ESPANIOL='Spanish'
		public EnumLiteralDeclaration getESPANIOLEnumLiteralDeclaration_1() { return cESPANIOLEnumLiteralDeclaration_1; }
		
		//'Spanish'
		public Keyword getESPANIOLSpanishKeyword_1_0() { return cESPANIOLSpanishKeyword_1_0; }
	}
	public class AccessModifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRule.AccessModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cProtectedProtectedKeyword_1_0 = (Keyword)cProtectedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPrivatePrivateKeyword_2_0 = (Keyword)cPrivateEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AccessModifier:
		//	Public | Protected | Private;
		public EnumRule getRule() { return rule; }
		
		//Public | Protected | Private
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		//'Public'
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//Protected
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_1() { return cProtectedEnumLiteralDeclaration_1; }
		
		//'Protected'
		public Keyword getProtectedProtectedKeyword_1_0() { return cProtectedProtectedKeyword_1_0; }
		
		//Private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_2() { return cPrivateEnumLiteralDeclaration_2; }
		
		//'Private'
		public Keyword getPrivatePrivateKeyword_2_0() { return cPrivatePrivateKeyword_2_0; }
	}
	
	private final RuleSetElements pRuleSet;
	private final RuleElements pRule;
	private final ActionElements eAction;
	private final TestingElements pTesting;
	private final QuantifierElements eQuantifier;
	private final ElementElements pElement;
	private final ElementJavaElements eElementJava;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final SatisfyElements pSatisfy;
	private final IsInheritorElements pIsInheritor;
	private final ImplementsElements pImplements;
	private final IsExtendedElements pIsExtended;
	private final HaveConstantElements pHaveConstant;
	private final VariableElements pVariable;
	private final ParametreElements pParametre;
	private final ConstructorElements pConstructor;
	private final ReturnElements pReturn;
	private final AttributeTypeElements pAttributeType;
	private final InitializeElements pInitialize;
	private final NoEmptyElements pNoEmpty;
	private final NameElements pName;
	private final NameTypeElements eNameType;
	private final NameOperatorElements eNameOperator;
	private final LanguageElements eLanguage;
	private final JavaDocElements pJavaDoc;
	private final ConteinsElements pConteins;
	private final ModifiersElements pModifiers;
	private final BlendModifiersElements pBlendModifiers;
	private final AccessModifierElements eAccessModifier;
	private final EBigIntegerElements pEBigInteger;
	private final EStringElements pEString;
	private final EBooleanElements pEBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JRuleGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRuleSet = new RuleSetElements();
		this.pRule = new RuleElements();
		this.eAction = new ActionElements();
		this.pTesting = new TestingElements();
		this.eQuantifier = new QuantifierElements();
		this.pElement = new ElementElements();
		this.eElementJava = new ElementJavaElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pSatisfy = new SatisfyElements();
		this.pIsInheritor = new IsInheritorElements();
		this.pImplements = new ImplementsElements();
		this.pIsExtended = new IsExtendedElements();
		this.pHaveConstant = new HaveConstantElements();
		this.pVariable = new VariableElements();
		this.pParametre = new ParametreElements();
		this.pConstructor = new ConstructorElements();
		this.pReturn = new ReturnElements();
		this.pAttributeType = new AttributeTypeElements();
		this.pInitialize = new InitializeElements();
		this.pNoEmpty = new NoEmptyElements();
		this.pName = new NameElements();
		this.eNameType = new NameTypeElements();
		this.eNameOperator = new NameOperatorElements();
		this.eLanguage = new LanguageElements();
		this.pJavaDoc = new JavaDocElements();
		this.pConteins = new ConteinsElements();
		this.pModifiers = new ModifiersElements();
		this.pBlendModifiers = new BlendModifiersElements();
		this.eAccessModifier = new AccessModifierElements();
		this.pEBigInteger = new EBigIntegerElements();
		this.pEString = new EStringElements();
		this.pEBoolean = new EBooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("es.uam.sara.tfg.dsl.JRule".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RuleSet:
	//	('Project Name:' ProjectName=EString)?
	//	rules+=Rule rules+=Rule*;
	public RuleSetElements getRuleSetAccess() {
		return pRuleSet;
	}
	
	public ParserRule getRuleSetRule() {
		return getRuleSetAccess().getRule();
	}
	
	//Rule:
	//	action=Action on=Testing ';';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//enum Action:
	//	check | correct;
	public ActionElements getActionAccess() {
		return eAction;
	}
	
	public EnumRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Testing:
	//	no?='no'? quantifier=Quantifier element=Element 'satisfy' satisfy=Or;
	public TestingElements getTestingAccess() {
		return pTesting;
	}
	
	public ParserRule getTestingRule() {
		return getTestingAccess().getRule();
	}
	
	//enum Quantifier:
	//	one | exists | all;
	public QuantifierElements getQuantifierAccess() {
		return eQuantifier;
	}
	
	public EnumRule getQuantifierRule() {
		return getQuantifierAccess().getRule();
	}
	
	//Element:
	//	element=ElementJava ('which' filter=Or)?;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//enum ElementJava:
	//	Package='package' | Class='class' | Interface='interface' | Enum='enum' | Method='method' | Attribute='attribute';
	public ElementJavaElements getElementJavaAccess() {
		return eElementJava;
	}
	
	public EnumRule getElementJavaRule() {
		return getElementJavaAccess().getRule();
	}
	
	//Or:
	//	op+=And | '(' op+=And ')' ('or' '(' op+=And ')')+;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And:
	//	op+=Satisfy ('and' op+=Satisfy)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Satisfy:
	//	IsInheritor | Implements | IsExtended | HaveConstant | Variable | Parametre | Constructor | Return | AttributeType |
	//	Initialize | NoEmpty | Name | JavaDoc | Conteins | Modifiers;
	public SatisfyElements getSatisfyAccess() {
		return pSatisfy;
	}
	
	public ParserRule getSatisfyRule() {
		return getSatisfyAccess().getRule();
	}
	
	//IsInheritor:
	//	{IsInheritor}
	//	'is inheritor' ('max level=' maxLevel=EBigInteger)?;
	public IsInheritorElements getIsInheritorAccess() {
		return pIsInheritor;
	}
	
	public ParserRule getIsInheritorRule() {
		return getIsInheritorAccess().getRule();
	}
	
	//Implements:
	//	{Implements}
	//	'implements interface' ('max interface=' maxInterface=EBigInteger)?;
	public ImplementsElements getImplementsAccess() {
		return pImplements;
	}
	
	public ParserRule getImplementsRule() {
		return getImplementsAccess().getRule();
	}
	
	//IsExtended:
	//	isExtends?='is extends';
	public IsExtendedElements getIsExtendedAccess() {
		return pIsExtended;
	}
	
	public ParserRule getIsExtendedRule() {
		return getIsExtendedAccess().getRule();
	}
	
	//HaveConstant:
	//	{HaveConstant}
	//	'use constant';
	public HaveConstantElements getHaveConstantAccess() {
		return pHaveConstant;
	}
	
	public ParserRule getHaveConstantRule() {
		return getHaveConstantAccess().getRule();
	}
	
	//Variable:
	//	'variables' (position?='right position' ('and ' initialize?='initialized')? | initialize?='initialized' ('and '
	//	position?='right position')?);
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Parametre:
	//	{Parametre}
	//	"number of parameters =" numParam=EBigInteger ("and types=" typesParam+=EString ("," typesParam+=EString)*)?;
	public ParametreElements getParametreAccess() {
		return pParametre;
	}
	
	public ParserRule getParametreRule() {
		return getParametreAccess().getRule();
	}
	
	//Constructor:
	//	{Constructor}
	//	'is constructor';
	public ConstructorElements getConstructorAccess() {
		return pConstructor;
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}
	
	//Return:
	//	'return type=' returnType=EString;
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//AttributeType:
	//	'attribute type=' Type=EString;
	public AttributeTypeElements getAttributeTypeAccess() {
		return pAttributeType;
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}
	
	//Initialize:
	//	{Initialize}
	//	'is initialized';
	public InitializeElements getInitializeAccess() {
		return pInitialize;
	}
	
	public ParserRule getInitializeRule() {
		return getInitializeAccess().getRule();
	}
	
	//NoEmpty:
	//	{NoEmpty}
	//	'no empty';
	public NoEmptyElements getNoEmptyAccess() {
		return pNoEmpty;
	}
	
	public ParserRule getNoEmptyRule() {
		return getNoEmptyAccess().getRule();
	}
	
	//Name:
	//	'type name =' type=NameType ('and name ' operator=NameOperator name=EString ("in" Language=Language)?)? | 'name '
	//	operator=NameOperator name=EString ("in" Language=Language)? ('and type name =' type=NameType)?;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//enum NameType:
	//	upperCase | lowerCase | upperCamelCase | lowerCamelCase | startUpperCase;
	public NameTypeElements getNameTypeAccess() {
		return eNameType;
	}
	
	public EnumRule getNameTypeRule() {
		return getNameTypeAccess().getRule();
	}
	
	//enum NameOperator:
	//	like | equal;
	public NameOperatorElements getNameOperatorAccess() {
		return eNameOperator;
	}
	
	public EnumRule getNameOperatorRule() {
		return getNameOperatorAccess().getRule();
	}
	
	//enum Language:
	//	ENGLISH='English' | ESPANIOL='Spanish';
	public LanguageElements getLanguageAccess() {
		return eLanguage;
	}
	
	public EnumRule getLanguageRule() {
		return getLanguageAccess().getRule();
	}
	
	//JavaDoc:
	//	{JavaDoc}
	//	'JavaDoc'
	//	author?='@author'?
	//	parametre?='@parameter'?
	//	return?='@return'?
	//	version?='@version'?
	//	throws?='@throws'?
	//	see?='@see'?;
	public JavaDocElements getJavaDocAccess() {
		return pJavaDoc;
	}
	
	public ParserRule getJavaDocRule() {
		return getJavaDocAccess().getRule();
	}
	
	//Conteins:
	//	'have'
	//	'{'
	//	which=Testing
	//	'}';
	public ConteinsElements getConteinsAccess() {
		return pConteins;
	}
	
	public ParserRule getConteinsRule() {
		return getConteinsAccess().getRule();
	}
	
	//Modifiers:
	//	'modifiers: '
	//	'(' blend+=BlendModifiers ')' ("or" '(' blend+=BlendModifiers ')')*;
	public ModifiersElements getModifiersAccess() {
		return pModifiers;
	}
	
	public ParserRule getModifiersRule() {
		return getModifiersAccess().getRule();
	}
	
	//BlendModifiers:
	//	access=AccessModifier static?='and static'? final?='and final'? abstract?='and abstract'?
	//	synchronized?='and synchronized'? | static?='static' final?='and final'? abstract?='and abstract'?
	//	synchronized?='and synchronized'? | final?='final' abstract?='and abstract'? synchronized?='and synchronized'? |
	//	abstract?='abstract' synchronized?='and synchronized'? | synchronized?='synchronized';
	public BlendModifiersElements getBlendModifiersAccess() {
		return pBlendModifiers;
	}
	
	public ParserRule getBlendModifiersRule() {
		return getBlendModifiersAccess().getRule();
	}
	
	//enum AccessModifier:
	//	Public | Protected | Private;
	public AccessModifierElements getAccessModifierAccess() {
		return eAccessModifier;
	}
	
	public EnumRule getAccessModifierRule() {
		return getAccessModifierAccess().getRule();
	}
	
	//EBigInteger ecore::EBigInteger:
	//	'-'? INT
	public EBigIntegerElements getEBigIntegerAccess() {
		return pEBigInteger;
	}
	
	public ParserRule getEBigIntegerRule() {
		return getEBigIntegerAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
