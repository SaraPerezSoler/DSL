/*
 * generated by Xtext 2.9.2
 */
package es.uam.sara.tfg.dsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import es.uam.sara.tfg.dsl.ide.contentassist.antlr.internal.InternalJRuleParser;
import es.uam.sara.tfg.dsl.services.JRuleGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class JRuleParser extends AbstractContentAssistParser {

	@Inject
	private JRuleGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalJRuleParser createParser() {
		InternalJRuleParser result = new InternalJRuleParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getOrAccess().getAlternatives(), "rule__Or__Alternatives");
					put(grammarAccess.getSatisfyAccess().getAlternatives(), "rule__Satisfy__Alternatives");
					put(grammarAccess.getVariableAccess().getAlternatives_1(), "rule__Variable__Alternatives_1");
					put(grammarAccess.getNameAccess().getAlternatives(), "rule__Name__Alternatives");
					put(grammarAccess.getBlendModifiersAccess().getAlternatives(), "rule__BlendModifiers__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getQuantifierAccess().getAlternatives(), "rule__Quantifier__Alternatives");
					put(grammarAccess.getElementJavaAccess().getAlternatives(), "rule__ElementJava__Alternatives");
					put(grammarAccess.getNameTypeAccess().getAlternatives(), "rule__NameType__Alternatives");
					put(grammarAccess.getNameOperatorAccess().getAlternatives(), "rule__NameOperator__Alternatives");
					put(grammarAccess.getLanguageAccess().getAlternatives(), "rule__Language__Alternatives");
					put(grammarAccess.getAccessModifierAccess().getAlternatives(), "rule__AccessModifier__Alternatives");
					put(grammarAccess.getRuleSetAccess().getGroup(), "rule__RuleSet__Group__0");
					put(grammarAccess.getRuleSetAccess().getGroup_0(), "rule__RuleSet__Group_0__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getTestingAccess().getGroup(), "rule__Testing__Group__0");
					put(grammarAccess.getElementAccess().getGroup(), "rule__Element__Group__0");
					put(grammarAccess.getElementAccess().getGroup_1(), "rule__Element__Group_1__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getOrAccess().getGroup_1_3(), "rule__Or__Group_1_3__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getIsInheritorAccess().getGroup(), "rule__IsInheritor__Group__0");
					put(grammarAccess.getIsInheritorAccess().getGroup_2(), "rule__IsInheritor__Group_2__0");
					put(grammarAccess.getImplementsAccess().getGroup(), "rule__Implements__Group__0");
					put(grammarAccess.getImplementsAccess().getGroup_2(), "rule__Implements__Group_2__0");
					put(grammarAccess.getHaveConstantAccess().getGroup(), "rule__HaveConstant__Group__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getVariableAccess().getGroup_1_0(), "rule__Variable__Group_1_0__0");
					put(grammarAccess.getVariableAccess().getGroup_1_0_1(), "rule__Variable__Group_1_0_1__0");
					put(grammarAccess.getVariableAccess().getGroup_1_1(), "rule__Variable__Group_1_1__0");
					put(grammarAccess.getVariableAccess().getGroup_1_1_1(), "rule__Variable__Group_1_1_1__0");
					put(grammarAccess.getParametreAccess().getGroup(), "rule__Parametre__Group__0");
					put(grammarAccess.getParametreAccess().getGroup_3(), "rule__Parametre__Group_3__0");
					put(grammarAccess.getParametreAccess().getGroup_3_2(), "rule__Parametre__Group_3_2__0");
					put(grammarAccess.getConstructorAccess().getGroup(), "rule__Constructor__Group__0");
					put(grammarAccess.getReturnAccess().getGroup(), "rule__Return__Group__0");
					put(grammarAccess.getAttributeTypeAccess().getGroup(), "rule__AttributeType__Group__0");
					put(grammarAccess.getInitializeAccess().getGroup(), "rule__Initialize__Group__0");
					put(grammarAccess.getNoEmptyAccess().getGroup(), "rule__NoEmpty__Group__0");
					put(grammarAccess.getNameAccess().getGroup_0(), "rule__Name__Group_0__0");
					put(grammarAccess.getNameAccess().getGroup_0_2(), "rule__Name__Group_0_2__0");
					put(grammarAccess.getNameAccess().getGroup_0_2_3(), "rule__Name__Group_0_2_3__0");
					put(grammarAccess.getNameAccess().getGroup_1(), "rule__Name__Group_1__0");
					put(grammarAccess.getNameAccess().getGroup_1_3(), "rule__Name__Group_1_3__0");
					put(grammarAccess.getNameAccess().getGroup_1_4(), "rule__Name__Group_1_4__0");
					put(grammarAccess.getJavaDocAccess().getGroup(), "rule__JavaDoc__Group__0");
					put(grammarAccess.getConteinsAccess().getGroup(), "rule__Conteins__Group__0");
					put(grammarAccess.getModifiersAccess().getGroup(), "rule__Modifiers__Group__0");
					put(grammarAccess.getModifiersAccess().getGroup_4(), "rule__Modifiers__Group_4__0");
					put(grammarAccess.getBlendModifiersAccess().getGroup_0(), "rule__BlendModifiers__Group_0__0");
					put(grammarAccess.getBlendModifiersAccess().getGroup_1(), "rule__BlendModifiers__Group_1__0");
					put(grammarAccess.getBlendModifiersAccess().getGroup_2(), "rule__BlendModifiers__Group_2__0");
					put(grammarAccess.getBlendModifiersAccess().getGroup_3(), "rule__BlendModifiers__Group_3__0");
					put(grammarAccess.getEBigIntegerAccess().getGroup(), "rule__EBigInteger__Group__0");
					put(grammarAccess.getRuleSetAccess().getProjectNameAssignment_0_1(), "rule__RuleSet__ProjectNameAssignment_0_1");
					put(grammarAccess.getRuleSetAccess().getRulesAssignment_1(), "rule__RuleSet__RulesAssignment_1");
					put(grammarAccess.getRuleSetAccess().getRulesAssignment_2(), "rule__RuleSet__RulesAssignment_2");
					put(grammarAccess.getRuleAccess().getActionAssignment_0(), "rule__Rule__ActionAssignment_0");
					put(grammarAccess.getRuleAccess().getOnAssignment_1(), "rule__Rule__OnAssignment_1");
					put(grammarAccess.getTestingAccess().getNoAssignment_0(), "rule__Testing__NoAssignment_0");
					put(grammarAccess.getTestingAccess().getQuantifierAssignment_1(), "rule__Testing__QuantifierAssignment_1");
					put(grammarAccess.getTestingAccess().getElementAssignment_2(), "rule__Testing__ElementAssignment_2");
					put(grammarAccess.getTestingAccess().getSatisfyAssignment_4(), "rule__Testing__SatisfyAssignment_4");
					put(grammarAccess.getElementAccess().getElementAssignment_0(), "rule__Element__ElementAssignment_0");
					put(grammarAccess.getElementAccess().getFilterAssignment_1_1(), "rule__Element__FilterAssignment_1_1");
					put(grammarAccess.getOrAccess().getOpAssignment_0(), "rule__Or__OpAssignment_0");
					put(grammarAccess.getOrAccess().getOpAssignment_1_1(), "rule__Or__OpAssignment_1_1");
					put(grammarAccess.getOrAccess().getOpAssignment_1_3_2(), "rule__Or__OpAssignment_1_3_2");
					put(grammarAccess.getAndAccess().getOpAssignment_0(), "rule__And__OpAssignment_0");
					put(grammarAccess.getAndAccess().getOpAssignment_1_1(), "rule__And__OpAssignment_1_1");
					put(grammarAccess.getIsInheritorAccess().getMaxLevelAssignment_2_1(), "rule__IsInheritor__MaxLevelAssignment_2_1");
					put(grammarAccess.getImplementsAccess().getMaxInterfaceAssignment_2_1(), "rule__Implements__MaxInterfaceAssignment_2_1");
					put(grammarAccess.getIsExtendedAccess().getIsExtendsAssignment(), "rule__IsExtended__IsExtendsAssignment");
					put(grammarAccess.getVariableAccess().getPositionAssignment_1_0_0(), "rule__Variable__PositionAssignment_1_0_0");
					put(grammarAccess.getVariableAccess().getInitializeAssignment_1_0_1_1(), "rule__Variable__InitializeAssignment_1_0_1_1");
					put(grammarAccess.getVariableAccess().getInitializeAssignment_1_1_0(), "rule__Variable__InitializeAssignment_1_1_0");
					put(grammarAccess.getVariableAccess().getPositionAssignment_1_1_1_1(), "rule__Variable__PositionAssignment_1_1_1_1");
					put(grammarAccess.getParametreAccess().getNumParamAssignment_2(), "rule__Parametre__NumParamAssignment_2");
					put(grammarAccess.getParametreAccess().getTypesParamAssignment_3_1(), "rule__Parametre__TypesParamAssignment_3_1");
					put(grammarAccess.getParametreAccess().getTypesParamAssignment_3_2_1(), "rule__Parametre__TypesParamAssignment_3_2_1");
					put(grammarAccess.getReturnAccess().getReturnTypeAssignment_1(), "rule__Return__ReturnTypeAssignment_1");
					put(grammarAccess.getAttributeTypeAccess().getTypeAssignment_1(), "rule__AttributeType__TypeAssignment_1");
					put(grammarAccess.getNameAccess().getTypeAssignment_0_1(), "rule__Name__TypeAssignment_0_1");
					put(grammarAccess.getNameAccess().getOperatorAssignment_0_2_1(), "rule__Name__OperatorAssignment_0_2_1");
					put(grammarAccess.getNameAccess().getNameAssignment_0_2_2(), "rule__Name__NameAssignment_0_2_2");
					put(grammarAccess.getNameAccess().getLanguageAssignment_0_2_3_1(), "rule__Name__LanguageAssignment_0_2_3_1");
					put(grammarAccess.getNameAccess().getOperatorAssignment_1_1(), "rule__Name__OperatorAssignment_1_1");
					put(grammarAccess.getNameAccess().getNameAssignment_1_2(), "rule__Name__NameAssignment_1_2");
					put(grammarAccess.getNameAccess().getLanguageAssignment_1_3_1(), "rule__Name__LanguageAssignment_1_3_1");
					put(grammarAccess.getNameAccess().getTypeAssignment_1_4_1(), "rule__Name__TypeAssignment_1_4_1");
					put(grammarAccess.getJavaDocAccess().getAuthorAssignment_2(), "rule__JavaDoc__AuthorAssignment_2");
					put(grammarAccess.getJavaDocAccess().getParametreAssignment_3(), "rule__JavaDoc__ParametreAssignment_3");
					put(grammarAccess.getJavaDocAccess().getReturnAssignment_4(), "rule__JavaDoc__ReturnAssignment_4");
					put(grammarAccess.getJavaDocAccess().getVersionAssignment_5(), "rule__JavaDoc__VersionAssignment_5");
					put(grammarAccess.getJavaDocAccess().getThrowsAssignment_6(), "rule__JavaDoc__ThrowsAssignment_6");
					put(grammarAccess.getJavaDocAccess().getSeeAssignment_7(), "rule__JavaDoc__SeeAssignment_7");
					put(grammarAccess.getConteinsAccess().getWhichAssignment_2(), "rule__Conteins__WhichAssignment_2");
					put(grammarAccess.getModifiersAccess().getBlendAssignment_2(), "rule__Modifiers__BlendAssignment_2");
					put(grammarAccess.getModifiersAccess().getBlendAssignment_4_2(), "rule__Modifiers__BlendAssignment_4_2");
					put(grammarAccess.getBlendModifiersAccess().getAccessAssignment_0_0(), "rule__BlendModifiers__AccessAssignment_0_0");
					put(grammarAccess.getBlendModifiersAccess().getStaticAssignment_0_1(), "rule__BlendModifiers__StaticAssignment_0_1");
					put(grammarAccess.getBlendModifiersAccess().getFinalAssignment_0_2(), "rule__BlendModifiers__FinalAssignment_0_2");
					put(grammarAccess.getBlendModifiersAccess().getAbstractAssignment_0_3(), "rule__BlendModifiers__AbstractAssignment_0_3");
					put(grammarAccess.getBlendModifiersAccess().getSynchronizedAssignment_0_4(), "rule__BlendModifiers__SynchronizedAssignment_0_4");
					put(grammarAccess.getBlendModifiersAccess().getStaticAssignment_1_0(), "rule__BlendModifiers__StaticAssignment_1_0");
					put(grammarAccess.getBlendModifiersAccess().getFinalAssignment_1_1(), "rule__BlendModifiers__FinalAssignment_1_1");
					put(grammarAccess.getBlendModifiersAccess().getAbstractAssignment_1_2(), "rule__BlendModifiers__AbstractAssignment_1_2");
					put(grammarAccess.getBlendModifiersAccess().getSynchronizedAssignment_1_3(), "rule__BlendModifiers__SynchronizedAssignment_1_3");
					put(grammarAccess.getBlendModifiersAccess().getFinalAssignment_2_0(), "rule__BlendModifiers__FinalAssignment_2_0");
					put(grammarAccess.getBlendModifiersAccess().getAbstractAssignment_2_1(), "rule__BlendModifiers__AbstractAssignment_2_1");
					put(grammarAccess.getBlendModifiersAccess().getSynchronizedAssignment_2_2(), "rule__BlendModifiers__SynchronizedAssignment_2_2");
					put(grammarAccess.getBlendModifiersAccess().getAbstractAssignment_3_0(), "rule__BlendModifiers__AbstractAssignment_3_0");
					put(grammarAccess.getBlendModifiersAccess().getSynchronizedAssignment_3_1(), "rule__BlendModifiers__SynchronizedAssignment_3_1");
					put(grammarAccess.getBlendModifiersAccess().getSynchronizedAssignment_4(), "rule__BlendModifiers__SynchronizedAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalJRuleParser typedParser = (InternalJRuleParser) parser;
			typedParser.entryRuleRuleSet();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public JRuleGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(JRuleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
