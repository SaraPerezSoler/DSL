/**
 * generated by Xtext 2.10.0
 */
package es.uam.sara.tfg.dsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import javaRule.And;
import javaRule.ElementJava;
import javaRule.Filter;
import javaRule.Or;
import javaRule.Quantifier;
import javaRule.Rule;
import javaRule.Satisfy;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class JRulesGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    int i = 1;
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Rule> _filter = Iterables.<Rule>filter(_iterable, Rule.class);
    for (final Rule rule : _filter) {
      {
        CharSequence _generateClass = this.generateClass(rule, i);
        fsa.generateFile((("Rule" + Integer.valueOf(i)) + "Factory.java"), _generateClass);
        i++;
      }
    }
  }
  
  public CharSequence generateClass(final Rule rule, final int i) {
    CharSequence _xblockexpression = null;
    {
      ElementJava _element = rule.getElement();
      CharSequence t = this.getType(_element);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.rule.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.rule.Rule.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.*;");
      _builder.newLine();
      {
        ElementJava _element_1 = rule.getElement();
        boolean _equals = Objects.equal(_element_1, ElementJava.INTERFACE);
        if (_equals) {
          _builder.append("import es.uam.sara.tfg.properties.interfaces.*;");
          _builder.newLine();
        } else {
          ElementJava _element_2 = rule.getElement();
          boolean _equals_1 = Objects.equal(_element_2, ElementJava.CLASS);
          if (_equals_1) {
            _builder.append("import es.uam.sara.tfg.properties.classes.*;");
            _builder.newLine();
          } else {
            ElementJava _element_3 = rule.getElement();
            boolean _equals_2 = Objects.equal(_element_3, ElementJava.ENUM);
            if (_equals_2) {
              _builder.append("import es.uam.sara.tfg.properties.enumerations.*;");
              _builder.newLine();
            } else {
              ElementJava _element_4 = rule.getElement();
              boolean _equals_3 = Objects.equal(_element_4, ElementJava.METHOD);
              if (_equals_3) {
                _builder.append("import es.uam.sara.tfg.properties.methods.*;");
                _builder.newLine();
              } else {
                ElementJava _element_5 = rule.getElement();
                boolean _equals_4 = Objects.equal(_element_5, ElementJava.ATTRIBUTE);
                if (_equals_4) {
                  _builder.append("import es.uam.sara.tfg.properties.attributes.*;");
                  _builder.newLine();
                } else {
                  ElementJava _element_6 = rule.getElement();
                  boolean _equals_5 = Objects.equal(_element_6, ElementJava.PACKAGE);
                  if (_equals_5) {
                    _builder.append("import es.uam.sara.tfg.properties.packages.*;");
                    _builder.newLine();
                  }
                }
              }
            }
          }
        }
      }
      {
        ElementJava _element_7 = rule.getElement();
        boolean _notEquals = (!Objects.equal(_element_7, ElementJava.PACKAGE));
        if (_notEquals) {
          _builder.append("import org.eclipse.jdt.core.dom.");
          _builder.append(t, "");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.newLine();
      _builder.append("//");
      {
        boolean _isNo = rule.isNo();
        if (_isNo) {
          _builder.append("no");
        }
      }
      _builder.append(" ");
      Quantifier _quantifier = rule.getQuantifier();
      _builder.append(_quantifier, "");
      _builder.append(" ");
      ElementJava _element_8 = rule.getElement();
      _builder.append(_element_8, "");
      _builder.newLineIfNotEmpty();
      {
        Filter _filter = rule.getFilter();
        boolean _notEquals_1 = (!Objects.equal(_filter, null));
        if (_notEquals_1) {
          _builder.append("// whitch ");
          {
            Filter _filter_1 = rule.getFilter();
            boolean _isNo_1 = _filter_1.isNo();
            if (_isNo_1) {
              _builder.append("no");
            }
          }
          _builder.append(" ");
          Filter _filter_2 = rule.getFilter();
          Or _filter_3 = _filter_2.getFilter();
          CharSequence _textProperty = this.getTextProperty(_filter_3);
          _builder.append(_textProperty, "");
        }
      }
      _builder.newLineIfNotEmpty();
      _builder.append("//");
      {
        Or _satisfy = rule.getSatisfy();
        boolean _notEquals_2 = (!Objects.equal(_satisfy, null));
        if (_notEquals_2) {
          _builder.append(" satisfy ");
          Or _satisfy_1 = rule.getSatisfy();
          CharSequence _textProperty_1 = this.getTextProperty(_satisfy_1);
          _builder.append(_textProperty_1, "");
        }
      }
      _builder.newLineIfNotEmpty();
      _builder.append("public class Rule");
      _builder.append(i, "");
      _builder.append("Factory implements RuleFactory<");
      _builder.append(t, "");
      _builder.append(">{");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public Rule<");
      _builder.append(t, "\t");
      _builder.append("> getRule (List<");
      _builder.append(t, "\t");
      _builder.append("> elements){");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.newLine();
      {
        Filter _filter_4 = rule.getFilter();
        boolean _notEquals_3 = (!Objects.equal(_filter_4, null));
        if (_notEquals_3) {
          _builder.append("\t\t\t");
          _builder.append("Or<");
          _builder.append(t, "\t\t\t");
          _builder.append("> filter= new Filter<");
          _builder.append(t, "\t\t\t");
          _builder.append(">(");
          Filter _filter_5 = rule.getFilter();
          boolean _isNo_2 = _filter_5.isNo();
          _builder.append(_isNo_2, "\t\t\t");
          _builder.append(",elements);");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t\t");
          CharSequence _createProperty = this.createProperty(rule, true);
          _builder.append(_createProperty, "\t\t\t");
          _builder.newLineIfNotEmpty();
        } else {
          _builder.append("\t\t\t");
          _builder.append("Or<");
          _builder.append(t, "\t\t\t");
          _builder.append("> filter=null;");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        Or _satisfy_2 = rule.getSatisfy();
        boolean _notEquals_4 = (!Objects.equal(_satisfy_2, null));
        if (_notEquals_4) {
          _builder.append("\t\t\t");
          _builder.append("Or<");
          _builder.append(t, "\t\t\t");
          _builder.append("> satisfy= new Or<");
          _builder.append(t, "\t\t\t");
          _builder.append(">(elements);");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t\t");
          CharSequence _createProperty_1 = this.createProperty(rule, false);
          _builder.append(_createProperty_1, "\t\t\t");
          _builder.newLineIfNotEmpty();
        } else {
          _builder.append("\t\t\t");
          _builder.append("Or<");
          _builder.append(t, "\t\t\t");
          _builder.append("> satisfy=null;");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return new Rule<");
      _builder.append(t, "\t\t\t");
      _builder.append(">(");
      boolean _isNo_3 = rule.isNo();
      _builder.append(_isNo_3, "\t\t\t");
      _builder.append(", Quantifier.");
      Quantifier _quantifier_1 = rule.getQuantifier();
      String _literal = _quantifier_1.getLiteral();
      String _upperCase = _literal.toUpperCase();
      _builder.append(_upperCase, "\t\t\t");
      _builder.append(",elements, filter, satisfy);");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("}");
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence getTextProperty(final Or or) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("or(");
    {
      EList<And> _op = or.getOp();
      for(final And a : _op) {
        _builder.append(" and:(");
        {
          EList<Satisfy> _op_1 = a.getOp();
          for(final Satisfy s : _op_1) {
            Class<? extends Satisfy> _class = s.getClass();
            String _simpleName = _class.getSimpleName();
            String _replace = _simpleName.replace("Impl", "");
            _builder.append(_replace, "");
            _builder.append(", ");
          }
        }
        _builder.append(")");
      }
    }
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence createProperty(final Rule r, final boolean filter) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method getNamePropertieMethod(Satisfy, String, int) is undefined");
  }
  
  public CharSequence getType(final ElementJava e) {
    boolean _equals = Objects.equal(e, ElementJava.PACKAGE);
    if (_equals) {
      return "String";
    } else {
      boolean _equals_1 = Objects.equal(e, ElementJava.INTERFACE);
      if (_equals_1) {
        return "TypeDeclaration";
      } else {
        boolean _equals_2 = Objects.equal(e, ElementJava.CLASS);
        if (_equals_2) {
          return "TypeDeclaration";
        } else {
          boolean _equals_3 = Objects.equal(e, ElementJava.ENUM);
          if (_equals_3) {
            return "EnumDeclaration";
          } else {
            boolean _equals_4 = Objects.equal(e, ElementJava.METHOD);
            if (_equals_4) {
              return "MethodDeclaration";
            } else {
              return "FieldDeclaration";
            }
          }
        }
      }
    }
  }
}
