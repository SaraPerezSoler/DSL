/**
 * generated by Xtext 2.10.0
 */
package es.uam.sara.tfg.dsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import javaRule.And;
import javaRule.ElementJava;
import javaRule.Filter;
import javaRule.Or;
import javaRule.Rule;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class JRulesGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Rule> _filter = Iterables.<Rule>filter(_iterable, Rule.class);
    CharSequence _RuleFactory = this.RuleFactory(_filter);
    fsa.generateFile("RuleFactory.java", _RuleFactory);
  }
  
  public CharSequence RuleFactory(final Iterable<Rule> rules) {
    CharSequence _xblockexpression = null;
    {
      int i = 1;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.rule.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.rule.Rule.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.interfaces.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.classes.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.enumerations.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.methods.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.attributes.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.packages.*;");
      _builder.newLine();
      _builder.append("import org.eclipse.jdt.core.dom.TypeDeclaration;");
      _builder.newLine();
      _builder.append("import org.eclipse.jdt.core.dom.EnumDeclaration;");
      _builder.newLine();
      _builder.append("import org.eclipse.jdt.core.dom.MethodDeclaration;");
      _builder.newLine();
      _builder.append("import org.eclipse.jdt.core.dom.FieldDeclaration;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public class RuleFactory {");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("private List <Rule<?>> rules=null;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public List<Rule<?>> getRules(){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (rules!=null){");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return rules;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}else{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("rules= new ArrayList<Rule<?>>();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      {
        for(final Rule r : rules) {
          _builder.append("\t\t\t");
          _builder.append("//r");
          _builder.append(i, "\t\t\t");
          _builder.append(" ");
          String _string = r.toString();
          _builder.append(_string, "\t\t\t");
          _builder.newLineIfNotEmpty();
          {
            Filter _filter = r.getFilter();
            boolean _notEquals = (!Objects.equal(_filter, null));
            if (_notEquals) {
              _builder.append("\t\t\t");
              _builder.append("\t\t\t");
              ElementJava _element = r.getElement();
              CharSequence t = this.getType(_element);
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t\t");
              _builder.append("\t\t\t");
              _builder.append("Or<");
              _builder.append(t, "\t\t\t\t\t\t");
              _builder.append("> filter");
              _builder.append(i, "\t\t\t\t\t\t");
              _builder.append("= new Filter<");
              _builder.append(t, "\t\t\t\t\t\t");
              _builder.append(">(");
              Filter _filter_1 = r.getFilter();
              boolean _isNo = _filter_1.isNo();
              _builder.append(_isNo, "\t\t\t\t\t\t");
              _builder.append(",elements);");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t\t");
              _builder.append("\t\t\t");
              _builder.append("/*");
              int j = 1;
              _builder.newLineIfNotEmpty();
              {
                Filter _filter_2 = r.getFilter();
                Or _filter_3 = _filter_2.getFilter();
                EList<And> _op = _filter_3.getOp();
                for(final And a : _op) {
                  _builder.append("\t\t\t");
                  _builder.append("\t\t\t");
                  _builder.append("\t");
                  _builder.append("And<");
                  _builder.append(t, "\t\t\t\t\t\t\t");
                  _builder.append("> andFilter");
                  _builder.append(i, "\t\t\t\t\t\t\t");
                  _builder.append(j, "\t\t\t\t\t\t\t");
                  _builder.append(" = new And<");
                  _builder.append(t, "\t\t\t\t\t\t\t");
                  _builder.append(">(elements);");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t\t");
                  _builder.append("\t\t\t");
                  _builder.append("\t");
                  _builder.newLine();
                  _builder.append("\t\t\t");
                  _builder.append("\t\t\t");
                  _builder.append("\t");
                }
              }
              _builder.append("*/");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t\t\t");
          _builder.append("\t");
          _builder.newLine();
        }
      }
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("return rules;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence generateClass(final Rule rule, final int i) {
    return null;
  }
  
  /**
   * def CharSequence generateClass(Rule rule, int i) {
   * 	var t = getType(rule.element)
   * 	'''
   * 	import java.util.*;
   * 	import es.uam.sara.tfg.rule.*;
   * 	import es.uam.sara.tfg.rule.Rule.*;
   * 	import es.uam.sara.tfg.properties.*;
   * 	«IF rule.element==ElementJava.INTERFACE»
   * 		import es.uam.sara.tfg.properties.interfaces.*;
   * 	«ELSEIF rule.element==ElementJava.CLASS»
   * 		import es.uam.sara.tfg.properties.classes.*;
   * 	«ELSEIF rule.element==ElementJava.ENUM»
   * 		import es.uam.sara.tfg.properties.enumerations.*;
   * 	«ELSEIF rule.element==ElementJava.METHOD»
   * 		import es.uam.sara.tfg.properties.methods.*;
   * 	«ELSEIF rule.element==ElementJava.ATTRIBUTE»
   * 		import es.uam.sara.tfg.properties.attributes.*;
   * 	«ELSEIF rule.element==ElementJava.PACKAGE»
   * 		import es.uam.sara.tfg.properties.packages.*;
   * 	«ENDIF»
   * 	«IF rule.element!=ElementJava.PACKAGE»
   * 		import org.eclipse.jdt.core.dom.«t»;
   * 	«ENDIF»
   * 
   * 	//«IF rule.no»no«ENDIF» «rule.quantifier» «rule.element»
   * 	«IF rule.filter!=null»// whitch «IF rule.filter.no»no«ENDIF» «getTextProperty(rule.filter.filter)»«ENDIF»
   * 	//«IF rule.satisfy!=null» satisfy «getTextProperty(rule.satisfy)»«ENDIF»
   * 	public class Rule«i»Factory implements RuleFactory<«t»>{
   * 
   * 		public Rule<«t»> getRule (List<«t»> elements){
   * 
   * 				«IF rule.filter!=null»
   * 					Or<«t»> filter= new Filter<«t»>(«rule.filter.no»,elements);
   * 					«createAnds(rule, true)»
   * 				«ELSE»
   * 					Or<«t»> filter=null;
   * 				«ENDIF»
   * 				«IF rule.satisfy!=null»
   * 					Or<«t»> satisfy= new Or<«t»>(elements);
   * 					«createAnds(rule, false)»
   * 				«ELSE»
   * 					Or<«t»> satisfy=null;
   * 				«ENDIF»
   * 
   * 				return new Rule<«t»>(«rule.no», Quantifier.«rule.quantifier.literal.toUpperCase»,elements, filter, satisfy);
   * 		}
   * 
   * 	}'''
   * 
   * }
   * 
   * def CharSequence getTextProperty(Or or) {
   * 	'''
   * 		or(«FOR a : or.op» and:(«FOR s:a.op»«s.class.simpleName.replace("Impl", "")», «ENDFOR»)«ENDFOR»)
   * 	'''
   * }
   * 
   * def CharSequence createAnds(Rule r, boolean filter) {
   * 	var prop = null as Or
   * 	var cad = ""
   * 	if (filter) {
   * 		prop = r.filter.filter;
   * 		cad = "Filter"
   * 	} else {
   * 		prop = r.satisfy;
   * 	}
   * 	var t = getType(r.element)
   * 
   * 	'''
   * 		«var i=1»
   * 		«FOR a : prop.op»
   * 			And<«t»> and«cad»«(i)»= new And<«t»>(elements);
   * 			«FOR s:a.op»
   * 				«IF r.element ==  ElementJava.ATTRIBUTE»
   * 					«AttributesSatisfy.getPropertie(s as Attribute, cad+i)»
   * 				«ELSEIF r.element ==  ElementJava.METHOD»
   * 					«MethodsSatisfy.getPropertie(s as Method,cad+i)»
   * 				«ELSEIF r.element ==  ElementJava.CLASS»
   * 					«ClassesSatisfy.getPropertie(s as Class,cad+i)»
   * 				«ELSEIF r.element ==  ElementJava.INTERFACE»
   * 					«InterfaceSatisfy.getPropertie(s as Interface,cad+i)»
   * 				«ELSEIF r.element ==  ElementJava.ENUM»
   * 					«EnumSatisfy.getPropertie(s as Enumeration,cad+i)»
   * 				«ELSEIF r.element ==  ElementJava.PACKAGE»
   * 					«PackageSatisfy.getPropertie(s as Package,cad+i)»
   * 				«ENDIF»
   * 			«ENDFOR»
   * 			«IF filter»
   * 				filter.addAnd(and«cad»«(i++)»);
   * 			«ELSE»
   * 				satisfy.addAnd(and«cad»«(i++)»);
   * 			«ENDIF»
   * 		«ENDFOR»
   * 	'''
   * }
   */
  public CharSequence getType(final ElementJava e) {
    boolean _equals = Objects.equal(e, ElementJava.PACKAGE);
    if (_equals) {
      return "String";
    } else {
      boolean _equals_1 = Objects.equal(e, ElementJava.INTERFACE);
      if (_equals_1) {
        return "TypeDeclaration";
      } else {
        boolean _equals_2 = Objects.equal(e, ElementJava.CLASS);
        if (_equals_2) {
          return "TypeDeclaration";
        } else {
          boolean _equals_3 = Objects.equal(e, ElementJava.ENUM);
          if (_equals_3) {
            return "EnumDeclaration";
          } else {
            boolean _equals_4 = Objects.equal(e, ElementJava.METHOD);
            if (_equals_4) {
              return "MethodDeclaration";
            } else {
              return "FieldDeclaration";
            }
          }
        }
      }
    }
  }
}
