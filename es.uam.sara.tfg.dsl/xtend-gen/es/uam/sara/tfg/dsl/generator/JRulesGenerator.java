/**
 * generated by Xtext 2.10.0
 */
package es.uam.sara.tfg.dsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import es.uam.sara.tfg.ast.ReadFiles;
import es.uam.sara.tfg.dsl.generator.AttributesSatisfy;
import es.uam.sara.tfg.dsl.generator.ClassesSatisfy;
import es.uam.sara.tfg.dsl.generator.EnumSatisfy;
import es.uam.sara.tfg.dsl.generator.FileSatisfy;
import es.uam.sara.tfg.dsl.generator.InterfaceSatisfy;
import es.uam.sara.tfg.dsl.generator.MethodsSatisfy;
import es.uam.sara.tfg.dsl.generator.PackageSatisfy;
import java.util.ArrayList;
import java.util.List;
import javaRule.And;
import javaRule.Attribute;
import javaRule.Contains;
import javaRule.Element;
import javaRule.Enumeration;
import javaRule.File;
import javaRule.Interface;
import javaRule.Method;
import javaRule.Or;
import javaRule.PrimaryOp;
import javaRule.Property;
import javaRule.PropertyLiteral;
import javaRule.Quantifier;
import javaRule.Rule;
import javaRule.RuleSet;
import javaRule.Sentence;
import javaRule.Variable;
import javaRule.VariableSubtype;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspace;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.IPath;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionExtensions;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class JRulesGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Sentence> sentences = Iterables.<Sentence>filter(_iterable, Sentence.class);
    List<Sentence> _list = IterableExtensions.<Sentence>toList(sentences);
    CharSequence _RuleFactory = this.RuleFactory(_list);
    fsa.generateFile("RuleFactory.java", _RuleFactory);
    IWorkspace _workspace = ResourcesPlugin.getWorkspace();
    IWorkspaceRoot workspace = _workspace.getRoot();
    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
    Iterable<RuleSet> _filter = Iterables.<RuleSet>filter(_iterable_1, RuleSet.class);
    RuleSet ruleSet = ((RuleSet[])Conversions.unwrapArray(_filter, RuleSet.class))[0];
    ArrayList<IProject> projects = new ArrayList<IProject>();
    EList<String> _projectName = ruleSet.getProjectName();
    boolean _isEmpty = _projectName.isEmpty();
    if (_isEmpty) {
      IProject[] _projects = workspace.getProjects();
      CollectionExtensions.<IProject>addAll(projects, _projects);
    } else {
      EList<String> _projectName_1 = ruleSet.getProjectName();
      for (final String name : _projectName_1) {
        IProject _project = workspace.getProject(name);
        projects.add(_project);
      }
    }
    URI _uRI = resource.getURI();
    URI _uRI_1 = resource.getURI();
    List<String> _segmentsList = _uRI_1.segmentsList();
    int _indexOf = _segmentsList.indexOf("resource");
    int _plus = (_indexOf + 1);
    String thisProject = _uRI.segment(_plus);
    IProject thisProject1 = workspace.getProject(thisProject);
    IPath _location = thisProject1.getLocation();
    String _string = _location.toString();
    ReadFiles.cargaProyectos(projects, _string);
    CharSequence _main = this.main(projects, thisProject1);
    fsa.generateFile("Main.java", _main);
  }
  
  public CharSequence main(final List<IProject> projects, final IProject thisProject) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t\t");
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("import es.uam.sara.tfg.ast.*;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public class Main {");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("public static List<TypeVisitor> types= new ArrayList<TypeVisitor>(); ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("public static TypeVisitor actual= null; ");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("public static void main(String[] args)throws IOException{");
    _builder.newLine();
    _builder.append("\t \t");
    _builder.newLine();
    _builder.append("\t \t");
    _builder.append("List<Visitors> projects= new ArrayList<Visitors>();");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("List<File> roots= new ArrayList<File>();");
    _builder.newLine();
    _builder.append("\t ");
    _builder.newLine();
    {
      for(final IProject p : projects) {
        _builder.append("\t \t");
        IFolder src = p.getFolder("src");
        _builder.newLineIfNotEmpty();
        _builder.append("\t \t");
        _builder.append("roots.add(new File(\"");
        IPath _location = src.getLocation();
        _builder.append(_location, "\t \t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t \t");
        _builder.append("projects.add(new Visitors(\"");
        String _name = p.getName();
        _builder.append(_name, "\t \t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t \t");
        _builder.append("types.add(new TypeVisitor(\"");
        String _name_1 = p.getName();
        _builder.append(_name_1, "\t \t");
        _builder.append("\", \".\"));");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("\t\t\t \t");
    _builder.append("for (int i=0; i <roots.size(); i++){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("types.get(i).readObject();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("actual=types.get(i);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("File root=roots.get(i);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Visitors visit=projects.get(i);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ReadFiles.parseFiles(root, visit);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("RuleFactory rf= new RuleFactory(visit);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rf.getRules();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("rf.writeLog();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("actual=null;");
    _builder.newLine();
    _builder.append("\t\t\t \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("}");
    return _builder;
  }
  
  public CharSequence RuleFactory(final List<Sentence> sentences) {
    CharSequence _xblockexpression = null;
    {
      int i = 1;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.io.FileWriter;");
      _builder.newLine();
      _builder.append("import java.io.PrintWriter;");
      _builder.newLine();
      _builder.append("import java.util.*;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.ast.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.elements.type.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.sentence.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.all.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.attributes.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.classes.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.interfaces.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.methods.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.type.*;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public class RuleFactory {");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("private List <Sentence<?>> sentence=null;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("private Visitors visitors;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public RuleFactory (Visitors vis){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("this.visitors=vis;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public List<Sentence<?>> getRules(){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (sentence!=null){");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return sentence;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}else{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("sentence= new ArrayList<Sentence<?>>();");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("//Crear");
      _builder.newLine();
      {
        for(final Sentence s : sentences) {
          {
            if ((s instanceof Variable)) {
              _builder.append("\t\t");
              Variable v = ((Variable) s);
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              String _genetateVariable = JRulesGenerator.genetateVariable(v);
              _builder.append(_genetateVariable, "\t\t");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("sentence.add(");
              String _name = ((Variable)s).getName();
              _builder.append(_name, "\t\t");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("Sentence.allVariables.put(\"");
              String _name_1 = v.getName();
              _builder.append(_name_1, "\t\t");
              _builder.append("\", ");
              String _name_2 = v.getName();
              _builder.append(_name_2, "\t\t");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t\t");
              Rule r = ((Rule) s);
              _builder.newLineIfNotEmpty();
              {
                EObject _eContainer = r.eContainer();
                if ((_eContainer instanceof RuleSet)) {
                  _builder.append("\t\t");
                  r.setName(("rule" + Integer.valueOf(i)));
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  int _plusPlus = i++;
                  String _plus = ("" + Integer.valueOf(_plusPlus));
                  String _genetateRule = JRulesGenerator.genetateRule(r, _plus);
                  _builder.append(_genetateRule, "\t\t");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.append("sentence.add(");
                  String _name_3 = r.getName();
                  _builder.append(_name_3, "\t\t");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
      _builder.append("\t\t");
      List<Sentence> _primarySencence = this.getPrimarySencence(sentences);
      CharSequence _generateDependences = this.generateDependences(_primarySencence);
      _builder.append(_generateDependences, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("return sentence;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void writeLog(){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("FileWriter fichero = null;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("PrintWriter pw = null;");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("try{");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("fichero = new FileWriter(\"outs/\"+visitors.getProjectName()+\".txt\");");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("pw = new PrintWriter(fichero);");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("for (Sentence<?> r: sentence){");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("System.out.println(r.log());");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("pw.println(r.log());");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t ");
      _builder.append("} catch (Exception e) {");
      _builder.newLine();
      _builder.append("\t\t\t\t      ");
      _builder.append("e.printStackTrace();");
      _builder.newLine();
      _builder.append("\t\t\t\t  ");
      _builder.append("} finally {");
      _builder.newLine();
      _builder.append("\t\t\t\t     ");
      _builder.append("try {");
      _builder.newLine();
      _builder.append("\t\t\t\t      ");
      _builder.append("if (null != fichero)");
      _builder.newLine();
      _builder.append("\t\t\t\t         ");
      _builder.append("fichero.close();");
      _builder.newLine();
      _builder.append("\t\t\t\t     ");
      _builder.append("} catch (Exception e2) {");
      _builder.newLine();
      _builder.append("\t\t\t\t        ");
      _builder.append("e2.printStackTrace();");
      _builder.newLine();
      _builder.append("\t\t\t\t     ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t  ");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t\t          ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public List<Sentence> getPrimarySencence(final List<Sentence> sentences) {
    ArrayList<Sentence> ret = new ArrayList<Sentence>();
    for (final Sentence s : sentences) {
      EObject _eContainer = s.eContainer();
      if ((_eContainer instanceof RuleSet)) {
        ret.add(s);
      }
    }
    return ret;
  }
  
  public CharSequence generateDependences(final List<Sentence> s) {
    String c = "";
    for (final Sentence v : s) {
      {
        TreeIterator<EObject> _eAllContents = v.eAllContents();
        Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_eAllContents);
        Iterable<Contains> _filter = Iterables.<Contains>filter(_iterable, Contains.class);
        List<Contains> contains = IterableExtensions.<Contains>toList(_filter);
        ArrayList<Sentence> subsentences = new ArrayList<Sentence>();
        for (final Contains cs : contains) {
          Rule _rule = cs.getRule();
          subsentences.add(_rule);
        }
        String _c = c;
        StringConcatenation _builder = new StringConcatenation();
        CharSequence _generateDependences = this.generateDependences(subsentences);
        _builder.append(_generateDependences, "");
        _builder.newLineIfNotEmpty();
        {
          EList<Variable> _in = v.getIn();
          for(final Variable in : _in) {
            _builder.append(" @SuppressWarnings(\"unchecked\")List<");
            Element _element = v.getElement();
            String _type = JRulesGenerator.getType(_element);
            _builder.append(_type, "");
            _builder.append("> list");
            String _name = v.getName();
            _builder.append(_name, "");
            String _name_1 = in.getName();
            _builder.append(_name_1, "");
            _builder.append("=(List<");
            Element _element_1 = v.getElement();
            String _type_1 = JRulesGenerator.getType(_element_1);
            _builder.append(_type_1, "");
            _builder.append(">) Sentence.allVariables.get(\"");
            String _name_2 = in.getName();
            _builder.append(_name_2, "");
            _builder.append("\").get();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            String _name_3 = v.getName();
            _builder.append(_name_3, "\t\t");
            _builder.append(".setIn(list");
            String _name_4 = v.getName();
            _builder.append(_name_4, "\t\t");
            String _name_5 = in.getName();
            _builder.append(_name_5, "\t\t");
            _builder.append(", \"");
            String _name_6 = in.getName();
            _builder.append(_name_6, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        int k = 0;
        _builder.newLineIfNotEmpty();
        {
          Variable _from = v.getFrom();
          boolean _notEquals = (!Objects.equal(_from, null));
          if (_notEquals) {
            _builder.append("\t");
            _builder.append("for (");
            Variable _from_1 = v.getFrom();
            Element _element_2 = _from_1.getElement();
            String _type_2 = JRulesGenerator.getType(_element_2);
            _builder.append(_type_2, "\t");
            _builder.append(" us");
            _builder.append(k, "\t");
            _builder.append(": ");
            Variable _from_2 = v.getFrom();
            String _name_7 = _from_2.getName();
            _builder.append(_name_7, "\t");
            _builder.append(".get()){");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _name_8 = v.getName();
            _builder.append(_name_8, "\t\t");
            _builder.append(".setFrom(us");
            _builder.append(k, "\t\t");
            _builder.append(".");
            Element _element_3 = v.getElement();
            String _analice = JRulesGenerator.getAnalice(_element_3);
            _builder.append(_analice, "\t\t");
            _builder.append(", \"");
            Variable _from_3 = v.getFrom();
            String _name_9 = _from_3.getName();
            _builder.append(_name_9, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _name_10 = v.getName();
            _builder.append(_name_10, "\t\t");
            _builder.append(".setUsing(\"");
            Variable _from_4 = v.getFrom();
            String _name_11 = _from_4.getName();
            _builder.append(_name_11, "\t\t");
            _builder.append("\",us");
            int _plusPlus = k++;
            _builder.append(_plusPlus, "\t\t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.newLine();
        {
          EList<VariableSubtype> _using = v.getUsing();
          for(final VariableSubtype us : _using) {
            {
              Element _subtype = us.getSubtype();
              boolean _equals = Objects.equal(_subtype, Element.NULL);
              if (_equals) {
                _builder.append("\t");
                _builder.append("for (");
                Variable _variable = us.getVariable();
                Element _element_4 = _variable.getElement();
                String _type_3 = JRulesGenerator.getType(_element_4);
                _builder.append(_type_3, "\t");
                _builder.append(" us");
                _builder.append(k, "\t");
                _builder.append(": ");
                Variable _variable_1 = us.getVariable();
                String _name_12 = _variable_1.getName();
                _builder.append(_name_12, "\t");
                _builder.append(".get()){");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                String _name_13 = v.getName();
                _builder.append(_name_13, "\t\t");
                _builder.append(".setUsing(\"");
                Variable _variable_2 = us.getVariable();
                String _name_14 = _variable_2.getName();
                _builder.append(_name_14, "\t\t");
                _builder.append("\",us");
                int _plusPlus_1 = k++;
                _builder.append(_plusPlus_1, "\t\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t");
                _builder.append("for (");
                Element _subtype_1 = us.getSubtype();
                String _type_4 = JRulesGenerator.getType(_subtype_1);
                _builder.append(_type_4, "\t");
                _builder.append(" us");
                _builder.append(k, "\t");
                _builder.append(": us");
                Variable _variable_3 = us.getVariable();
                String _name_15 = _variable_3.getName();
                int _k = this.getK(v, _name_15);
                _builder.append(_k, "\t");
                _builder.append(".");
                Element _subtype_2 = us.getSubtype();
                String _analice_1 = JRulesGenerator.getAnalice(_subtype_2);
                _builder.append(_analice_1, "\t");
                _builder.append("){");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                String _name_16 = v.getName();
                _builder.append(_name_16, "\t");
                _builder.append(".setUsing(\"");
                Variable _variable_4 = us.getVariable();
                String _name_17 = _variable_4.getName();
                _builder.append(_name_17, "\t");
                Element _subtype_3 = us.getSubtype();
                String _type_5 = JRulesGenerator.getType(_subtype_3);
                _builder.append(_type_5, "\t");
                _builder.append("\",us");
                int _plusPlus_2 = k++;
                _builder.append(_plusPlus_2, "\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          EObject _eContainer = v.eContainer();
          if ((_eContainer instanceof RuleSet)) {
            _builder.append("\t");
            String _name_18 = v.getName();
            _builder.append(_name_18, "\t");
            _builder.append(".check();");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EList<VariableSubtype> _using_1 = v.getUsing();
          for(final VariableSubtype us_1 : _using_1) {
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        {
          Variable _from_5 = v.getFrom();
          boolean _notEquals_1 = (!Objects.equal(_from_5, null));
          if (_notEquals_1) {
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.newLine();
        c = (_c + _builder);
      }
    }
    return c;
  }
  
  public int getK(final Sentence s, final String name) {
    int i = 0;
    Variable _from = s.getFrom();
    boolean _notEquals = (!Objects.equal(_from, null));
    if (_notEquals) {
      Variable _from_1 = s.getFrom();
      String _name = _from_1.getName();
      boolean _equals = _name.equals(name);
      if (_equals) {
        return i;
      }
      i++;
    }
    EList<VariableSubtype> us = s.getUsing();
    for (final VariableSubtype vs : us) {
      {
        Variable _variable = vs.getVariable();
        String _name_1 = _variable.getName();
        boolean _equals_1 = _name_1.equals(name);
        if (_equals_1) {
          return i;
        }
        i++;
      }
    }
    return (-1);
  }
  
  public static String genetateVariable(final Variable v) {
    StringConcatenation _builder = new StringConcatenation();
    String name = v.getName();
    _builder.newLineIfNotEmpty();
    _builder.append("//v: ");
    String _string = v.toString();
    _builder.append(_string, "");
    _builder.newLineIfNotEmpty();
    Element _element = v.getElement();
    String type = JRulesGenerator.getType(_element);
    _builder.newLineIfNotEmpty();
    Element _element_1 = v.getElement();
    String analize = JRulesGenerator.getAnalice(_element_1);
    _builder.newLineIfNotEmpty();
    Or _satisfy = v.getSatisfy();
    Element _element_2 = v.getElement();
    CharSequence _or = JRulesGenerator.getOr(_satisfy, name, _element_2);
    _builder.append(_or, "");
    _builder.newLineIfNotEmpty();
    _builder.append("Variable<");
    _builder.append(type, "");
    _builder.append("> ");
    _builder.append(name, "");
    _builder.append("=new Variable<");
    _builder.append(type, "");
    _builder.append("> ( \"");
    Element _element_3 = v.getElement();
    _builder.append(_element_3, "");
    _builder.append("\",visitors.");
    _builder.append(analize, "");
    _builder.append(", or");
    _builder.append(name, "");
    _builder.append(", \"");
    _builder.append(name, "");
    _builder.append("\");\t");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public static String getAnalice(final Element e) {
    boolean _equals = Objects.equal(e, Element.CLASS);
    if (_equals) {
      String _string = e.toString();
      String _firstUpper = StringExtensions.toFirstUpper(_string);
      String _plus = ("get" + _firstUpper);
      return (_plus + "es()");
    } else {
      String _string_1 = e.toString();
      String _firstUpper_1 = StringExtensions.toFirstUpper(_string_1);
      String _plus_1 = ("get" + _firstUpper_1);
      return (_plus_1 + "s()");
    }
  }
  
  public static String genetateRule(final Rule r, final String i) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//r");
    _builder.append(i, "");
    _builder.append(": ");
    String _string = r.toString();
    _builder.append(_string, "");
    _builder.newLineIfNotEmpty();
    Element _element = r.getElement();
    String type = JRulesGenerator.getType(_element);
    _builder.newLineIfNotEmpty();
    Element _element_1 = r.getElement();
    String analize = JRulesGenerator.getAnalice(_element_1);
    _builder.newLineIfNotEmpty();
    Or _filter = r.getFilter();
    Element _element_2 = r.getElement();
    CharSequence _or = JRulesGenerator.getOr(_filter, ("Filter" + i), _element_2);
    _builder.append(_or, "");
    _builder.newLineIfNotEmpty();
    Or _satisfy = r.getSatisfy();
    Element _element_3 = r.getElement();
    CharSequence _or_1 = JRulesGenerator.getOr(_satisfy, i, _element_3);
    _builder.append(_or_1, "");
    _builder.newLineIfNotEmpty();
    _builder.append("Rule<");
    _builder.append(type, "");
    _builder.append("> ");
    String _name = r.getName();
    _builder.append(_name, "");
    _builder.append("=new Rule<");
    _builder.append(type, "");
    _builder.append("> (");
    boolean _isNo = r.isNo();
    _builder.append(_isNo, "");
    _builder.append(", Rule.Quantifier.");
    Quantifier _quantifier = r.getQuantifier();
    String _literal = _quantifier.getLiteral();
    String _upperCase = _literal.toUpperCase();
    _builder.append(_upperCase, "");
    _builder.append(",visitors.");
    _builder.append(analize, "");
    _builder.append(",orFilter");
    _builder.append(i, "");
    _builder.append(", or");
    _builder.append(i, "");
    _builder.append(", \"");
    Element _element_4 = r.getElement();
    _builder.append(_element_4, "");
    _builder.append("\");\t");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public static CharSequence getOr(final Or or, final String i, final Element element) {
    StringConcatenation _builder = new StringConcatenation();
    String type = JRulesGenerator.getType(element);
    _builder.newLineIfNotEmpty();
    {
      boolean _notEquals = (!Objects.equal(or, null));
      if (_notEquals) {
        _builder.append("Or<");
        _builder.append(type, "");
        _builder.append("> or");
        _builder.append(i, "");
        _builder.append("= new Or<");
        _builder.append(type, "");
        _builder.append(">();");
        _builder.newLineIfNotEmpty();
        int j = 1;
        _builder.newLineIfNotEmpty();
        {
          EList<And> _op = or.getOp();
          for(final And a : _op) {
            CharSequence _and = JRulesGenerator.getAnd(a, (i + Integer.valueOf(j)), element);
            _builder.append(_and, "");
            _builder.newLineIfNotEmpty();
            _builder.append("or");
            _builder.append(i, "");
            _builder.append(".addAnd(and");
            _builder.append(i, "");
            int _plusPlus = j++;
            _builder.append(_plusPlus, "");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
          }
        }
      } else {
        _builder.append("Or<");
        _builder.append(type, "");
        _builder.append("> or");
        _builder.append(i, "");
        _builder.append("=\tnull;");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("\t\t");
      }
    }
    return _builder;
  }
  
  public static CharSequence getAnd(final And a, final String i, final Element element) {
    StringConcatenation _builder = new StringConcatenation();
    int j = 1;
    _builder.newLineIfNotEmpty();
    String type = JRulesGenerator.getType(element);
    _builder.newLineIfNotEmpty();
    _builder.append("And<");
    _builder.append(type, "");
    _builder.append("> and");
    _builder.append(i, "");
    _builder.append(" = new And<");
    _builder.append(type, "");
    _builder.append(">();");
    _builder.newLineIfNotEmpty();
    {
      EList<PrimaryOp> _op = a.getOp();
      for(final PrimaryOp s : _op) {
        {
          if ((s instanceof Or)) {
            CharSequence _or = JRulesGenerator.getOr(((Or)s), (i + Integer.valueOf(j)), element);
            _builder.append(_or, "");
            _builder.newLineIfNotEmpty();
            _builder.append("and");
            _builder.append(i, "");
            _builder.append(".addPropertie(or");
            _builder.append(i, "");
            int _plusPlus = j++;
            _builder.append(_plusPlus, "");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          } else {
            if ((s instanceof PropertyLiteral)) {
              CharSequence _satisfy = JRulesGenerator.getSatisfy(((PropertyLiteral) s), element, (i + Integer.valueOf(j)));
              _builder.append(_satisfy, "");
              _builder.newLineIfNotEmpty();
              _builder.append("and");
              _builder.append(i, "");
              _builder.append(".addPropertie(p");
              _builder.append(i, "");
              int _plusPlus_1 = j++;
              _builder.append(_plusPlus_1, "");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public static CharSequence getSatisfy(final PropertyLiteral s, final Element e, final String sufix) {
    boolean _equals = Objects.equal(e, Element.PACKAGE);
    if (_equals) {
      Property _property = s.getProperty();
      return PackageSatisfy.getPropertie(((javaRule.Package) _property), sufix);
    } else {
      boolean _equals_1 = Objects.equal(e, Element.INTERFACE);
      if (_equals_1) {
        Property _property_1 = s.getProperty();
        return InterfaceSatisfy.getPropertie(((Interface) _property_1), sufix);
      } else {
        boolean _equals_2 = Objects.equal(e, Element.CLASS);
        if (_equals_2) {
          Property _property_2 = s.getProperty();
          return ClassesSatisfy.getPropertie(((javaRule.Class) _property_2), sufix);
        } else {
          boolean _equals_3 = Objects.equal(e, Element.ENUMERATION);
          if (_equals_3) {
            Property _property_3 = s.getProperty();
            return EnumSatisfy.getPropertie(((Enumeration) _property_3), sufix);
          } else {
            boolean _equals_4 = Objects.equal(e, Element.METHOD);
            if (_equals_4) {
              Property _property_4 = s.getProperty();
              return MethodsSatisfy.getPropertie(((Method) _property_4), sufix);
            } else {
              boolean _equals_5 = Objects.equal(e, Element.FILE);
              if (_equals_5) {
                Property _property_5 = s.getProperty();
                return FileSatisfy.getPropertie(((File) _property_5), sufix);
              } else {
                Property _property_6 = s.getProperty();
                return AttributesSatisfy.getPropertie(((Attribute) _property_6), sufix);
              }
            }
          }
        }
      }
    }
  }
  
  public static String getType(final Element e) {
    String _literal = e.getLiteral();
    String _lowerCase = _literal.toLowerCase();
    String _firstUpper = StringExtensions.toFirstUpper(_lowerCase);
    return ("M" + _firstUpper);
  }
}
