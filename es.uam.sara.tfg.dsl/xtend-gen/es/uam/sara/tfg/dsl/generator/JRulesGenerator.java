/**
 * generated by Xtext 2.10.0
 */
package es.uam.sara.tfg.dsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import es.uam.sara.tfg.dsl.generator.AttributesSatisfy;
import es.uam.sara.tfg.dsl.generator.ClassesSatisfy;
import es.uam.sara.tfg.dsl.generator.EnumSatisfy;
import es.uam.sara.tfg.dsl.generator.InterfaceSatisfy;
import es.uam.sara.tfg.dsl.generator.MethodsSatisfy;
import es.uam.sara.tfg.dsl.generator.PackageSatisfy;
import javaRule.And;
import javaRule.Attribute;
import javaRule.ElementJava;
import javaRule.Enumeration;
import javaRule.Filter;
import javaRule.Interface;
import javaRule.Method;
import javaRule.Or;
import javaRule.Quantifier;
import javaRule.Rule;
import javaRule.RuleSet;
import javaRule.Satisfy;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class JRulesGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Rule> _filter = Iterables.<Rule>filter(_iterable, Rule.class);
    CharSequence _RuleFactory = this.RuleFactory(_filter);
    fsa.generateFile("RuleFactory.java", _RuleFactory);
    CharSequence _main = this.main();
    fsa.generateFile("Main.java", _main);
  }
  
  public CharSequence main() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import es.uam.sara.tfg.rule.Rule;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Main {");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("RuleFactory ruleFactory=new RuleFactory();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List <Rule<?>> rules=ruleFactory.getRules();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Rule<?> r: rules){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(r);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence RuleFactory(final Iterable<Rule> rules) {
    CharSequence _xblockexpression = null;
    {
      int i = 1;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.rule.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.rule.Rule.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.interfaces.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.classes.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.enumerations.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.methods.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.attributes.*;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.packages.*;");
      _builder.newLine();
      _builder.append("import org.eclipse.jdt.core.dom.TypeDeclaration;");
      _builder.newLine();
      _builder.append("import org.eclipse.jdt.core.dom.EnumDeclaration;");
      _builder.newLine();
      _builder.append("import org.eclipse.jdt.core.dom.MethodDeclaration;");
      _builder.newLine();
      _builder.append("import org.eclipse.jdt.core.dom.FieldDeclaration;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.ast.Visitors;");
      _builder.newLine();
      _builder.append("import es.uam.sara.tfg.properties.Properties;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public class RuleFactory {");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("private List <Rule<?>> rules=null;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public List<Rule<?>> getRules(){");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("if (rules!=null){");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("return rules;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}else{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("rules= new ArrayList<Rule<?>>();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("List<String> packages=Visitors.getPackages();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("List<TypeDeclaration> classes=Visitors.getClasses();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("List<TypeDeclaration> interfaces=Visitors.getInterfaces();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("List<EnumDeclaration> enums=Visitors.getEnumerations();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("List<MethodDeclaration> methods=Visitors.getMethods();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("List<FieldDeclaration> attributes=Visitors.getAttributes();");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.newLine();
      {
        for(final Rule r : rules) {
          {
            EObject _eContainer = r.eContainer();
            if ((_eContainer instanceof RuleSet)) {
              _builder.append("\t\t");
              _builder.newLine();
              _builder.append("\t\t");
              _builder.append("\t");
              String _genetateRule = JRulesGenerator.genetateRule(r, ("" + Integer.valueOf(i)));
              _builder.append(_genetateRule, "\t\t\t");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("\t");
              _builder.append("rules.add(r");
              int _plusPlus = i++;
              _builder.append(_plusPlus, "\t\t\t");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("\t");
              _builder.newLine();
            }
          }
        }
      }
      _builder.append("\t\t");
      _builder.append("return rules;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public static String genetateRule(final Rule r, final String i) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//r");
    _builder.append(i, "");
    _builder.append(" ");
    String _string = r.toString();
    _builder.append(_string, "");
    _builder.newLineIfNotEmpty();
    ElementJava _element = r.getElement();
    CharSequence type = JRulesGenerator.getType(_element);
    _builder.newLineIfNotEmpty();
    ElementJava _element_1 = r.getElement();
    String analize = JRulesGenerator.getAnalize(_element_1);
    _builder.newLineIfNotEmpty();
    Filter _filter = r.getFilter();
    ElementJava _element_2 = r.getElement();
    CharSequence _filter_1 = JRulesGenerator.getFilter(_filter, i, _element_2);
    _builder.append(_filter_1, "");
    _builder.newLineIfNotEmpty();
    Or _satisfy = r.getSatisfy();
    ElementJava _element_3 = r.getElement();
    CharSequence _or = JRulesGenerator.getOr(_satisfy, i, _element_3);
    _builder.append(_or, "");
    _builder.newLineIfNotEmpty();
    _builder.append("Rule<");
    _builder.append(type, "");
    _builder.append("> r");
    _builder.append(i, "");
    _builder.append("=new Rule<");
    _builder.append(type, "");
    _builder.append("> (");
    boolean _isNo = r.isNo();
    _builder.append(_isNo, "");
    _builder.append(", Quantifier.");
    Quantifier _quantifier = r.getQuantifier();
    String _literal = _quantifier.getLiteral();
    String _upperCase = _literal.toUpperCase();
    _builder.append(_upperCase, "");
    _builder.append(",");
    _builder.append(analize, "");
    _builder.append(",filter");
    _builder.append(i, "");
    _builder.append(", or");
    _builder.append(i, "");
    _builder.append(", \"");
    ElementJava _element_4 = r.getElement();
    _builder.append(_element_4, "");
    _builder.append("\");\t");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public static CharSequence getFilter(final Filter filter, final String i, final ElementJava element) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence type = JRulesGenerator.getType(element);
    _builder.newLineIfNotEmpty();
    {
      boolean _notEquals = (!Objects.equal(filter, null));
      if (_notEquals) {
        _builder.append("Filter<");
        _builder.append(type, "");
        _builder.append("> filter");
        _builder.append(i, "");
        _builder.append("= new Filter<");
        _builder.append(type, "");
        _builder.append(">(");
        boolean _isNo = filter.isNo();
        _builder.append(_isNo, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        int j = 1;
        _builder.newLineIfNotEmpty();
        {
          Or _filter = filter.getFilter();
          EList<And> _op = _filter.getOp();
          for(final And a : _op) {
            CharSequence _and = JRulesGenerator.getAnd(a, (("Filter" + i) + Integer.valueOf(j)), element);
            _builder.append(_and, "");
            _builder.newLineIfNotEmpty();
            _builder.append("filter");
            _builder.append(i, "");
            _builder.append(".addAnd(andFilter");
            _builder.append(i, "");
            int _plusPlus = j++;
            _builder.append(_plusPlus, "");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
          }
        }
      } else {
        _builder.append("Filter<");
        _builder.append(type, "");
        _builder.append("> filter");
        _builder.append(i, "");
        _builder.append("=\tnull;");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("\t\t");
      }
    }
    return _builder;
  }
  
  public static CharSequence getOr(final Or or, final String i, final ElementJava element) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence type = JRulesGenerator.getType(element);
    _builder.newLineIfNotEmpty();
    {
      boolean _notEquals = (!Objects.equal(or, null));
      if (_notEquals) {
        _builder.append("Or<");
        _builder.append(type, "");
        _builder.append("> or");
        _builder.append(i, "");
        _builder.append("= new Or<");
        _builder.append(type, "");
        _builder.append(">();");
        _builder.newLineIfNotEmpty();
        int j = 1;
        _builder.newLineIfNotEmpty();
        {
          EList<And> _op = or.getOp();
          for(final And a : _op) {
            CharSequence _and = JRulesGenerator.getAnd(a, (i + Integer.valueOf(j)), element);
            _builder.append(_and, "");
            _builder.newLineIfNotEmpty();
            _builder.append("or");
            _builder.append(i, "");
            _builder.append(".addAnd(and");
            _builder.append(i, "");
            int _plusPlus = j++;
            _builder.append(_plusPlus, "");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
          }
        }
      } else {
        _builder.append("Or<");
        _builder.append(type, "");
        _builder.append("> or");
        _builder.append(i, "");
        _builder.append("=\tnull;");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("\t\t");
      }
    }
    return _builder;
  }
  
  public static CharSequence getAnd(final And a, final String i, final ElementJava element) {
    StringConcatenation _builder = new StringConcatenation();
    int j = 1;
    _builder.newLineIfNotEmpty();
    CharSequence type = JRulesGenerator.getType(element);
    _builder.newLineIfNotEmpty();
    _builder.append("And<");
    _builder.append(type, "");
    _builder.append("> and");
    _builder.append(i, "");
    _builder.append(" = new And<");
    _builder.append(type, "");
    _builder.append(">();");
    _builder.newLineIfNotEmpty();
    {
      EList<Satisfy> _op = a.getOp();
      for(final Satisfy s : _op) {
        CharSequence _satisfy = JRulesGenerator.getSatisfy(s, element, (i + Integer.valueOf(j)));
        _builder.append(_satisfy, "");
        _builder.newLineIfNotEmpty();
        _builder.append("and");
        _builder.append(i, "");
        _builder.append(".addPropertie(p");
        _builder.append(i, "");
        int _plusPlus = j++;
        _builder.append(_plusPlus, "");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public static CharSequence getSatisfy(final Satisfy s, final ElementJava e, final String sufix) {
    boolean _equals = Objects.equal(e, ElementJava.PACKAGE);
    if (_equals) {
      return PackageSatisfy.getPropertie(((javaRule.Package) s), sufix);
    } else {
      boolean _equals_1 = Objects.equal(e, ElementJava.INTERFACE);
      if (_equals_1) {
        return InterfaceSatisfy.getPropertie(((Interface) s), sufix);
      } else {
        boolean _equals_2 = Objects.equal(e, ElementJava.CLASS);
        if (_equals_2) {
          return ClassesSatisfy.getPropertie(((javaRule.Class) s), sufix);
        } else {
          boolean _equals_3 = Objects.equal(e, ElementJava.ENUM);
          if (_equals_3) {
            return EnumSatisfy.getPropertie(((Enumeration) s), sufix);
          } else {
            boolean _equals_4 = Objects.equal(e, ElementJava.METHOD);
            if (_equals_4) {
              return MethodsSatisfy.getPropertie(((Method) s), sufix);
            } else {
              return AttributesSatisfy.getPropertie(((Attribute) s), sufix);
            }
          }
        }
      }
    }
  }
  
  public static CharSequence getType(final ElementJava e) {
    boolean _equals = Objects.equal(e, ElementJava.PACKAGE);
    if (_equals) {
      return "String";
    } else {
      boolean _equals_1 = Objects.equal(e, ElementJava.INTERFACE);
      if (_equals_1) {
        return "TypeDeclaration";
      } else {
        boolean _equals_2 = Objects.equal(e, ElementJava.CLASS);
        if (_equals_2) {
          return "TypeDeclaration";
        } else {
          boolean _equals_3 = Objects.equal(e, ElementJava.ENUM);
          if (_equals_3) {
            return "EnumDeclaration";
          } else {
            boolean _equals_4 = Objects.equal(e, ElementJava.METHOD);
            if (_equals_4) {
              return "MethodDeclaration";
            } else {
              return "FieldDeclaration";
            }
          }
        }
      }
    }
  }
  
  public static String getAnalize(final ElementJava e) {
    boolean _equals = Objects.equal(e, ElementJava.PACKAGE);
    if (_equals) {
      return "packages";
    } else {
      boolean _equals_1 = Objects.equal(e, ElementJava.INTERFACE);
      if (_equals_1) {
        return "interfaces";
      } else {
        boolean _equals_2 = Objects.equal(e, ElementJava.CLASS);
        if (_equals_2) {
          return "classes";
        } else {
          boolean _equals_3 = Objects.equal(e, ElementJava.ENUM);
          if (_equals_3) {
            return "enums";
          } else {
            boolean _equals_4 = Objects.equal(e, ElementJava.METHOD);
            if (_equals_4) {
              return "methods";
            } else {
              return "attributes";
            }
          }
        }
      }
    }
  }
}
