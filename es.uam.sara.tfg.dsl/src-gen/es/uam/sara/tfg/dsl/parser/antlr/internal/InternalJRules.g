/*
 * generated by Xtext 2.10.0
 */
grammar InternalJRules;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package es.uam.sara.tfg.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package es.uam.sara.tfg.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import es.uam.sara.tfg.dsl.services.JRulesGrammarAccess;

}

@parser::members {

 	private JRulesGrammarAccess grammarAccess;

    public InternalJRulesParser(TokenStream input, JRulesGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RuleSet";
   	}

   	@Override
   	protected JRulesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRuleSet
entryRuleRuleSet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleSetRule()); }
	iv_ruleRuleSet=ruleRuleSet
	{ $current=$iv_ruleRuleSet.current; }
	EOF;

// Rule RuleSet
ruleRuleSet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ProjectName:'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleSetAccess().getProjectNameKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleSetAccess().getProjectNameEStringParserRuleCall_1_0());
				}
				lv_ProjectName_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleSetRule());
					}
					set(
						$current,
						"ProjectName",
						lv_ProjectName_1_0,
						"es.uam.sara.tfg.dsl.JRules.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleSetAccess().getRulesRuleParserRuleCall_2_0());
				}
				lv_rules_2_0=ruleRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleSetRule());
					}
					add(
						$current,
						"rules",
						lv_rules_2_0,
						"es.uam.sara.tfg.dsl.JRules.Rule");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getRuleSetAccess().getSemicolonKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleSetAccess().getRulesRuleParserRuleCall_4_0_0());
					}
					lv_rules_4_0=ruleRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleSetRule());
						}
						add(
							$current,
							"rules",
							lv_rules_4_0,
							"es.uam.sara.tfg.dsl.JRules.Rule");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getRuleSetAccess().getSemicolonKeyword_4_1());
			}
		)*
	)
;

// Entry rule entryRuleSatisfy
entryRuleSatisfy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSatisfyRule()); }
	iv_ruleSatisfy=ruleSatisfy
	{ $current=$iv_ruleSatisfy.current; }
	EOF;

// Rule Satisfy
ruleSatisfy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getIsImplementedParserRuleCall_0());
		}
		this_isImplemented_0=ruleisImplemented
		{
			$current = $this_isImplemented_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getIsInheritorParserRuleCall_1());
		}
		this_IsInheritor_1=ruleIsInheritor
		{
			$current = $this_IsInheritor_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getImplementsParserRuleCall_2());
		}
		this_Implements_2=ruleImplements
		{
			$current = $this_Implements_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getIsExtendedParserRuleCall_3());
		}
		this_IsExtended_3=ruleIsExtended
		{
			$current = $this_IsExtended_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getParameterParserRuleCall_4());
		}
		this_Parameter_4=ruleParameter
		{
			$current = $this_Parameter_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getConstructorParserRuleCall_5());
		}
		this_Constructor_5=ruleConstructor
		{
			$current = $this_Constructor_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getReturnParserRuleCall_6());
		}
		this_Return_6=ruleReturn
		{
			$current = $this_Return_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getAttributeTypeParserRuleCall_7());
		}
		this_AttributeType_7=ruleAttributeType
		{
			$current = $this_AttributeType_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getInitializeParserRuleCall_8());
		}
		this_Initialize_8=ruleInitialize
		{
			$current = $this_Initialize_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getEmptyParserRuleCall_9());
		}
		this_Empty_9=ruleEmpty
		{
			$current = $this_Empty_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getNameOperationParserRuleCall_10());
		}
		this_NameOperation_10=ruleNameOperation
		{
			$current = $this_NameOperation_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getNameTypeParserRuleCall_11());
		}
		this_NameType_11=ruleNameType
		{
			$current = $this_NameType_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getJavaDocParserRuleCall_12());
		}
		this_JavaDoc_12=ruleJavaDoc
		{
			$current = $this_JavaDoc_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getContainsParserRuleCall_13());
		}
		this_Contains_13=ruleContains
		{
			$current = $this_Contains_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSatisfyAccess().getModifiersParserRuleCall_14());
		}
		this_Modifiers_14=ruleModifiers
		{
			$current = $this_Modifiers_14.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_no_0_0='no'
				{
					newLeafNode(lv_no_0_0, grammarAccess.getRuleAccess().getNoNoKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleRule());
					}
					setWithLastConsumed($current, "no", true, "no");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getQuantifierQuantifierEnumRuleCall_1_0());
				}
				lv_quantifier_1_0=ruleQuantifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"quantifier",
						lv_quantifier_1_0,
						"es.uam.sara.tfg.dsl.JRules.Quantifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getElementElementJavaEnumRuleCall_2_0());
				}
				lv_element_2_0=ruleElementJava
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"element",
						lv_element_2_0,
						"es.uam.sara.tfg.dsl.JRules.ElementJava");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='which'
			{
				newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getWhichKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleAccess().getFilterFilterParserRuleCall_3_1_0());
					}
					lv_filter_4_0=ruleFilter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleRule());
						}
						set(
							$current,
							"filter",
							lv_filter_4_0,
							"es.uam.sara.tfg.dsl.JRules.Filter");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='satisfy'
			{
				newLeafNode(otherlv_5, grammarAccess.getRuleAccess().getSatisfyKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleAccess().getSatisfyOrParserRuleCall_4_1_0());
					}
					lv_satisfy_6_0=ruleOr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleRule());
						}
						set(
							$current,
							"satisfy",
							lv_satisfy_6_0,
							"es.uam.sara.tfg.dsl.JRules.Or");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleFilter
entryRuleFilter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFilterRule()); }
	iv_ruleFilter=ruleFilter
	{ $current=$iv_ruleFilter.current; }
	EOF;

// Rule Filter
ruleFilter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_no_0_0='no'
				{
					newLeafNode(lv_no_0_0, grammarAccess.getFilterAccess().getNoNoKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFilterRule());
					}
					setWithLastConsumed($current, "no", true, "no");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFilterAccess().getFilterOrParserRuleCall_1_0());
				}
				lv_filter_1_0=ruleOr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFilterRule());
					}
					set(
						$current,
						"filter",
						lv_filter_1_0,
						"es.uam.sara.tfg.dsl.JRules.Or");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOrAccess().getOpAndParserRuleCall_0_0());
				}
				lv_op_0_0=ruleAnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrRule());
					}
					add(
						$current,
						"op",
						lv_op_0_0,
						"es.uam.sara.tfg.dsl.JRules.And");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='or'
			{
				newLeafNode(otherlv_1, grammarAccess.getOrAccess().getOrKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getOpAndParserRuleCall_1_1_0());
					}
					lv_op_2_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						add(
							$current,
							"op",
							lv_op_2_0,
							"es.uam.sara.tfg.dsl.JRules.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAndAccess().getOpSatisfyParserRuleCall_0_0());
				}
				lv_op_0_0=ruleSatisfy
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndRule());
					}
					add(
						$current,
						"op",
						lv_op_0_0,
						"es.uam.sara.tfg.dsl.JRules.Satisfy");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getAndAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getOpSatisfyParserRuleCall_1_1_0());
					}
					lv_op_2_0=ruleSatisfy
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						add(
							$current,
							"op",
							lv_op_2_0,
							"es.uam.sara.tfg.dsl.JRules.Satisfy");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='and'
			{
				newLeafNode(otherlv_3, grammarAccess.getAndAccess().getAndKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getOpSatisfyParserRuleCall_1_3_0());
					}
					lv_op_4_0=ruleSatisfy
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						add(
							$current,
							"op",
							lv_op_4_0,
							"es.uam.sara.tfg.dsl.JRules.Satisfy");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5='and'
				{
					newLeafNode(otherlv_5, grammarAccess.getAndAccess().getAndKeyword_1_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAndAccess().getOpSatisfyParserRuleCall_1_4_1_0());
						}
						lv_op_6_0=ruleSatisfy
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAndRule());
							}
							add(
								$current,
								"op",
								lv_op_6_0,
								"es.uam.sara.tfg.dsl.JRules.Satisfy");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getAndAccess().getRightParenthesisKeyword_1_5());
			}
		)
	)
;

// Entry rule entryRuleisImplemented
entryRuleisImplemented returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsImplementedRule()); }
	iv_ruleisImplemented=ruleisImplemented
	{ $current=$iv_ruleisImplemented.current; }
	EOF;

// Rule isImplemented
ruleisImplemented returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIsImplementedAccess().getIsImplementedAction_0(),
					$current);
			}
		)
		otherlv_1='is'
		{
			newLeafNode(otherlv_1, grammarAccess.getIsImplementedAccess().getIsKeyword_1());
		}
		otherlv_2='implemented'
		{
			newLeafNode(otherlv_2, grammarAccess.getIsImplementedAccess().getImplementedKeyword_2());
		}
	)
;

// Entry rule entryRuleIsInheritor
entryRuleIsInheritor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsInheritorRule()); }
	iv_ruleIsInheritor=ruleIsInheritor
	{ $current=$iv_ruleIsInheritor.current; }
	EOF;

// Rule IsInheritor
ruleIsInheritor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIsInheritorAccess().getIsInheritorAction_0(),
					$current);
			}
		)
		otherlv_1='is'
		{
			newLeafNode(otherlv_1, grammarAccess.getIsInheritorAccess().getIsKeyword_1());
		}
		otherlv_2='inheritor'
		{
			newLeafNode(otherlv_2, grammarAccess.getIsInheritorAccess().getInheritorKeyword_2());
		}
	)
;

// Entry rule entryRuleImplements
entryRuleImplements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImplementsRule()); }
	iv_ruleImplements=ruleImplements
	{ $current=$iv_ruleImplements.current; }
	EOF;

// Rule Implements
ruleImplements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getImplementsAccess().getImplementsAction_0(),
					$current);
			}
		)
		otherlv_1='implements'
		{
			newLeafNode(otherlv_1, grammarAccess.getImplementsAccess().getImplementsKeyword_1());
		}
		(
			(
				otherlv_2='min='
				{
					newLeafNode(otherlv_2, grammarAccess.getImplementsAccess().getMinKeyword_2_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getImplementsAccess().getMinInterfaceEIntParserRuleCall_2_0_1_0());
						}
						lv_minInterface_3_0=ruleEInt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getImplementsRule());
							}
							set(
								$current,
								"minInterface",
								lv_minInterface_3_0,
								"es.uam.sara.tfg.dsl.JRules.EInt");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4='and'
					{
						newLeafNode(otherlv_4, grammarAccess.getImplementsAccess().getAndKeyword_2_0_2_0());
					}
					otherlv_5='max='
					{
						newLeafNode(otherlv_5, grammarAccess.getImplementsAccess().getMaxKeyword_2_0_2_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getImplementsAccess().getMaxInterfaceEIntParserRuleCall_2_0_2_2_0());
							}
							lv_maxInterface_6_0=ruleEInt
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getImplementsRule());
								}
								set(
									$current,
									"maxInterface",
									lv_maxInterface_6_0,
									"es.uam.sara.tfg.dsl.JRules.EInt");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)
			    |
			(
				otherlv_7='max='
				{
					newLeafNode(otherlv_7, grammarAccess.getImplementsAccess().getMaxKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getImplementsAccess().getMaxInterfaceEIntParserRuleCall_2_1_1_0());
						}
						lv_maxInterface_8_0=ruleEInt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getImplementsRule());
							}
							set(
								$current,
								"maxInterface",
								lv_maxInterface_8_0,
								"es.uam.sara.tfg.dsl.JRules.EInt");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_9='and'
					{
						newLeafNode(otherlv_9, grammarAccess.getImplementsAccess().getAndKeyword_2_1_2_0());
					}
					otherlv_10='min='
					{
						newLeafNode(otherlv_10, grammarAccess.getImplementsAccess().getMinKeyword_2_1_2_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getImplementsAccess().getMinInterfaceEIntParserRuleCall_2_1_2_2_0());
							}
							lv_minInterface_11_0=ruleEInt
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getImplementsRule());
								}
								set(
									$current,
									"minInterface",
									lv_minInterface_11_0,
									"es.uam.sara.tfg.dsl.JRules.EInt");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)
		)?
		otherlv_12='interfaces'
		{
			newLeafNode(otherlv_12, grammarAccess.getImplementsAccess().getInterfacesKeyword_3());
		}
	)
;

// Entry rule entryRuleIsExtended
entryRuleIsExtended returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsExtendedRule()); }
	iv_ruleIsExtended=ruleIsExtended
	{ $current=$iv_ruleIsExtended.current; }
	EOF;

// Rule IsExtended
ruleIsExtended returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIsExtendedAccess().getIsExtendedAction_0(),
					$current);
			}
		)
		otherlv_1='is'
		{
			newLeafNode(otherlv_1, grammarAccess.getIsExtendedAccess().getIsKeyword_1());
		}
		otherlv_2='extended'
		{
			newLeafNode(otherlv_2, grammarAccess.getIsExtendedAccess().getExtendedKeyword_2());
		}
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='numParameters='
		{
			newLeafNode(otherlv_0, grammarAccess.getParameterAccess().getNumParametersKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getNumParamEIntParserRuleCall_1_0());
				}
				lv_numParam_1_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"numParam",
						lv_numParam_1_0,
						"es.uam.sara.tfg.dsl.JRules.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='and'
			{
				newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getAndKeyword_2_0());
			}
			otherlv_3='types='
			{
				newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getTypesKeyword_2_1());
			}
			otherlv_4='['
			{
				newLeafNode(otherlv_4, grammarAccess.getParameterAccess().getLeftSquareBracketKeyword_2_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterAccess().getTypesParamEStringParserRuleCall_2_3_0());
					}
					lv_typesParam_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterRule());
						}
						add(
							$current,
							"typesParam",
							lv_typesParam_5_0,
							"es.uam.sara.tfg.dsl.JRules.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getParameterAccess().getCommaKeyword_2_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getParameterAccess().getTypesParamEStringParserRuleCall_2_4_1_0());
						}
						lv_typesParam_7_0=ruleEString
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParameterRule());
							}
							add(
								$current,
								"typesParam",
								lv_typesParam_7_0,
								"es.uam.sara.tfg.dsl.JRules.EString");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_8=']'
			{
				newLeafNode(otherlv_8, grammarAccess.getParameterAccess().getRightSquareBracketKeyword_2_5());
			}
		)?
	)
;

// Entry rule entryRuleConstructor
entryRuleConstructor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstructorRule()); }
	iv_ruleConstructor=ruleConstructor
	{ $current=$iv_ruleConstructor.current; }
	EOF;

// Rule Constructor
ruleConstructor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConstructorAccess().getConstructorAction_0(),
					$current);
			}
		)
		otherlv_1='is'
		{
			newLeafNode(otherlv_1, grammarAccess.getConstructorAccess().getIsKeyword_1());
		}
		otherlv_2='constructor'
		{
			newLeafNode(otherlv_2, grammarAccess.getConstructorAccess().getConstructorKeyword_2());
		}
	)
;

// Entry rule entryRuleReturn
entryRuleReturn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnRule()); }
	iv_ruleReturn=ruleReturn
	{ $current=$iv_ruleReturn.current; }
	EOF;

// Rule Return
ruleReturn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='return'
		{
			newLeafNode(otherlv_0, grammarAccess.getReturnAccess().getReturnKeyword_0());
		}
		otherlv_1='type='
		{
			newLeafNode(otherlv_1, grammarAccess.getReturnAccess().getTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnAccess().getReturnTypeEStringParserRuleCall_2_0());
				}
				lv_returnType_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnRule());
					}
					set(
						$current,
						"returnType",
						lv_returnType_2_0,
						"es.uam.sara.tfg.dsl.JRules.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAttributeType
entryRuleAttributeType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeTypeRule()); }
	iv_ruleAttributeType=ruleAttributeType
	{ $current=$iv_ruleAttributeType.current; }
	EOF;

// Rule AttributeType
ruleAttributeType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type='
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributeTypeAccess().getTypeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeTypeAccess().getTypeEStringParserRuleCall_1_0());
				}
				lv_Type_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeTypeRule());
					}
					set(
						$current,
						"Type",
						lv_Type_1_0,
						"es.uam.sara.tfg.dsl.JRules.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInitialize
entryRuleInitialize returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitializeRule()); }
	iv_ruleInitialize=ruleInitialize
	{ $current=$iv_ruleInitialize.current; }
	EOF;

// Rule Initialize
ruleInitialize returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInitializeAccess().getInitializeAction_0(),
					$current);
			}
		)
		otherlv_1='is'
		{
			newLeafNode(otherlv_1, grammarAccess.getInitializeAccess().getIsKeyword_1());
		}
		otherlv_2='initialize'
		{
			newLeafNode(otherlv_2, grammarAccess.getInitializeAccess().getInitializeKeyword_2());
		}
	)
;

// Entry rule entryRuleEmpty
entryRuleEmpty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEmptyRule()); }
	iv_ruleEmpty=ruleEmpty
	{ $current=$iv_ruleEmpty.current; }
	EOF;

// Rule Empty
ruleEmpty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEmptyAccess().getEmptyAction_0(),
					$current);
			}
		)
		otherlv_1='is'
		{
			newLeafNode(otherlv_1, grammarAccess.getEmptyAccess().getIsKeyword_1());
		}
		(
			(
				lv_no_2_0='not'
				{
					newLeafNode(lv_no_2_0, grammarAccess.getEmptyAccess().getNoNotKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEmptyRule());
					}
					setWithLastConsumed($current, "no", true, "not");
				}
			)
		)?
		otherlv_3='empty'
		{
			newLeafNode(otherlv_3, grammarAccess.getEmptyAccess().getEmptyKeyword_3());
		}
	)
;

// Entry rule entryRuleNameOperation
entryRuleNameOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNameOperationRule()); }
	iv_ruleNameOperation=ruleNameOperation
	{ $current=$iv_ruleNameOperation.current; }
	EOF;

// Rule NameOperation
ruleNameOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNameOperationAccess().getNameOperationAction_0(),
					$current);
			}
		)
		otherlv_1='name'
		{
			newLeafNode(otherlv_1, grammarAccess.getNameOperationAccess().getNameKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNameOperationAccess().getOperatorNameOperatorEnumRuleCall_2_0());
				}
				lv_operator_2_0=ruleNameOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNameOperationRule());
					}
					set(
						$current,
						"operator",
						lv_operator_2_0,
						"es.uam.sara.tfg.dsl.JRules.NameOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNameOperationAccess().getNameEStringParserRuleCall_3_0());
				}
				lv_name_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNameOperationRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"es.uam.sara.tfg.dsl.JRules.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getNameOperationAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNameOperationAccess().getLanguageLanguageEnumRuleCall_4_1_0());
					}
					lv_Language_5_0=ruleLanguage
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNameOperationRule());
						}
						set(
							$current,
							"Language",
							lv_Language_5_0,
							"es.uam.sara.tfg.dsl.JRules.Language");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleNameType
entryRuleNameType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNameTypeRule()); }
	iv_ruleNameType=ruleNameType
	{ $current=$iv_ruleNameType.current; }
	EOF;

// Rule NameType
ruleNameType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='name'
		{
			newLeafNode(otherlv_0, grammarAccess.getNameTypeAccess().getNameKeyword_0());
		}
		otherlv_1='type='
		{
			newLeafNode(otherlv_1, grammarAccess.getNameTypeAccess().getTypeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNameTypeAccess().getTypeNameCheckEnumRuleCall_2_0());
				}
				lv_type_2_0=ruleNameCheck
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNameTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"es.uam.sara.tfg.dsl.JRules.NameCheck");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleJavaDoc
entryRuleJavaDoc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJavaDocRule()); }
	iv_ruleJavaDoc=ruleJavaDoc
	{ $current=$iv_ruleJavaDoc.current; }
	EOF;

// Rule JavaDoc
ruleJavaDoc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getJavaDocAccess().getJavaDocAction_0(),
					$current);
			}
		)
		otherlv_1='JavaDoc'
		{
			newLeafNode(otherlv_1, grammarAccess.getJavaDocAccess().getJavaDocKeyword_1());
		}
		(
			(
				lv_author_2_0='@author'
				{
					newLeafNode(lv_author_2_0, grammarAccess.getJavaDocAccess().getAuthorAuthorKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJavaDocRule());
					}
					setWithLastConsumed($current, "author", true, "@author");
				}
			)
		)?
		(
			(
				lv_parameter_3_0='@parameter'
				{
					newLeafNode(lv_parameter_3_0, grammarAccess.getJavaDocAccess().getParameterParameterKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJavaDocRule());
					}
					setWithLastConsumed($current, "parameter", true, "@parameter");
				}
			)
		)?
		(
			(
				lv_return_4_0='@return'
				{
					newLeafNode(lv_return_4_0, grammarAccess.getJavaDocAccess().getReturnReturnKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJavaDocRule());
					}
					setWithLastConsumed($current, "return", true, "@return");
				}
			)
		)?
		(
			(
				lv_version_5_0='@version'
				{
					newLeafNode(lv_version_5_0, grammarAccess.getJavaDocAccess().getVersionVersionKeyword_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJavaDocRule());
					}
					setWithLastConsumed($current, "version", true, "@version");
				}
			)
		)?
		(
			(
				lv_throws_6_0='@throws'
				{
					newLeafNode(lv_throws_6_0, grammarAccess.getJavaDocAccess().getThrowsThrowsKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJavaDocRule());
					}
					setWithLastConsumed($current, "throws", true, "@throws");
				}
			)
		)?
		(
			(
				lv_see_7_0='@see'
				{
					newLeafNode(lv_see_7_0, grammarAccess.getJavaDocAccess().getSeeSeeKeyword_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJavaDocRule());
					}
					setWithLastConsumed($current, "see", true, "@see");
				}
			)
		)?
	)
;

// Entry rule entryRuleContains
entryRuleContains returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainsRule()); }
	iv_ruleContains=ruleContains
	{ $current=$iv_ruleContains.current; }
	EOF;

// Rule Contains
ruleContains returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='have'
		{
			newLeafNode(otherlv_0, grammarAccess.getContainsAccess().getHaveKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getContainsAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContainsAccess().getWhichRuleParserRuleCall_2_0());
				}
				lv_which_2_0=ruleRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainsRule());
					}
					set(
						$current,
						"which",
						lv_which_2_0,
						"es.uam.sara.tfg.dsl.JRules.Rule");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getContainsAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleModifiers
entryRuleModifiers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModifiersRule()); }
	iv_ruleModifiers=ruleModifiers
	{ $current=$iv_ruleModifiers.current; }
	EOF;

// Rule Modifiers
ruleModifiers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='modifiers:'
		{
			newLeafNode(otherlv_0, grammarAccess.getModifiersAccess().getModifiersKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getModifiersAccess().getLeftSquareBracketKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getModifiersAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModifiersAccess().getBlendBlendModifiersParserRuleCall_3_0());
				}
				lv_blend_3_0=ruleBlendModifiers
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModifiersRule());
					}
					add(
						$current,
						"blend",
						lv_blend_3_0,
						"es.uam.sara.tfg.dsl.JRules.BlendModifiers");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getModifiersAccess().getRightParenthesisKeyword_4());
		}
		(
			otherlv_5='or'
			{
				newLeafNode(otherlv_5, grammarAccess.getModifiersAccess().getOrKeyword_5_0());
			}
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getModifiersAccess().getLeftParenthesisKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModifiersAccess().getBlendBlendModifiersParserRuleCall_5_2_0());
					}
					lv_blend_7_0=ruleBlendModifiers
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModifiersRule());
						}
						add(
							$current,
							"blend",
							lv_blend_7_0,
							"es.uam.sara.tfg.dsl.JRules.BlendModifiers");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getModifiersAccess().getRightParenthesisKeyword_5_3());
			}
		)*
		otherlv_9=']'
		{
			newLeafNode(otherlv_9, grammarAccess.getModifiersAccess().getRightSquareBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleBlendModifiers
entryRuleBlendModifiers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlendModifiersRule()); }
	iv_ruleBlendModifiers=ruleBlendModifiers
	{ $current=$iv_ruleBlendModifiers.current; }
	EOF;

// Rule BlendModifiers
ruleBlendModifiers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBlendModifiersAccess().getAccessAccessModifierEnumRuleCall_0_0_0());
					}
					lv_access_0_0=ruleAccessModifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlendModifiersRule());
						}
						set(
							$current,
							"access",
							lv_access_0_0,
							"es.uam.sara.tfg.dsl.JRules.AccessModifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_1='and'
				{
					newLeafNode(otherlv_1, grammarAccess.getBlendModifiersAccess().getAndKeyword_0_1_0());
				}
				(
					(
						lv_static_2_0='static'
						{
							newLeafNode(lv_static_2_0, grammarAccess.getBlendModifiersAccess().getStaticStaticKeyword_0_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBlendModifiersRule());
							}
							setWithLastConsumed($current, "static", true, "static");
						}
					)
				)
			)?
			(
				otherlv_3='and'
				{
					newLeafNode(otherlv_3, grammarAccess.getBlendModifiersAccess().getAndKeyword_0_2_0());
				}
				(
					(
						lv_final_4_0='final'
						{
							newLeafNode(lv_final_4_0, grammarAccess.getBlendModifiersAccess().getFinalFinalKeyword_0_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBlendModifiersRule());
							}
							setWithLastConsumed($current, "final", true, "final");
						}
					)
				)
			)?
			(
				otherlv_5='and'
				{
					newLeafNode(otherlv_5, grammarAccess.getBlendModifiersAccess().getAndKeyword_0_3_0());
				}
				(
					(
						lv_abstract_6_0='abstract'
						{
							newLeafNode(lv_abstract_6_0, grammarAccess.getBlendModifiersAccess().getAbstractAbstractKeyword_0_3_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBlendModifiersRule());
							}
							setWithLastConsumed($current, "abstract", true, "abstract");
						}
					)
				)
			)?
			(
				otherlv_7='and'
				{
					newLeafNode(otherlv_7, grammarAccess.getBlendModifiersAccess().getAndKeyword_0_4_0());
				}
				(
					(
						lv_synchronized_8_0='synchronized'
						{
							newLeafNode(lv_synchronized_8_0, grammarAccess.getBlendModifiersAccess().getSynchronizedSynchronizedKeyword_0_4_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBlendModifiersRule());
							}
							setWithLastConsumed($current, "synchronized", true, "synchronized");
						}
					)
				)
			)?
		)
		    |
		(
			(
				(
					lv_static_9_0='static'
					{
						newLeafNode(lv_static_9_0, grammarAccess.getBlendModifiersAccess().getStaticStaticKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlendModifiersRule());
						}
						setWithLastConsumed($current, "static", true, "static");
					}
				)
			)
			(
				otherlv_10='and'
				{
					newLeafNode(otherlv_10, grammarAccess.getBlendModifiersAccess().getAndKeyword_1_1_0());
				}
				(
					(
						lv_final_11_0='final'
						{
							newLeafNode(lv_final_11_0, grammarAccess.getBlendModifiersAccess().getFinalFinalKeyword_1_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBlendModifiersRule());
							}
							setWithLastConsumed($current, "final", true, "final");
						}
					)
				)
			)?
			(
				otherlv_12='and'
				{
					newLeafNode(otherlv_12, grammarAccess.getBlendModifiersAccess().getAndKeyword_1_2_0());
				}
				(
					(
						lv_abstract_13_0='abstract'
						{
							newLeafNode(lv_abstract_13_0, grammarAccess.getBlendModifiersAccess().getAbstractAbstractKeyword_1_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBlendModifiersRule());
							}
							setWithLastConsumed($current, "abstract", true, "abstract");
						}
					)
				)
			)?
			(
				otherlv_14='and'
				{
					newLeafNode(otherlv_14, grammarAccess.getBlendModifiersAccess().getAndKeyword_1_3_0());
				}
				(
					(
						lv_synchronized_15_0='synchronized'
						{
							newLeafNode(lv_synchronized_15_0, grammarAccess.getBlendModifiersAccess().getSynchronizedSynchronizedKeyword_1_3_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBlendModifiersRule());
							}
							setWithLastConsumed($current, "synchronized", true, "synchronized");
						}
					)
				)
			)?
		)
		    |
		(
			(
				(
					lv_final_16_0='final'
					{
						newLeafNode(lv_final_16_0, grammarAccess.getBlendModifiersAccess().getFinalFinalKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlendModifiersRule());
						}
						setWithLastConsumed($current, "final", true, "final");
					}
				)
			)
			(
				otherlv_17='and'
				{
					newLeafNode(otherlv_17, grammarAccess.getBlendModifiersAccess().getAndKeyword_2_1_0());
				}
				(
					(
						lv_abstract_18_0='abstract'
						{
							newLeafNode(lv_abstract_18_0, grammarAccess.getBlendModifiersAccess().getAbstractAbstractKeyword_2_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBlendModifiersRule());
							}
							setWithLastConsumed($current, "abstract", true, "abstract");
						}
					)
				)
			)?
			(
				otherlv_19='and'
				{
					newLeafNode(otherlv_19, grammarAccess.getBlendModifiersAccess().getAndKeyword_2_2_0());
				}
				(
					(
						lv_synchronized_20_0='synchronized'
						{
							newLeafNode(lv_synchronized_20_0, grammarAccess.getBlendModifiersAccess().getSynchronizedSynchronizedKeyword_2_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBlendModifiersRule());
							}
							setWithLastConsumed($current, "synchronized", true, "synchronized");
						}
					)
				)
			)?
		)
		    |
		(
			(
				(
					lv_abstract_21_0='abstract'
					{
						newLeafNode(lv_abstract_21_0, grammarAccess.getBlendModifiersAccess().getAbstractAbstractKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlendModifiersRule());
						}
						setWithLastConsumed($current, "abstract", true, "abstract");
					}
				)
			)
			(
				otherlv_22='and'
				{
					newLeafNode(otherlv_22, grammarAccess.getBlendModifiersAccess().getAndKeyword_3_1_0());
				}
				(
					(
						lv_synchronized_23_0='synchronized'
						{
							newLeafNode(lv_synchronized_23_0, grammarAccess.getBlendModifiersAccess().getSynchronizedSynchronizedKeyword_3_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getBlendModifiersRule());
							}
							setWithLastConsumed($current, "synchronized", true, "synchronized");
						}
					)
				)
			)?
		)
		    |
		(
			(
				lv_synchronized_24_0='synchronized'
				{
					newLeafNode(lv_synchronized_24_0, grammarAccess.getBlendModifiersAccess().getSynchronizedSynchronizedKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBlendModifiersRule());
					}
					setWithLastConsumed($current, "synchronized", true, "synchronized");
				}
			)
		)
	)
;

// Rule Quantifier
ruleQuantifier returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='one'
			{
				$current = grammarAccess.getQuantifierAccess().getOneEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getQuantifierAccess().getOneEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='exists'
			{
				$current = grammarAccess.getQuantifierAccess().getExistsEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getQuantifierAccess().getExistsEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='all'
			{
				$current = grammarAccess.getQuantifierAccess().getAllEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getQuantifierAccess().getAllEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule ElementJava
ruleElementJava returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Package'
			{
				$current = grammarAccess.getElementJavaAccess().getPackageEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getElementJavaAccess().getPackageEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Class'
			{
				$current = grammarAccess.getElementJavaAccess().getClassEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getElementJavaAccess().getClassEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Interface'
			{
				$current = grammarAccess.getElementJavaAccess().getInterfaceEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getElementJavaAccess().getInterfaceEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Enum'
			{
				$current = grammarAccess.getElementJavaAccess().getEnumEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getElementJavaAccess().getEnumEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Method'
			{
				$current = grammarAccess.getElementJavaAccess().getMethodEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getElementJavaAccess().getMethodEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Attribute'
			{
				$current = grammarAccess.getElementJavaAccess().getAttributeEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getElementJavaAccess().getAttributeEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule NameCheck
ruleNameCheck returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='upperCase'
			{
				$current = grammarAccess.getNameCheckAccess().getUPPER_CASEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getNameCheckAccess().getUPPER_CASEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='lowerCase'
			{
				$current = grammarAccess.getNameCheckAccess().getLOWER_CASEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getNameCheckAccess().getLOWER_CASEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='upperCamelCase'
			{
				$current = grammarAccess.getNameCheckAccess().getUPPER_CAMEL_CASEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getNameCheckAccess().getUPPER_CAMEL_CASEEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='lowerCamelCase'
			{
				$current = grammarAccess.getNameCheckAccess().getLOWER_CAMEL_CASEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getNameCheckAccess().getLOWER_CAMEL_CASEEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='startUpperCase'
			{
				$current = grammarAccess.getNameCheckAccess().getSTART_UPPER_CASEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getNameCheckAccess().getSTART_UPPER_CASEEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule NameOperator
ruleNameOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='like'
			{
				$current = grammarAccess.getNameOperatorAccess().getLIKEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getNameOperatorAccess().getLIKEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='equal'
			{
				$current = grammarAccess.getNameOperatorAccess().getEQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getNameOperatorAccess().getEQUALEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='end'
			{
				$current = grammarAccess.getNameOperatorAccess().getENDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getNameOperatorAccess().getENDEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='start'
			{
				$current = grammarAccess.getNameOperatorAccess().getSTARTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getNameOperatorAccess().getSTARTEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='contain'
			{
				$current = grammarAccess.getNameOperatorAccess().getCONTAINEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getNameOperatorAccess().getCONTAINEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule Language
ruleLanguage returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='English'
			{
				$current = grammarAccess.getLanguageAccess().getENGLISHEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLanguageAccess().getENGLISHEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Spanish'
			{
				$current = grammarAccess.getLanguageAccess().getSPANISHEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLanguageAccess().getSPANISHEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule AccessModifier
ruleAccessModifier returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='default'
			{
				$current = grammarAccess.getAccessModifierAccess().getDefaultEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAccessModifierAccess().getDefaultEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='public'
			{
				$current = grammarAccess.getAccessModifierAccess().getPublicEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAccessModifierAccess().getPublicEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='protected'
			{
				$current = grammarAccess.getAccessModifierAccess().getProtectedEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAccessModifierAccess().getProtectedEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='private'
			{
				$current = grammarAccess.getAccessModifierAccess().getPrivateEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getAccessModifierAccess().getPrivateEnumLiteralDeclaration_3());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
