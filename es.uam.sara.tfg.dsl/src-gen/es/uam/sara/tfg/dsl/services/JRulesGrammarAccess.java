/*
 * generated by Xtext 2.10.0
 */
package es.uam.sara.tfg.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class JRulesGrammarAccess extends AbstractGrammarElementFinder {
	
	public class RuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.RuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProjectNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProjectNameEStringParserRuleCall_1_0 = (RuleCall)cProjectNameAssignment_1.eContents().get(0);
		private final Assignment cRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulesRuleParserRuleCall_2_0 = (RuleCall)cRulesAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cRulesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cRulesRuleParserRuleCall_4_0_0 = (RuleCall)cRulesAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//RuleSet:
		//	'ProjectName:' ProjectName=EString
		//	rules+=Rule ';' (rules+=Rule ';')*;
		@Override public ParserRule getRule() { return rule; }
		
		//'ProjectName:' ProjectName=EString rules+=Rule ';' (rules+=Rule ';')*
		public Group getGroup() { return cGroup; }
		
		//'ProjectName:'
		public Keyword getProjectNameKeyword_0() { return cProjectNameKeyword_0; }
		
		//ProjectName=EString
		public Assignment getProjectNameAssignment_1() { return cProjectNameAssignment_1; }
		
		//EString
		public RuleCall getProjectNameEStringParserRuleCall_1_0() { return cProjectNameEStringParserRuleCall_1_0; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_2() { return cRulesAssignment_2; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_2_0() { return cRulesRuleParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//(rules+=Rule ';')*
		public Group getGroup_4() { return cGroup_4; }
		
		//rules+=Rule
		public Assignment getRulesAssignment_4_0() { return cRulesAssignment_4_0; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_4_0_0() { return cRulesRuleParserRuleCall_4_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}
	public class SatisfyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Satisfy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIsImplementedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIsInheritorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cImplementsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIsExtendedParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cParameterParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cConstructorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cReturnParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAttributeTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cInitializeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cNoEmptyParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cNameParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cJavaDocParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cContainsParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cModifiersParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//Satisfy:
		//	isImplemented | IsInheritor | Implements | IsExtended | Parameter | Constructor | Return | AttributeType | Initialize
		//	| NoEmpty | Name | JavaDoc | Contains | Modifiers;
		@Override public ParserRule getRule() { return rule; }
		
		//isImplemented | IsInheritor | Implements | IsExtended | Parameter | Constructor | Return | AttributeType | Initialize |
		//NoEmpty | Name | JavaDoc | Contains | Modifiers
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//isImplemented
		public RuleCall getIsImplementedParserRuleCall_0() { return cIsImplementedParserRuleCall_0; }
		
		//IsInheritor
		public RuleCall getIsInheritorParserRuleCall_1() { return cIsInheritorParserRuleCall_1; }
		
		//Implements
		public RuleCall getImplementsParserRuleCall_2() { return cImplementsParserRuleCall_2; }
		
		//IsExtended
		public RuleCall getIsExtendedParserRuleCall_3() { return cIsExtendedParserRuleCall_3; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_4() { return cParameterParserRuleCall_4; }
		
		//Constructor
		public RuleCall getConstructorParserRuleCall_5() { return cConstructorParserRuleCall_5; }
		
		//Return
		public RuleCall getReturnParserRuleCall_6() { return cReturnParserRuleCall_6; }
		
		//AttributeType
		public RuleCall getAttributeTypeParserRuleCall_7() { return cAttributeTypeParserRuleCall_7; }
		
		//Initialize
		public RuleCall getInitializeParserRuleCall_8() { return cInitializeParserRuleCall_8; }
		
		//NoEmpty
		public RuleCall getNoEmptyParserRuleCall_9() { return cNoEmptyParserRuleCall_9; }
		
		//Name
		public RuleCall getNameParserRuleCall_10() { return cNameParserRuleCall_10; }
		
		//JavaDoc
		public RuleCall getJavaDocParserRuleCall_11() { return cJavaDocParserRuleCall_11; }
		
		//Contains
		public RuleCall getContainsParserRuleCall_12() { return cContainsParserRuleCall_12; }
		
		//Modifiers
		public RuleCall getModifiersParserRuleCall_13() { return cModifiersParserRuleCall_13; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNoNoKeyword_0_0 = (Keyword)cNoAssignment_0.eContents().get(0);
		private final Assignment cQuantifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuantifierQuantifierEnumRuleCall_1_0 = (RuleCall)cQuantifierAssignment_1.eContents().get(0);
		private final Assignment cElementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementElementJavaEnumRuleCall_2_0 = (RuleCall)cElementAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWhichKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFilterAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFilterFilterParserRuleCall_3_1_0 = (RuleCall)cFilterAssignment_3_1.eContents().get(0);
		private final Keyword cSatisfyKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSatisfyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSatisfyOrParserRuleCall_5_0 = (RuleCall)cSatisfyAssignment_5.eContents().get(0);
		
		//Rule:
		//	no?='no'? quantifier=Quantifier element=ElementJava ('which' filter=Filter)? 'satisfy' satisfy=Or;
		@Override public ParserRule getRule() { return rule; }
		
		//no?='no'? quantifier=Quantifier element=ElementJava ('which' filter=Filter)? 'satisfy' satisfy=Or
		public Group getGroup() { return cGroup; }
		
		//no?='no'?
		public Assignment getNoAssignment_0() { return cNoAssignment_0; }
		
		//'no'
		public Keyword getNoNoKeyword_0_0() { return cNoNoKeyword_0_0; }
		
		//quantifier=Quantifier
		public Assignment getQuantifierAssignment_1() { return cQuantifierAssignment_1; }
		
		//Quantifier
		public RuleCall getQuantifierQuantifierEnumRuleCall_1_0() { return cQuantifierQuantifierEnumRuleCall_1_0; }
		
		//element=ElementJava
		public Assignment getElementAssignment_2() { return cElementAssignment_2; }
		
		//ElementJava
		public RuleCall getElementElementJavaEnumRuleCall_2_0() { return cElementElementJavaEnumRuleCall_2_0; }
		
		//('which' filter=Filter)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'which'
		public Keyword getWhichKeyword_3_0() { return cWhichKeyword_3_0; }
		
		//filter=Filter
		public Assignment getFilterAssignment_3_1() { return cFilterAssignment_3_1; }
		
		//Filter
		public RuleCall getFilterFilterParserRuleCall_3_1_0() { return cFilterFilterParserRuleCall_3_1_0; }
		
		//'satisfy'
		public Keyword getSatisfyKeyword_4() { return cSatisfyKeyword_4; }
		
		//satisfy=Or
		public Assignment getSatisfyAssignment_5() { return cSatisfyAssignment_5; }
		
		//Or
		public RuleCall getSatisfyOrParserRuleCall_5_0() { return cSatisfyOrParserRuleCall_5_0; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Filter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNoNoKeyword_0_0 = (Keyword)cNoAssignment_0.eContents().get(0);
		private final Assignment cFilterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilterOrParserRuleCall_1_0 = (RuleCall)cFilterAssignment_1.eContents().get(0);
		
		//Filter:
		//	no?='no'? filter=Or;
		@Override public ParserRule getRule() { return rule; }
		
		//no?='no'? filter=Or
		public Group getGroup() { return cGroup; }
		
		//no?='no'?
		public Assignment getNoAssignment_0() { return cNoAssignment_0; }
		
		//'no'
		public Keyword getNoNoKeyword_0_0() { return cNoNoKeyword_0_0; }
		
		//filter=Or
		public Assignment getFilterAssignment_1() { return cFilterAssignment_1; }
		
		//Or
		public RuleCall getFilterOrParserRuleCall_1_0() { return cFilterOrParserRuleCall_1_0; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpAndParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpAndParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		
		//Or:
		//	op+=And ('or' op+=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//op+=And ('or' op+=And)*
		public Group getGroup() { return cGroup; }
		
		//op+=And
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//And
		public RuleCall getOpAndParserRuleCall_0_0() { return cOpAndParserRuleCall_0_0; }
		
		//('or' op+=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'or'
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }
		
		//op+=And
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//And
		public RuleCall getOpAndParserRuleCall_1_1_0() { return cOpAndParserRuleCall_1_1_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.And");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cOpSatisfyParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpSatisfyParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cAndKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cOpAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOpSatisfyParserRuleCall_1_3_0 = (RuleCall)cOpAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cAndKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cOpAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cOpSatisfyParserRuleCall_1_4_1_0 = (RuleCall)cOpAssignment_1_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//And:
		//	op+=Satisfy |
		//	'(' op+=Satisfy 'and' op+=Satisfy ('and' op+=Satisfy)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//op+=Satisfy | '(' op+=Satisfy 'and' op+=Satisfy ('and' op+=Satisfy)* ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//op+=Satisfy
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//Satisfy
		public RuleCall getOpSatisfyParserRuleCall_0_0() { return cOpSatisfyParserRuleCall_0_0; }
		
		//'(' op+=Satisfy 'and' op+=Satisfy ('and' op+=Satisfy)* ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//op+=Satisfy
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//Satisfy
		public RuleCall getOpSatisfyParserRuleCall_1_1_0() { return cOpSatisfyParserRuleCall_1_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_2() { return cAndKeyword_1_2; }
		
		//op+=Satisfy
		public Assignment getOpAssignment_1_3() { return cOpAssignment_1_3; }
		
		//Satisfy
		public RuleCall getOpSatisfyParserRuleCall_1_3_0() { return cOpSatisfyParserRuleCall_1_3_0; }
		
		//('and' op+=Satisfy)*
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//'and'
		public Keyword getAndKeyword_1_4_0() { return cAndKeyword_1_4_0; }
		
		//op+=Satisfy
		public Assignment getOpAssignment_1_4_1() { return cOpAssignment_1_4_1; }
		
		//Satisfy
		public RuleCall getOpSatisfyParserRuleCall_1_4_1_0() { return cOpSatisfyParserRuleCall_1_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}
	public class IsImplementedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.isImplemented");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsImplementedAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cImplementedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//isImplemented:
		//	{isImplemented}
		//	'is' 'implemented';
		@Override public ParserRule getRule() { return rule; }
		
		//{isImplemented} 'is' 'implemented'
		public Group getGroup() { return cGroup; }
		
		//{isImplemented}
		public Action getIsImplementedAction_0() { return cIsImplementedAction_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//'implemented'
		public Keyword getImplementedKeyword_2() { return cImplementedKeyword_2; }
	}
	public class IsInheritorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.IsInheritor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsInheritorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInheritorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//IsInheritor:
		//	{IsInheritor}
		//	'is' 'inheritor';
		@Override public ParserRule getRule() { return rule; }
		
		//{IsInheritor} 'is' 'inheritor'
		public Group getGroup() { return cGroup; }
		
		//{IsInheritor}
		public Action getIsInheritorAction_0() { return cIsInheritorAction_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//'inheritor'
		public Keyword getInheritorKeyword_2() { return cInheritorKeyword_2; }
	}
	public class ImplementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Implements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImplementsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cImplementsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cMinKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cMinInterfaceAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cMinInterfaceEIntParserRuleCall_2_0_1_0 = (RuleCall)cMinInterfaceAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cAndKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Keyword cMaxKeyword_2_0_2_1 = (Keyword)cGroup_2_0_2.eContents().get(1);
		private final Assignment cMaxInterfaceAssignment_2_0_2_2 = (Assignment)cGroup_2_0_2.eContents().get(2);
		private final RuleCall cMaxInterfaceEIntParserRuleCall_2_0_2_2_0 = (RuleCall)cMaxInterfaceAssignment_2_0_2_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cMaxKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cMaxInterfaceAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMaxInterfaceEIntParserRuleCall_2_1_1_0 = (RuleCall)cMaxInterfaceAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cAndKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Keyword cMinKeyword_2_1_2_1 = (Keyword)cGroup_2_1_2.eContents().get(1);
		private final Assignment cMinInterfaceAssignment_2_1_2_2 = (Assignment)cGroup_2_1_2.eContents().get(2);
		private final RuleCall cMinInterfaceEIntParserRuleCall_2_1_2_2_0 = (RuleCall)cMinInterfaceAssignment_2_1_2_2.eContents().get(0);
		private final Keyword cInterfacesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Implements:
		//	{Implements}
		//	'implements' ('min=' minInterface=EInt ('and' 'max=' maxInterface=EInt)? | 'max=' maxInterface=EInt ('and' 'min='
		//	minInterface=EInt)?)?
		//	'interfaces';
		@Override public ParserRule getRule() { return rule; }
		
		//{Implements} 'implements' ('min=' minInterface=EInt ('and' 'max=' maxInterface=EInt)? | 'max=' maxInterface=EInt ('and'
		//'min=' minInterface=EInt)?)? 'interfaces'
		public Group getGroup() { return cGroup; }
		
		//{Implements}
		public Action getImplementsAction_0() { return cImplementsAction_0; }
		
		//'implements'
		public Keyword getImplementsKeyword_1() { return cImplementsKeyword_1; }
		
		//('min=' minInterface=EInt ('and' 'max=' maxInterface=EInt)? | 'max=' maxInterface=EInt ('and' 'min='
		//minInterface=EInt)?)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'min=' minInterface=EInt ('and' 'max=' maxInterface=EInt)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'min='
		public Keyword getMinKeyword_2_0_0() { return cMinKeyword_2_0_0; }
		
		//minInterface=EInt
		public Assignment getMinInterfaceAssignment_2_0_1() { return cMinInterfaceAssignment_2_0_1; }
		
		//EInt
		public RuleCall getMinInterfaceEIntParserRuleCall_2_0_1_0() { return cMinInterfaceEIntParserRuleCall_2_0_1_0; }
		
		//('and' 'max=' maxInterface=EInt)?
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }
		
		//'and'
		public Keyword getAndKeyword_2_0_2_0() { return cAndKeyword_2_0_2_0; }
		
		//'max='
		public Keyword getMaxKeyword_2_0_2_1() { return cMaxKeyword_2_0_2_1; }
		
		//maxInterface=EInt
		public Assignment getMaxInterfaceAssignment_2_0_2_2() { return cMaxInterfaceAssignment_2_0_2_2; }
		
		//EInt
		public RuleCall getMaxInterfaceEIntParserRuleCall_2_0_2_2_0() { return cMaxInterfaceEIntParserRuleCall_2_0_2_2_0; }
		
		//'max=' maxInterface=EInt ('and' 'min=' minInterface=EInt)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'max='
		public Keyword getMaxKeyword_2_1_0() { return cMaxKeyword_2_1_0; }
		
		//maxInterface=EInt
		public Assignment getMaxInterfaceAssignment_2_1_1() { return cMaxInterfaceAssignment_2_1_1; }
		
		//EInt
		public RuleCall getMaxInterfaceEIntParserRuleCall_2_1_1_0() { return cMaxInterfaceEIntParserRuleCall_2_1_1_0; }
		
		//('and' 'min=' minInterface=EInt)?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//'and'
		public Keyword getAndKeyword_2_1_2_0() { return cAndKeyword_2_1_2_0; }
		
		//'min='
		public Keyword getMinKeyword_2_1_2_1() { return cMinKeyword_2_1_2_1; }
		
		//minInterface=EInt
		public Assignment getMinInterfaceAssignment_2_1_2_2() { return cMinInterfaceAssignment_2_1_2_2; }
		
		//EInt
		public RuleCall getMinInterfaceEIntParserRuleCall_2_1_2_2_0() { return cMinInterfaceEIntParserRuleCall_2_1_2_2_0; }
		
		//'interfaces'
		public Keyword getInterfacesKeyword_3() { return cInterfacesKeyword_3; }
	}
	public class IsExtendedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.IsExtended");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIsExtendedAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExtendedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//IsExtended:
		//	{IsExtended}
		//	'is' 'extended';
		@Override public ParserRule getRule() { return rule; }
		
		//{IsExtended} 'is' 'extended'
		public Group getGroup() { return cGroup; }
		
		//{IsExtended}
		public Action getIsExtendedAction_0() { return cIsExtendedAction_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//'extended'
		public Keyword getExtendedKeyword_2() { return cExtendedKeyword_2; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumParametersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNumParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumParamEBigIntegerParserRuleCall_1_0 = (RuleCall)cNumParamAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAndKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cTypesKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cTypesParamAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cTypesParamEStringParserRuleCall_2_3_0 = (RuleCall)cTypesParamAssignment_2_3.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Keyword cCommaKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cTypesParamAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cTypesParamEStringParserRuleCall_2_4_1_0 = (RuleCall)cTypesParamAssignment_2_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//Parameter:
		//	'numParameters=' numParam=EBigInteger ('and' 'types=' '[' typesParam+=EString ("," typesParam+=EString)* ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'numParameters=' numParam=EBigInteger ('and' 'types=' '[' typesParam+=EString ("," typesParam+=EString)* ']')?
		public Group getGroup() { return cGroup; }
		
		//'numParameters='
		public Keyword getNumParametersKeyword_0() { return cNumParametersKeyword_0; }
		
		//numParam=EBigInteger
		public Assignment getNumParamAssignment_1() { return cNumParamAssignment_1; }
		
		//EBigInteger
		public RuleCall getNumParamEBigIntegerParserRuleCall_1_0() { return cNumParamEBigIntegerParserRuleCall_1_0; }
		
		//('and' 'types=' '[' typesParam+=EString ("," typesParam+=EString)* ']')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'and'
		public Keyword getAndKeyword_2_0() { return cAndKeyword_2_0; }
		
		//'types='
		public Keyword getTypesKeyword_2_1() { return cTypesKeyword_2_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_2() { return cLeftSquareBracketKeyword_2_2; }
		
		//typesParam+=EString
		public Assignment getTypesParamAssignment_2_3() { return cTypesParamAssignment_2_3; }
		
		//EString
		public RuleCall getTypesParamEStringParserRuleCall_2_3_0() { return cTypesParamEStringParserRuleCall_2_3_0; }
		
		//("," typesParam+=EString)*
		public Group getGroup_2_4() { return cGroup_2_4; }
		
		//","
		public Keyword getCommaKeyword_2_4_0() { return cCommaKeyword_2_4_0; }
		
		//typesParam+=EString
		public Assignment getTypesParamAssignment_2_4_1() { return cTypesParamAssignment_2_4_1; }
		
		//EString
		public RuleCall getTypesParamEStringParserRuleCall_2_4_1_0() { return cTypesParamEStringParserRuleCall_2_4_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_5() { return cRightSquareBracketKeyword_2_5; }
	}
	public class ConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstructorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cConstructorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Constructor:
		//	{Constructor}
		//	'is' 'constructor';
		@Override public ParserRule getRule() { return rule; }
		
		//{Constructor} 'is' 'constructor'
		public Group getGroup() { return cGroup; }
		
		//{Constructor}
		public Action getConstructorAction_0() { return cConstructorAction_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//'constructor'
		public Keyword getConstructorKeyword_2() { return cConstructorKeyword_2; }
	}
	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReturnTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnTypeEStringParserRuleCall_2_0 = (RuleCall)cReturnTypeAssignment_2.eContents().get(0);
		
		//Return:
		//	'return' 'type=' returnType=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' 'type=' returnType=EString
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//'type='
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//returnType=EString
		public Assignment getReturnTypeAssignment_2() { return cReturnTypeAssignment_2; }
		
		//EString
		public RuleCall getReturnTypeEStringParserRuleCall_2_0() { return cReturnTypeEStringParserRuleCall_2_0; }
	}
	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.AttributeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeEStringParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//AttributeType:
		//	'type=' Type=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'type=' Type=EString
		public Group getGroup() { return cGroup; }
		
		//'type='
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//Type=EString
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//EString
		public RuleCall getTypeEStringParserRuleCall_1_0() { return cTypeEStringParserRuleCall_1_0; }
	}
	public class InitializeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Initialize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitializeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInitializeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Initialize:
		//	{Initialize}
		//	'is' 'initialize';
		@Override public ParserRule getRule() { return rule; }
		
		//{Initialize} 'is' 'initialize'
		public Group getGroup() { return cGroup; }
		
		//{Initialize}
		public Action getInitializeAction_0() { return cInitializeAction_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//'initialize'
		public Keyword getInitializeKeyword_2() { return cInitializeKeyword_2; }
	}
	public class NoEmptyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.NoEmpty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNoEmptyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNotKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEmptyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NoEmpty:
		//	{NoEmpty}
		//	'is' 'not' 'empty';
		@Override public ParserRule getRule() { return rule; }
		
		//{NoEmpty} 'is' 'not' 'empty'
		public Group getGroup() { return cGroup; }
		
		//{NoEmpty}
		public Action getNoEmptyAction_0() { return cNoEmptyAction_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//'not'
		public Keyword getNotKeyword_2() { return cNotKeyword_2; }
		
		//'empty'
		public Keyword getEmptyKeyword_3() { return cEmptyKeyword_3; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cTypeKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cTypeNameTypeEnumRuleCall_2_0_1_0 = (RuleCall)cTypeAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_0_2_0 = (Group)cGroup_2_0_2.eContents().get(0);
		private final Keyword cAndKeyword_2_0_2_0_0 = (Keyword)cGroup_2_0_2_0.eContents().get(0);
		private final Assignment cOperatorAssignment_2_0_2_0_1 = (Assignment)cGroup_2_0_2_0.eContents().get(1);
		private final RuleCall cOperatorNameOperatorEnumRuleCall_2_0_2_0_1_0 = (RuleCall)cOperatorAssignment_2_0_2_0_1.eContents().get(0);
		private final Assignment cNameAssignment_2_0_2_0_2 = (Assignment)cGroup_2_0_2_0.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0_2_0_2_0 = (RuleCall)cNameAssignment_2_0_2_0_2.eContents().get(0);
		private final Group cGroup_2_0_2_1 = (Group)cGroup_2_0_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_2_1_0 = (Keyword)cGroup_2_0_2_1.eContents().get(0);
		private final Assignment cLanguageAssignment_2_0_2_1_1 = (Assignment)cGroup_2_0_2_1.eContents().get(1);
		private final RuleCall cLanguageLanguageEnumRuleCall_2_0_2_1_1_0 = (RuleCall)cLanguageAssignment_2_0_2_1_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cOperatorAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cOperatorNameOperatorEnumRuleCall_2_1_0_0 = (RuleCall)cOperatorAssignment_2_1_0.eContents().get(0);
		private final Assignment cNameAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_2_1_1_0 = (RuleCall)cNameAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cLanguageAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cLanguageLanguageEnumRuleCall_2_1_2_1_0 = (RuleCall)cLanguageAssignment_2_1_2_1.eContents().get(0);
		private final Group cGroup_2_1_3 = (Group)cGroup_2_1.eContents().get(3);
		private final Keyword cAndKeyword_2_1_3_0 = (Keyword)cGroup_2_1_3.eContents().get(0);
		private final Keyword cTypeKeyword_2_1_3_1 = (Keyword)cGroup_2_1_3.eContents().get(1);
		private final Assignment cTypeAssignment_2_1_3_2 = (Assignment)cGroup_2_1_3.eContents().get(2);
		private final RuleCall cTypeNameTypeEnumRuleCall_2_1_3_2_0 = (RuleCall)cTypeAssignment_2_1_3_2.eContents().get(0);
		
		//Name:
		//	{Name}
		//	'name' ('type=' type=NameType (('and' operator=NameOperator name=EString) (',' Language=Language)?)? |
		//	operator=NameOperator name=EString (',' Language=Language)? ('and' 'type=' type=NameType)?);
		@Override public ParserRule getRule() { return rule; }
		
		//{Name} 'name' ('type=' type=NameType (('and' operator=NameOperator name=EString) (',' Language=Language)?)? |
		//operator=NameOperator name=EString (',' Language=Language)? ('and' 'type=' type=NameType)?)
		public Group getGroup() { return cGroup; }
		
		//{Name}
		public Action getNameAction_0() { return cNameAction_0; }
		
		//'name'
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//('type=' type=NameType (('and' operator=NameOperator name=EString) (',' Language=Language)?)? | operator=NameOperator
		//name=EString (',' Language=Language)? ('and' 'type=' type=NameType)?)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'type=' type=NameType (('and' operator=NameOperator name=EString) (',' Language=Language)?)?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'type='
		public Keyword getTypeKeyword_2_0_0() { return cTypeKeyword_2_0_0; }
		
		//type=NameType
		public Assignment getTypeAssignment_2_0_1() { return cTypeAssignment_2_0_1; }
		
		//NameType
		public RuleCall getTypeNameTypeEnumRuleCall_2_0_1_0() { return cTypeNameTypeEnumRuleCall_2_0_1_0; }
		
		//(('and' operator=NameOperator name=EString) (',' Language=Language)?)?
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }
		
		//('and' operator=NameOperator name=EString)
		public Group getGroup_2_0_2_0() { return cGroup_2_0_2_0; }
		
		//'and'
		public Keyword getAndKeyword_2_0_2_0_0() { return cAndKeyword_2_0_2_0_0; }
		
		//operator=NameOperator
		public Assignment getOperatorAssignment_2_0_2_0_1() { return cOperatorAssignment_2_0_2_0_1; }
		
		//NameOperator
		public RuleCall getOperatorNameOperatorEnumRuleCall_2_0_2_0_1_0() { return cOperatorNameOperatorEnumRuleCall_2_0_2_0_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_2_0_2_0_2() { return cNameAssignment_2_0_2_0_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0_2_0_2_0() { return cNameEStringParserRuleCall_2_0_2_0_2_0; }
		
		//(',' Language=Language)?
		public Group getGroup_2_0_2_1() { return cGroup_2_0_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_0_2_1_0() { return cCommaKeyword_2_0_2_1_0; }
		
		//Language=Language
		public Assignment getLanguageAssignment_2_0_2_1_1() { return cLanguageAssignment_2_0_2_1_1; }
		
		//Language
		public RuleCall getLanguageLanguageEnumRuleCall_2_0_2_1_1_0() { return cLanguageLanguageEnumRuleCall_2_0_2_1_1_0; }
		
		//operator=NameOperator name=EString (',' Language=Language)? ('and' 'type=' type=NameType)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//operator=NameOperator
		public Assignment getOperatorAssignment_2_1_0() { return cOperatorAssignment_2_1_0; }
		
		//NameOperator
		public RuleCall getOperatorNameOperatorEnumRuleCall_2_1_0_0() { return cOperatorNameOperatorEnumRuleCall_2_1_0_0; }
		
		//name=EString
		public Assignment getNameAssignment_2_1_1() { return cNameAssignment_2_1_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_1_1_0() { return cNameEStringParserRuleCall_2_1_1_0; }
		
		//(',' Language=Language)?
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }
		
		//','
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }
		
		//Language=Language
		public Assignment getLanguageAssignment_2_1_2_1() { return cLanguageAssignment_2_1_2_1; }
		
		//Language
		public RuleCall getLanguageLanguageEnumRuleCall_2_1_2_1_0() { return cLanguageLanguageEnumRuleCall_2_1_2_1_0; }
		
		//('and' 'type=' type=NameType)?
		public Group getGroup_2_1_3() { return cGroup_2_1_3; }
		
		//'and'
		public Keyword getAndKeyword_2_1_3_0() { return cAndKeyword_2_1_3_0; }
		
		//'type='
		public Keyword getTypeKeyword_2_1_3_1() { return cTypeKeyword_2_1_3_1; }
		
		//type=NameType
		public Assignment getTypeAssignment_2_1_3_2() { return cTypeAssignment_2_1_3_2; }
		
		//NameType
		public RuleCall getTypeNameTypeEnumRuleCall_2_1_3_2_0() { return cTypeNameTypeEnumRuleCall_2_1_3_2_0; }
	}
	public class JavaDocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.JavaDoc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJavaDocAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJavaDocKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAuthorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cAuthorAuthorKeyword_2_0 = (Keyword)cAuthorAssignment_2.eContents().get(0);
		private final Assignment cParameterAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cParameterParameterKeyword_3_0 = (Keyword)cParameterAssignment_3.eContents().get(0);
		private final Assignment cReturnAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cReturnReturnKeyword_4_0 = (Keyword)cReturnAssignment_4.eContents().get(0);
		private final Assignment cVersionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cVersionVersionKeyword_5_0 = (Keyword)cVersionAssignment_5.eContents().get(0);
		private final Assignment cThrowsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cThrowsThrowsKeyword_6_0 = (Keyword)cThrowsAssignment_6.eContents().get(0);
		private final Assignment cSeeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cSeeSeeKeyword_7_0 = (Keyword)cSeeAssignment_7.eContents().get(0);
		
		//JavaDoc:
		//	{JavaDoc}
		//	'JavaDoc'
		//	author?='@author'?
		//	parameter?='@parameter'?
		//	return?='@return'?
		//	version?='@version'?
		//	throws?='@throws'?
		//	see?='@see'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{JavaDoc} 'JavaDoc' author?='@author'? parameter?='@parameter'? return?='@return'? version?='@version'?
		//throws?='@throws'? see?='@see'?
		public Group getGroup() { return cGroup; }
		
		//{JavaDoc}
		public Action getJavaDocAction_0() { return cJavaDocAction_0; }
		
		//'JavaDoc'
		public Keyword getJavaDocKeyword_1() { return cJavaDocKeyword_1; }
		
		//author?='@author'?
		public Assignment getAuthorAssignment_2() { return cAuthorAssignment_2; }
		
		//'@author'
		public Keyword getAuthorAuthorKeyword_2_0() { return cAuthorAuthorKeyword_2_0; }
		
		//parameter?='@parameter'?
		public Assignment getParameterAssignment_3() { return cParameterAssignment_3; }
		
		//'@parameter'
		public Keyword getParameterParameterKeyword_3_0() { return cParameterParameterKeyword_3_0; }
		
		//return?='@return'?
		public Assignment getReturnAssignment_4() { return cReturnAssignment_4; }
		
		//'@return'
		public Keyword getReturnReturnKeyword_4_0() { return cReturnReturnKeyword_4_0; }
		
		//version?='@version'?
		public Assignment getVersionAssignment_5() { return cVersionAssignment_5; }
		
		//'@version'
		public Keyword getVersionVersionKeyword_5_0() { return cVersionVersionKeyword_5_0; }
		
		//throws?='@throws'?
		public Assignment getThrowsAssignment_6() { return cThrowsAssignment_6; }
		
		//'@throws'
		public Keyword getThrowsThrowsKeyword_6_0() { return cThrowsThrowsKeyword_6_0; }
		
		//see?='@see'?
		public Assignment getSeeAssignment_7() { return cSeeAssignment_7; }
		
		//'@see'
		public Keyword getSeeSeeKeyword_7_0() { return cSeeSeeKeyword_7_0; }
	}
	public class ContainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Contains");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHaveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWhichAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhichRuleParserRuleCall_2_0 = (RuleCall)cWhichAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Contains:
		//	'have' '{' which=Rule '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'have' '{' which=Rule '}'
		public Group getGroup() { return cGroup; }
		
		//'have'
		public Keyword getHaveKeyword_0() { return cHaveKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//which=Rule
		public Assignment getWhichAssignment_2() { return cWhichAssignment_2; }
		
		//Rule
		public RuleCall getWhichRuleParserRuleCall_2_0() { return cWhichRuleParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ModifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Modifiers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModifiersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBlendAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlendBlendModifiersParserRuleCall_3_0 = (RuleCall)cBlendAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOrKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cBlendAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cBlendBlendModifiersParserRuleCall_5_2_0 = (RuleCall)cBlendAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Modifiers:
		//	'modifiers:' '['
		//	'(' blend+=BlendModifiers ')' ("or" '(' blend+=BlendModifiers ')')* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'modifiers:' '[' '(' blend+=BlendModifiers ')' ("or" '(' blend+=BlendModifiers ')')* ']'
		public Group getGroup() { return cGroup; }
		
		//'modifiers:'
		public Keyword getModifiersKeyword_0() { return cModifiersKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//blend+=BlendModifiers
		public Assignment getBlendAssignment_3() { return cBlendAssignment_3; }
		
		//BlendModifiers
		public RuleCall getBlendBlendModifiersParserRuleCall_3_0() { return cBlendBlendModifiersParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//("or" '(' blend+=BlendModifiers ')')*
		public Group getGroup_5() { return cGroup_5; }
		
		//"or"
		public Keyword getOrKeyword_5_0() { return cOrKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//blend+=BlendModifiers
		public Assignment getBlendAssignment_5_2() { return cBlendAssignment_5_2; }
		
		//BlendModifiers
		public RuleCall getBlendBlendModifiersParserRuleCall_5_2_0() { return cBlendBlendModifiersParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EBigIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.EBigInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EBigInteger ecore::EBigInteger:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class BlendModifiersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.BlendModifiers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAccessAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAccessAccessModifierEnumRuleCall_0_0_0 = (RuleCall)cAccessAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cAndKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cStaticAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final Keyword cStaticStaticKeyword_0_1_1_0 = (Keyword)cStaticAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cAndKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cFinalAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final Keyword cFinalFinalKeyword_0_2_1_0 = (Keyword)cFinalAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cAndKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cAbstractAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_0_3_1_0 = (Keyword)cAbstractAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cAndKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cSynchronizedAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final Keyword cSynchronizedSynchronizedKeyword_0_4_1_0 = (Keyword)cSynchronizedAssignment_0_4_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cStaticAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cStaticStaticKeyword_1_0_0 = (Keyword)cStaticAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cAndKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cFinalAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cFinalFinalKeyword_1_1_1_0 = (Keyword)cFinalAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAndKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cAbstractAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_2_1_0 = (Keyword)cAbstractAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cAndKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cSynchronizedAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final Keyword cSynchronizedSynchronizedKeyword_1_3_1_0 = (Keyword)cSynchronizedAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cFinalAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cFinalFinalKeyword_2_0_0 = (Keyword)cFinalAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cAndKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAbstractAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_2_1_1_0 = (Keyword)cAbstractAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cAndKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSynchronizedAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final Keyword cSynchronizedSynchronizedKeyword_2_2_1_0 = (Keyword)cSynchronizedAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cAbstractAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_3_0_0 = (Keyword)cAbstractAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cAndKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cSynchronizedAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final Keyword cSynchronizedSynchronizedKeyword_3_1_1_0 = (Keyword)cSynchronizedAssignment_3_1_1.eContents().get(0);
		private final Assignment cSynchronizedAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cSynchronizedSynchronizedKeyword_4_0 = (Keyword)cSynchronizedAssignment_4.eContents().get(0);
		
		//BlendModifiers:
		//	access=AccessModifier ('and' static?='static')? ('and' final?='final')? ('and' abstract?='abstract')? ('and'
		//	synchronized?='synchronized')? | static?='static' ('and' final?='final')? ('and' abstract?='abstract')? ('and'
		//	synchronized?='synchronized')? | final?='final' ('and' abstract?='abstract')? ('and' synchronized?='synchronized')? |
		//	abstract?='abstract' ('and' synchronized?='synchronized')? | synchronized?='synchronized';
		@Override public ParserRule getRule() { return rule; }
		
		//access=AccessModifier ('and' static?='static')? ('and' final?='final')? ('and' abstract?='abstract')? ('and'
		//synchronized?='synchronized')? | static?='static' ('and' final?='final')? ('and' abstract?='abstract')? ('and'
		//synchronized?='synchronized')? | final?='final' ('and' abstract?='abstract')? ('and' synchronized?='synchronized')? |
		//abstract?='abstract' ('and' synchronized?='synchronized')? | synchronized?='synchronized'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//access=AccessModifier ('and' static?='static')? ('and' final?='final')? ('and' abstract?='abstract')? ('and'
		//synchronized?='synchronized')?
		public Group getGroup_0() { return cGroup_0; }
		
		//access=AccessModifier
		public Assignment getAccessAssignment_0_0() { return cAccessAssignment_0_0; }
		
		//AccessModifier
		public RuleCall getAccessAccessModifierEnumRuleCall_0_0_0() { return cAccessAccessModifierEnumRuleCall_0_0_0; }
		
		//('and' static?='static')?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'and'
		public Keyword getAndKeyword_0_1_0() { return cAndKeyword_0_1_0; }
		
		//static?='static'
		public Assignment getStaticAssignment_0_1_1() { return cStaticAssignment_0_1_1; }
		
		//'static'
		public Keyword getStaticStaticKeyword_0_1_1_0() { return cStaticStaticKeyword_0_1_1_0; }
		
		//('and' final?='final')?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'and'
		public Keyword getAndKeyword_0_2_0() { return cAndKeyword_0_2_0; }
		
		//final?='final'
		public Assignment getFinalAssignment_0_2_1() { return cFinalAssignment_0_2_1; }
		
		//'final'
		public Keyword getFinalFinalKeyword_0_2_1_0() { return cFinalFinalKeyword_0_2_1_0; }
		
		//('and' abstract?='abstract')?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//'and'
		public Keyword getAndKeyword_0_3_0() { return cAndKeyword_0_3_0; }
		
		//abstract?='abstract'
		public Assignment getAbstractAssignment_0_3_1() { return cAbstractAssignment_0_3_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_3_1_0() { return cAbstractAbstractKeyword_0_3_1_0; }
		
		//('and' synchronized?='synchronized')?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//'and'
		public Keyword getAndKeyword_0_4_0() { return cAndKeyword_0_4_0; }
		
		//synchronized?='synchronized'
		public Assignment getSynchronizedAssignment_0_4_1() { return cSynchronizedAssignment_0_4_1; }
		
		//'synchronized'
		public Keyword getSynchronizedSynchronizedKeyword_0_4_1_0() { return cSynchronizedSynchronizedKeyword_0_4_1_0; }
		
		//static?='static' ('and' final?='final')? ('and' abstract?='abstract')? ('and' synchronized?='synchronized')?
		public Group getGroup_1() { return cGroup_1; }
		
		//static?='static'
		public Assignment getStaticAssignment_1_0() { return cStaticAssignment_1_0; }
		
		//'static'
		public Keyword getStaticStaticKeyword_1_0_0() { return cStaticStaticKeyword_1_0_0; }
		
		//('and' final?='final')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'and'
		public Keyword getAndKeyword_1_1_0() { return cAndKeyword_1_1_0; }
		
		//final?='final'
		public Assignment getFinalAssignment_1_1_1() { return cFinalAssignment_1_1_1; }
		
		//'final'
		public Keyword getFinalFinalKeyword_1_1_1_0() { return cFinalFinalKeyword_1_1_1_0; }
		
		//('and' abstract?='abstract')?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'and'
		public Keyword getAndKeyword_1_2_0() { return cAndKeyword_1_2_0; }
		
		//abstract?='abstract'
		public Assignment getAbstractAssignment_1_2_1() { return cAbstractAssignment_1_2_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_2_1_0() { return cAbstractAbstractKeyword_1_2_1_0; }
		
		//('and' synchronized?='synchronized')?
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'and'
		public Keyword getAndKeyword_1_3_0() { return cAndKeyword_1_3_0; }
		
		//synchronized?='synchronized'
		public Assignment getSynchronizedAssignment_1_3_1() { return cSynchronizedAssignment_1_3_1; }
		
		//'synchronized'
		public Keyword getSynchronizedSynchronizedKeyword_1_3_1_0() { return cSynchronizedSynchronizedKeyword_1_3_1_0; }
		
		//final?='final' ('and' abstract?='abstract')? ('and' synchronized?='synchronized')?
		public Group getGroup_2() { return cGroup_2; }
		
		//final?='final'
		public Assignment getFinalAssignment_2_0() { return cFinalAssignment_2_0; }
		
		//'final'
		public Keyword getFinalFinalKeyword_2_0_0() { return cFinalFinalKeyword_2_0_0; }
		
		//('and' abstract?='abstract')?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'and'
		public Keyword getAndKeyword_2_1_0() { return cAndKeyword_2_1_0; }
		
		//abstract?='abstract'
		public Assignment getAbstractAssignment_2_1_1() { return cAbstractAssignment_2_1_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_2_1_1_0() { return cAbstractAbstractKeyword_2_1_1_0; }
		
		//('and' synchronized?='synchronized')?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'and'
		public Keyword getAndKeyword_2_2_0() { return cAndKeyword_2_2_0; }
		
		//synchronized?='synchronized'
		public Assignment getSynchronizedAssignment_2_2_1() { return cSynchronizedAssignment_2_2_1; }
		
		//'synchronized'
		public Keyword getSynchronizedSynchronizedKeyword_2_2_1_0() { return cSynchronizedSynchronizedKeyword_2_2_1_0; }
		
		//abstract?='abstract' ('and' synchronized?='synchronized')?
		public Group getGroup_3() { return cGroup_3; }
		
		//abstract?='abstract'
		public Assignment getAbstractAssignment_3_0() { return cAbstractAssignment_3_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_3_0_0() { return cAbstractAbstractKeyword_3_0_0; }
		
		//('and' synchronized?='synchronized')?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'and'
		public Keyword getAndKeyword_3_1_0() { return cAndKeyword_3_1_0; }
		
		//synchronized?='synchronized'
		public Assignment getSynchronizedAssignment_3_1_1() { return cSynchronizedAssignment_3_1_1; }
		
		//'synchronized'
		public Keyword getSynchronizedSynchronizedKeyword_3_1_1_0() { return cSynchronizedSynchronizedKeyword_3_1_1_0; }
		
		//synchronized?='synchronized'
		public Assignment getSynchronizedAssignment_4() { return cSynchronizedAssignment_4; }
		
		//'synchronized'
		public Keyword getSynchronizedSynchronizedKeyword_4_0() { return cSynchronizedSynchronizedKeyword_4_0; }
	}
	
	public class QuantifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Quantifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOneOneKeyword_0_0 = (Keyword)cOneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cExistsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cExistsExistsKeyword_1_0 = (Keyword)cExistsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAllEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAllAllKeyword_2_0 = (Keyword)cAllEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Quantifier:
		//	one | exists | all;
		public EnumRule getRule() { return rule; }
		
		//one | exists | all
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//one
		public EnumLiteralDeclaration getOneEnumLiteralDeclaration_0() { return cOneEnumLiteralDeclaration_0; }
		
		//'one'
		public Keyword getOneOneKeyword_0_0() { return cOneOneKeyword_0_0; }
		
		//exists
		public EnumLiteralDeclaration getExistsEnumLiteralDeclaration_1() { return cExistsEnumLiteralDeclaration_1; }
		
		//'exists'
		public Keyword getExistsExistsKeyword_1_0() { return cExistsExistsKeyword_1_0; }
		
		//all
		public EnumLiteralDeclaration getAllEnumLiteralDeclaration_2() { return cAllEnumLiteralDeclaration_2; }
		
		//'all'
		public Keyword getAllAllKeyword_2_0() { return cAllAllKeyword_2_0; }
	}
	public class ElementJavaElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.ElementJava");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPackageEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPackagePackageKeyword_0_0 = (Keyword)cPackageEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cClassEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cClassClassKeyword_1_0 = (Keyword)cClassEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInterfaceEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInterfaceInterfaceKeyword_2_0 = (Keyword)cInterfaceEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEnumEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEnumEnumKeyword_3_0 = (Keyword)cEnumEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMethodEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMethodMethodKeyword_4_0 = (Keyword)cMethodEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cAttributeEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cAttributeAttributeKeyword_5_0 = (Keyword)cAttributeEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ElementJava:
		//	Package | Class | Interface | Enum | Method | Attribute;
		public EnumRule getRule() { return rule; }
		
		//Package | Class | Interface | Enum | Method | Attribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Package
		public EnumLiteralDeclaration getPackageEnumLiteralDeclaration_0() { return cPackageEnumLiteralDeclaration_0; }
		
		//'Package'
		public Keyword getPackagePackageKeyword_0_0() { return cPackagePackageKeyword_0_0; }
		
		//Class
		public EnumLiteralDeclaration getClassEnumLiteralDeclaration_1() { return cClassEnumLiteralDeclaration_1; }
		
		//'Class'
		public Keyword getClassClassKeyword_1_0() { return cClassClassKeyword_1_0; }
		
		//Interface
		public EnumLiteralDeclaration getInterfaceEnumLiteralDeclaration_2() { return cInterfaceEnumLiteralDeclaration_2; }
		
		//'Interface'
		public Keyword getInterfaceInterfaceKeyword_2_0() { return cInterfaceInterfaceKeyword_2_0; }
		
		//Enum
		public EnumLiteralDeclaration getEnumEnumLiteralDeclaration_3() { return cEnumEnumLiteralDeclaration_3; }
		
		//'Enum'
		public Keyword getEnumEnumKeyword_3_0() { return cEnumEnumKeyword_3_0; }
		
		//Method
		public EnumLiteralDeclaration getMethodEnumLiteralDeclaration_4() { return cMethodEnumLiteralDeclaration_4; }
		
		//'Method'
		public Keyword getMethodMethodKeyword_4_0() { return cMethodMethodKeyword_4_0; }
		
		//Attribute
		public EnumLiteralDeclaration getAttributeEnumLiteralDeclaration_5() { return cAttributeEnumLiteralDeclaration_5; }
		
		//'Attribute'
		public Keyword getAttributeAttributeKeyword_5_0() { return cAttributeAttributeKeyword_5_0; }
	}
	public class NameTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.NameType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUpperCaseEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUpperCaseUpperCaseKeyword_0_0 = (Keyword)cUpperCaseEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLowerCaseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLowerCaseLowerCaseKeyword_1_0 = (Keyword)cLowerCaseEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUpperCamelCaseEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUpperCamelCaseUpperCamelCaseKeyword_2_0 = (Keyword)cUpperCamelCaseEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLowerCamelCaseEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLowerCamelCaseLowerCamelCaseKeyword_3_0 = (Keyword)cLowerCamelCaseEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cStartUpperCaseEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cStartUpperCaseStartUpperCaseKeyword_4_0 = (Keyword)cStartUpperCaseEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum NameType:
		//	upperCase | lowerCase | upperCamelCase | lowerCamelCase |
		//	startUpperCase;
		public EnumRule getRule() { return rule; }
		
		//upperCase | lowerCase | upperCamelCase | lowerCamelCase | startUpperCase
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//upperCase
		public EnumLiteralDeclaration getUpperCaseEnumLiteralDeclaration_0() { return cUpperCaseEnumLiteralDeclaration_0; }
		
		//'upperCase'
		public Keyword getUpperCaseUpperCaseKeyword_0_0() { return cUpperCaseUpperCaseKeyword_0_0; }
		
		//lowerCase
		public EnumLiteralDeclaration getLowerCaseEnumLiteralDeclaration_1() { return cLowerCaseEnumLiteralDeclaration_1; }
		
		//'lowerCase'
		public Keyword getLowerCaseLowerCaseKeyword_1_0() { return cLowerCaseLowerCaseKeyword_1_0; }
		
		//upperCamelCase
		public EnumLiteralDeclaration getUpperCamelCaseEnumLiteralDeclaration_2() { return cUpperCamelCaseEnumLiteralDeclaration_2; }
		
		//'upperCamelCase'
		public Keyword getUpperCamelCaseUpperCamelCaseKeyword_2_0() { return cUpperCamelCaseUpperCamelCaseKeyword_2_0; }
		
		//lowerCamelCase
		public EnumLiteralDeclaration getLowerCamelCaseEnumLiteralDeclaration_3() { return cLowerCamelCaseEnumLiteralDeclaration_3; }
		
		//'lowerCamelCase'
		public Keyword getLowerCamelCaseLowerCamelCaseKeyword_3_0() { return cLowerCamelCaseLowerCamelCaseKeyword_3_0; }
		
		//startUpperCase
		public EnumLiteralDeclaration getStartUpperCaseEnumLiteralDeclaration_4() { return cStartUpperCaseEnumLiteralDeclaration_4; }
		
		//'startUpperCase'
		public Keyword getStartUpperCaseStartUpperCaseKeyword_4_0() { return cStartUpperCaseStartUpperCaseKeyword_4_0; }
	}
	public class NameOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.NameOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLikeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLikeLikeKeyword_0_0 = (Keyword)cLikeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEqualEqualKeyword_1_0 = (Keyword)cEqualEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEndsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEndsEndsKeyword_2_0 = (Keyword)cEndsEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cStartEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cStartStartKeyword_3_0 = (Keyword)cStartEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cContainsEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cContainsContainsKeyword_4_0 = (Keyword)cContainsEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum NameOperator:
		//	like | equal | ends | start | contains;
		public EnumRule getRule() { return rule; }
		
		//like | equal | ends | start | contains
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//like
		public EnumLiteralDeclaration getLikeEnumLiteralDeclaration_0() { return cLikeEnumLiteralDeclaration_0; }
		
		//'like'
		public Keyword getLikeLikeKeyword_0_0() { return cLikeLikeKeyword_0_0; }
		
		//equal
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_1() { return cEqualEnumLiteralDeclaration_1; }
		
		//'equal'
		public Keyword getEqualEqualKeyword_1_0() { return cEqualEqualKeyword_1_0; }
		
		//ends
		public EnumLiteralDeclaration getEndsEnumLiteralDeclaration_2() { return cEndsEnumLiteralDeclaration_2; }
		
		//'ends'
		public Keyword getEndsEndsKeyword_2_0() { return cEndsEndsKeyword_2_0; }
		
		//start
		public EnumLiteralDeclaration getStartEnumLiteralDeclaration_3() { return cStartEnumLiteralDeclaration_3; }
		
		//'start'
		public Keyword getStartStartKeyword_3_0() { return cStartStartKeyword_3_0; }
		
		//contains
		public EnumLiteralDeclaration getContainsEnumLiteralDeclaration_4() { return cContainsEnumLiteralDeclaration_4; }
		
		//'contains'
		public Keyword getContainsContainsKeyword_4_0() { return cContainsContainsKeyword_4_0; }
	}
	public class LanguageElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.Language");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cENGLISHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cENGLISHEnglishKeyword_0_0 = (Keyword)cENGLISHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cESPANIOLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cESPANIOLSpanishKeyword_1_0 = (Keyword)cESPANIOLEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Language:
		//	ENGLISH='English' | ESPANIOL='Spanish';
		public EnumRule getRule() { return rule; }
		
		//ENGLISH='English' | ESPANIOL='Spanish'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ENGLISH='English'
		public EnumLiteralDeclaration getENGLISHEnumLiteralDeclaration_0() { return cENGLISHEnumLiteralDeclaration_0; }
		
		//'English'
		public Keyword getENGLISHEnglishKeyword_0_0() { return cENGLISHEnglishKeyword_0_0; }
		
		//ESPANIOL='Spanish'
		public EnumLiteralDeclaration getESPANIOLEnumLiteralDeclaration_1() { return cESPANIOLEnumLiteralDeclaration_1; }
		
		//'Spanish'
		public Keyword getESPANIOLSpanishKeyword_1_0() { return cESPANIOLSpanishKeyword_1_0; }
	}
	public class AccessModifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.uam.sara.tfg.dsl.JRules.AccessModifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDefaultEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDefaultDefaultKeyword_0_0 = (Keyword)cDefaultEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPublicPublicKeyword_1_0 = (Keyword)cPublicEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cProtectedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cProtectedProtectedKeyword_2_0 = (Keyword)cProtectedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPrivatePrivateKeyword_3_0 = (Keyword)cPrivateEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum AccessModifier:
		//	Default | Public | Protected | Private;
		public EnumRule getRule() { return rule; }
		
		//Default | Public | Protected | Private
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Default
		public EnumLiteralDeclaration getDefaultEnumLiteralDeclaration_0() { return cDefaultEnumLiteralDeclaration_0; }
		
		//'Default'
		public Keyword getDefaultDefaultKeyword_0_0() { return cDefaultDefaultKeyword_0_0; }
		
		//Public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_1() { return cPublicEnumLiteralDeclaration_1; }
		
		//'Public'
		public Keyword getPublicPublicKeyword_1_0() { return cPublicPublicKeyword_1_0; }
		
		//Protected
		public EnumLiteralDeclaration getProtectedEnumLiteralDeclaration_2() { return cProtectedEnumLiteralDeclaration_2; }
		
		//'Protected'
		public Keyword getProtectedProtectedKeyword_2_0() { return cProtectedProtectedKeyword_2_0; }
		
		//Private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_3() { return cPrivateEnumLiteralDeclaration_3; }
		
		//'Private'
		public Keyword getPrivatePrivateKeyword_3_0() { return cPrivatePrivateKeyword_3_0; }
	}
	
	private final RuleSetElements pRuleSet;
	private final SatisfyElements pSatisfy;
	private final EStringElements pEString;
	private final RuleElements pRule;
	private final EBooleanElements pEBoolean;
	private final QuantifierElements eQuantifier;
	private final ElementJavaElements eElementJava;
	private final FilterElements pFilter;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final IsImplementedElements pIsImplemented;
	private final IsInheritorElements pIsInheritor;
	private final ImplementsElements pImplements;
	private final IsExtendedElements pIsExtended;
	private final ParameterElements pParameter;
	private final ConstructorElements pConstructor;
	private final ReturnElements pReturn;
	private final AttributeTypeElements pAttributeType;
	private final InitializeElements pInitialize;
	private final NoEmptyElements pNoEmpty;
	private final NameElements pName;
	private final JavaDocElements pJavaDoc;
	private final ContainsElements pContains;
	private final ModifiersElements pModifiers;
	private final EIntElements pEInt;
	private final EBigIntegerElements pEBigInteger;
	private final NameTypeElements eNameType;
	private final NameOperatorElements eNameOperator;
	private final LanguageElements eLanguage;
	private final BlendModifiersElements pBlendModifiers;
	private final AccessModifierElements eAccessModifier;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JRulesGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRuleSet = new RuleSetElements();
		this.pSatisfy = new SatisfyElements();
		this.pEString = new EStringElements();
		this.pRule = new RuleElements();
		this.pEBoolean = new EBooleanElements();
		this.eQuantifier = new QuantifierElements();
		this.eElementJava = new ElementJavaElements();
		this.pFilter = new FilterElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pIsImplemented = new IsImplementedElements();
		this.pIsInheritor = new IsInheritorElements();
		this.pImplements = new ImplementsElements();
		this.pIsExtended = new IsExtendedElements();
		this.pParameter = new ParameterElements();
		this.pConstructor = new ConstructorElements();
		this.pReturn = new ReturnElements();
		this.pAttributeType = new AttributeTypeElements();
		this.pInitialize = new InitializeElements();
		this.pNoEmpty = new NoEmptyElements();
		this.pName = new NameElements();
		this.pJavaDoc = new JavaDocElements();
		this.pContains = new ContainsElements();
		this.pModifiers = new ModifiersElements();
		this.pEInt = new EIntElements();
		this.pEBigInteger = new EBigIntegerElements();
		this.eNameType = new NameTypeElements();
		this.eNameOperator = new NameOperatorElements();
		this.eLanguage = new LanguageElements();
		this.pBlendModifiers = new BlendModifiersElements();
		this.eAccessModifier = new AccessModifierElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("es.uam.sara.tfg.dsl.JRules".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RuleSet:
	//	'ProjectName:' ProjectName=EString
	//	rules+=Rule ';' (rules+=Rule ';')*;
	public RuleSetElements getRuleSetAccess() {
		return pRuleSet;
	}
	
	public ParserRule getRuleSetRule() {
		return getRuleSetAccess().getRule();
	}
	
	//Satisfy:
	//	isImplemented | IsInheritor | Implements | IsExtended | Parameter | Constructor | Return | AttributeType | Initialize
	//	| NoEmpty | Name | JavaDoc | Contains | Modifiers;
	public SatisfyElements getSatisfyAccess() {
		return pSatisfy;
	}
	
	public ParserRule getSatisfyRule() {
		return getSatisfyAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Rule:
	//	no?='no'? quantifier=Quantifier element=ElementJava ('which' filter=Filter)? 'satisfy' satisfy=Or;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//enum Quantifier:
	//	one | exists | all;
	public QuantifierElements getQuantifierAccess() {
		return eQuantifier;
	}
	
	public EnumRule getQuantifierRule() {
		return getQuantifierAccess().getRule();
	}
	
	//enum ElementJava:
	//	Package | Class | Interface | Enum | Method | Attribute;
	public ElementJavaElements getElementJavaAccess() {
		return eElementJava;
	}
	
	public EnumRule getElementJavaRule() {
		return getElementJavaAccess().getRule();
	}
	
	//Filter:
	//	no?='no'? filter=Or;
	public FilterElements getFilterAccess() {
		return pFilter;
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}
	
	//Or:
	//	op+=And ('or' op+=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And:
	//	op+=Satisfy |
	//	'(' op+=Satisfy 'and' op+=Satisfy ('and' op+=Satisfy)* ')';
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//isImplemented:
	//	{isImplemented}
	//	'is' 'implemented';
	public IsImplementedElements getIsImplementedAccess() {
		return pIsImplemented;
	}
	
	public ParserRule getIsImplementedRule() {
		return getIsImplementedAccess().getRule();
	}
	
	//IsInheritor:
	//	{IsInheritor}
	//	'is' 'inheritor';
	public IsInheritorElements getIsInheritorAccess() {
		return pIsInheritor;
	}
	
	public ParserRule getIsInheritorRule() {
		return getIsInheritorAccess().getRule();
	}
	
	//Implements:
	//	{Implements}
	//	'implements' ('min=' minInterface=EInt ('and' 'max=' maxInterface=EInt)? | 'max=' maxInterface=EInt ('and' 'min='
	//	minInterface=EInt)?)?
	//	'interfaces';
	public ImplementsElements getImplementsAccess() {
		return pImplements;
	}
	
	public ParserRule getImplementsRule() {
		return getImplementsAccess().getRule();
	}
	
	//IsExtended:
	//	{IsExtended}
	//	'is' 'extended';
	public IsExtendedElements getIsExtendedAccess() {
		return pIsExtended;
	}
	
	public ParserRule getIsExtendedRule() {
		return getIsExtendedAccess().getRule();
	}
	
	//Parameter:
	//	'numParameters=' numParam=EBigInteger ('and' 'types=' '[' typesParam+=EString ("," typesParam+=EString)* ']')?;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Constructor:
	//	{Constructor}
	//	'is' 'constructor';
	public ConstructorElements getConstructorAccess() {
		return pConstructor;
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}
	
	//Return:
	//	'return' 'type=' returnType=EString;
	public ReturnElements getReturnAccess() {
		return pReturn;
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}
	
	//AttributeType:
	//	'type=' Type=EString;
	public AttributeTypeElements getAttributeTypeAccess() {
		return pAttributeType;
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}
	
	//Initialize:
	//	{Initialize}
	//	'is' 'initialize';
	public InitializeElements getInitializeAccess() {
		return pInitialize;
	}
	
	public ParserRule getInitializeRule() {
		return getInitializeAccess().getRule();
	}
	
	//NoEmpty:
	//	{NoEmpty}
	//	'is' 'not' 'empty';
	public NoEmptyElements getNoEmptyAccess() {
		return pNoEmpty;
	}
	
	public ParserRule getNoEmptyRule() {
		return getNoEmptyAccess().getRule();
	}
	
	//Name:
	//	{Name}
	//	'name' ('type=' type=NameType (('and' operator=NameOperator name=EString) (',' Language=Language)?)? |
	//	operator=NameOperator name=EString (',' Language=Language)? ('and' 'type=' type=NameType)?);
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//JavaDoc:
	//	{JavaDoc}
	//	'JavaDoc'
	//	author?='@author'?
	//	parameter?='@parameter'?
	//	return?='@return'?
	//	version?='@version'?
	//	throws?='@throws'?
	//	see?='@see'?;
	public JavaDocElements getJavaDocAccess() {
		return pJavaDoc;
	}
	
	public ParserRule getJavaDocRule() {
		return getJavaDocAccess().getRule();
	}
	
	//Contains:
	//	'have' '{' which=Rule '}';
	public ContainsElements getContainsAccess() {
		return pContains;
	}
	
	public ParserRule getContainsRule() {
		return getContainsAccess().getRule();
	}
	
	//Modifiers:
	//	'modifiers:' '['
	//	'(' blend+=BlendModifiers ')' ("or" '(' blend+=BlendModifiers ')')* ']';
	public ModifiersElements getModifiersAccess() {
		return pModifiers;
	}
	
	public ParserRule getModifiersRule() {
		return getModifiersAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EBigInteger ecore::EBigInteger:
	//	'-'? INT
	public EBigIntegerElements getEBigIntegerAccess() {
		return pEBigInteger;
	}
	
	public ParserRule getEBigIntegerRule() {
		return getEBigIntegerAccess().getRule();
	}
	
	//enum NameType:
	//	upperCase | lowerCase | upperCamelCase | lowerCamelCase |
	//	startUpperCase;
	public NameTypeElements getNameTypeAccess() {
		return eNameType;
	}
	
	public EnumRule getNameTypeRule() {
		return getNameTypeAccess().getRule();
	}
	
	//enum NameOperator:
	//	like | equal | ends | start | contains;
	public NameOperatorElements getNameOperatorAccess() {
		return eNameOperator;
	}
	
	public EnumRule getNameOperatorRule() {
		return getNameOperatorAccess().getRule();
	}
	
	//enum Language:
	//	ENGLISH='English' | ESPANIOL='Spanish';
	public LanguageElements getLanguageAccess() {
		return eLanguage;
	}
	
	public EnumRule getLanguageRule() {
		return getLanguageAccess().getRule();
	}
	
	//BlendModifiers:
	//	access=AccessModifier ('and' static?='static')? ('and' final?='final')? ('and' abstract?='abstract')? ('and'
	//	synchronized?='synchronized')? | static?='static' ('and' final?='final')? ('and' abstract?='abstract')? ('and'
	//	synchronized?='synchronized')? | final?='final' ('and' abstract?='abstract')? ('and' synchronized?='synchronized')? |
	//	abstract?='abstract' ('and' synchronized?='synchronized')? | synchronized?='synchronized';
	public BlendModifiersElements getBlendModifiersAccess() {
		return pBlendModifiers;
	}
	
	public ParserRule getBlendModifiersRule() {
		return getBlendModifiersAccess().getRule();
	}
	
	//enum AccessModifier:
	//	Default | Public | Protected | Private;
	public AccessModifierElements getAccessModifierAccess() {
		return eAccessModifier;
	}
	
	public EnumRule getAccessModifierRule() {
		return getAccessModifierAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
