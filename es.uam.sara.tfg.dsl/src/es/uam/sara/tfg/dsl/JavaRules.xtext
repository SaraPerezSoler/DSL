// automatically generated by Xtext
grammar es.uam.sara.tfg.dsl.JavaRules with org.eclipse.xtext.common.Terminals

import "platform:/resource/es.uam.sara.tfg.metaModel/model/metamodel.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RuleSet returns RuleSet:
	'ProjectName:' ProjectName=EString
		rules+=Rule ( rules+=Rule)* ;





Satisfy returns Satisfy:
	isImplented | IsInheritor | Implements | IsExtended | Parametre | Constructor | Return | AttributeType | Initialize | NoEmpty | Name | JavaDoc | Conteins | Modifiers;


EString returns ecore::EString:
	STRING | ID;

Rule returns Rule:
	(no?='no')? quantifier=Quantifier element=ElementJava ('which' filter=Filter)? 'satisfy' satisfy=Or;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum Quantifier returns Quantifier:
				one = 'one' | exists = 'exists' | all = 'all';

enum ElementJava returns ElementJava:
				Package = 'Package' | Class = 'Class' | Interface = 'Interface' | Enum = 'Enum' | Method = 'Method' | Attribute = 'Attribute';

Filter returns Filter:
	{Filter}
	(no?='no')?
	'Filter'
	'{'
		('filter' filter=Or)?
	'}';

Or returns Or:
	'Or'
	'{'
		'op' '{' op+=And ( "," op+=And)* '}' 
	'}';

And returns And:
	'And'
	'{'
		'op' '{' op+=Satisfy ( "," op+=Satisfy)* '}' 
	'}';

isImplented returns isImplented:
	{isImplented}
	'isImplented'
	;

IsInheritor returns IsInheritor:
	{IsInheritor}
	'IsInheritor'
	;

Implements returns Implements:
	{Implements}
	'Implements'
	'{'
		('maxInterface' maxInterface=EInt)?
		('minInterface' minInterface=EInt)?
	'}';

IsExtended returns IsExtended:
	{IsExtended}
	'IsExtended'
	;

Parametre returns Parametre:
	'Parametre'
	'{'
		'numParam' numParam=EBigInteger
		('typesParam' '{' typesParam+=EString ( "," typesParam+=EString)* '}' )?
	'}';

Constructor returns Constructor:
	{Constructor}
	'Constructor'
	;

Return returns Return:
	'Return'
	'{'
		'returnType' returnType=EString
	'}';

AttributeType returns AttributeType:
	'AttributeType'
	'{'
		'Type' Type=EString
	'}';

Initialize returns Initialize:
	{Initialize}
	'Initialize'
	;

NoEmpty returns NoEmpty:
	{NoEmpty}
	'NoEmpty'
	;

Name returns Name:
	{Name}
	'Name'
	name=EString
	'{'
		('type' type=NameType)?
		('operator' operator=NameOperator)?
		('Language' Language=Language)?
	'}';

JavaDoc returns JavaDoc:
	author?='author'
	parametre?='parametre'
	return?='return'
	version?='version'
	throws?='throws'
	see?='see'
	'JavaDoc'
	;

Conteins returns Conteins:
	'Conteins'
	'{'
		'which' which=Rule
	'}';

Modifiers returns Modifiers:
	'Modifiers'
	'{'
		'blend' '{' blend+=BlendModifiers ( "," blend+=BlendModifiers)* '}' 
	'}';

EInt returns ecore::EInt:
	'-'? INT;

EBigInteger returns ecore::EBigInteger:
	'-'? INT;

enum NameType returns NameType:
				upperCase = 'upperCase' | lowerCase = 'lowerCase' | upperCamelCase = 'upperCamelCase' | lowerCamelCase = 'lowerCamelCase' | startUpperCase = 'startUpperCase';

enum NameOperator returns NameOperator:
				like = 'like' | equal = 'equal';

enum Language returns Language:
				ENGLISH = 'ENGLISH' | ESPANIOL = 'ESPANIOL';

BlendModifiers returns BlendModifiers:
	static?='static'
	final?='final'
	abstract?='abstract'
	synchronized?='synchronized'
	'BlendModifiers'
	'{'
		('access' access=AccessModifier)?
	'}';

enum AccessModifier returns AccessModifier:
				Default = 'Default' | Public = 'Public' | Protected = 'Protected' | Private = 'Private';
