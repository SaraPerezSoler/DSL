// automatically generated by Xtext
grammar es.uam.sara.tfg.dsl.JRules with org.eclipse.xtext.common.Terminals

import "platform:/resource/es.uam.sara.tfg.metaModel/model/metamodel.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RuleSet returns RuleSet:
		'Projects' 'Name:' ((ProjectName+=EString ( "," ProjectName+=EString)* )|'*')
		 sentences+=Sentence ( "," sentences+=Sentence)* ;

Sentence returns Sentence:
	Variable | Rule;

enum Element returns Element:
				Package = 'Package' | Class = 'Class' | Interface = 'Interface' | Enum = 'Enum' | Method = 'Method' | Attribute = 'Attribute' | File = 'File';

Variable returns Variable:
	name=EString':'
	element=Element 'satisfy' satisfy=Or;

Rule returns Rule:
	(no?='no')? quantifier=Quantifier element=Element ('in' in=[Variable|EString])? ('which' filter=Or)? ('satisfy' satisfy=Or)?;

Or returns Or:
	 op+=And ( 'or' op+=And)*;

And returns And:
	op+=PrimaryOp ( 'and' op+=PrimaryOp)* ;
	
PrimaryOp returns PrimaryOp:
	'('Or')'|PropertyLiteral;

PropertyLiteral returns PropertyLiteral:
	property=Property 
;

Property returns Property:
	isImplemented | IsSuperInterface | IsSuperClass | IsSubClass | Implements | Extends | Tamanio | Parameter | Constructor | Return | AttributeType | Initialize | Empty | IsGeneric | NameOperation | NameType | JavaDoc | Contains | Modifiers;
	
	
isImplemented returns isImplemented:

	('is'|no?='is' 'not'|no?='isn\'t'|'are'|no?='are' 'not'|no?='aren\'t') 'implemented' valores=RangoNames;

IsSuperInterface returns IsSuperInterface:
	('is'|no?='is' 'not'|no?='isn\'t'|'are'|no?='are' 'not'|no?='aren\'t') 'superinterface' valores=RangoNames;

IsSuperClass returns IsSuperClass:
	('is'|no?='is' 'not'|no?='isn\'t'|'are'|no?='are' 'not'|no?='aren\'t')'superclass' valores=RangoNames;

IsSubClass returns IsSubClass:
	{IsSubClass}
	('is'|no?='is' 'not'|no?='isn\'t'|'are'|no?='are' 'not'|no?='aren\'t') 'subclass' ('of' of=StringProperty)?;

Implements returns Implements:
	(no?='do' 'not'|no?='don\'t'|no?='does' 'not'|no?='doesn\'t')? 'implements' valores=RangoNames;

Extends returns Extends:
	(no?='do' 'not'|no?='don\'t'|no?='does' 'not'|no?='doesn\'t')? 'extends' valores=RangoNames;

Tamanio returns Tamanio:
	'size' ((('='|no?='<>') exact=EInt) |('[' min=EInt'..'(max=EInt|'*')']'));

Parameter returns Parameter:
	{Parameter}
	'parameters' ('size'(('='|no?='<>') exact=EInt)|('['min=EInt'..'(max=EInt|'*')']'))? ('types''=' '['types+=StringProperty(','types+=StringProperty)*']')?;

Constructor returns Constructor:
	{Constructor}
	('is'|no?='is' 'not'|no?='isn\'t'|'are'|no?='are' 'not'|no?='aren\'t')'constructor'
	;

Return returns Return:
	'return' 'type' ('='|no?='<>') type=StringProperty;

AttributeType returns AttributeType:
	'type'('='|no?='<>') type=StringProperty;

Initialize returns Initialize:
	{Initialize}
	('is'|no?='is' 'not'|no?='isn\'t'|'are'|no?='are' 'not'|no?='aren\'t')'initialize'
	;

Empty returns Empty:
	{Empty}
	('is'|no?='is' 'not'|no?='isn\'t'|'are'|no?='are' 'not'|no?='aren\'t')'empty'
	;

IsGeneric returns IsGeneric:
	{IsGeneric}
	('is'|no?='is' 'not'|no?='isn\'t'|'are'|no?='are' 'not'|no?='aren\'t')'generic'
	;

NameOperation returns NameOperation:
	'name' ((no?='does' 'not'|no?='doesn\'t')? operator=NameOperator)|('='|no?='<>') name=StringProperty(',' Language=Language)?;

NameType returns NameType:
	'NameType'
		'type' ('='|no?='<>') type=NameCheck;

JavaDoc returns JavaDoc:
{JavaDoc}
	(no?='no')?
	'JavaDoc'
	(author?='@author')?
	(parameter?='@parameter')?
	(return?='@return')?
	(version?='@version')?
	(throws?='@throws')?
	(see?='@see')?;

Contains returns Contains:
	{Contains}
	((no?='do' 'not'|no?='don\'t'|no?='does' 'not'|no?='doesn\'t')? 'have')|(no?='haven\'t') which=Rule;

Modifiers returns Modifiers:
	('is'|no?='is' 'not'|no?='isn\'t'|'are'|no?='are' 'not'|no?='aren\'t')
	'modified' 'with' '[' blend+=BlendModifiers ( 'or' blend+=BlendModifiers)* ']' 
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

RangoNames returns RangoNames:
	{RangoNames}
		('[' min=EInt '..'(max=EInt|'*')']')?
		('types' '{' types+=StringProperty ( "," types+=StringProperty)* '}' )?;

StringProperty returns StringProperty:  
	StringValue | StringVariable
;

StringValue returns StringValue:
	value=EString; 
StringVariable returns StringVariable:
	variable=[Variable|EString]('.'subtype=Element)?'.'strings=ElementString;


EInt returns ecore::EInt:
	'-'? INT;

enum NameOperator returns NameOperator:
			START = 'START' | END = 'END' | CONTAIN = 'CONTAIN' | LIKE = 'LIKE';
enum ElementString returns ElementString:
			name = 'name' | type = 'type';

enum Language returns Language:
				SPANISH = 'SPANISH' | ENGLISH = 'ENGLISH';

enum NameCheck returns NameCheck:
			UPPER_CASE = 'UPPER_CASE' | LOWER_CASE = 'LOWER_CASE' | UPPER_CAMEL_CASE = 'UPPER_CAMEL_CASE' | LOWER_CAMEL_CASE = 'LOWER_CAMEL_CASE' | START_UPPER_CASE = 'START_UPPER_CASE';

BlendModifiers returns BlendModifiers:
(access=AccessModifier ('and'static?='static')? ('and'final?='final')? ('and'abstract?='abstract')? ('and'default?='default')? ('and'synchronized?='synchronized')?) | 
	(static?='static' ('and'final?='final')? ('and'abstract?='abstract')? ('and'default?='default')? ('and'synchronized?='synchronized')?)|
	(final?='final' ('and'abstract?='abstract')? ('and'default?='default')? ('and'synchronized?='synchronized')?)|
	(abstract?='abstract' ('and'default?='default')? ('and' synchronized?='synchronized')?)| (default?='default' ('and' synchronized?='synchronized')?) |synchronized?='synchronized';

enum AccessModifier returns AccessModifier:
			public = 'public' | protected = 'protected' | private = 'private';

enum Quantifier returns Quantifier:
				one = 'one' | exists = 'exists' | all = 'all';
				
EString returns ecore::EString:
	STRING | ID;

