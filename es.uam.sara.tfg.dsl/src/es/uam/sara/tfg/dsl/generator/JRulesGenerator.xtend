/*
 * generated by Xtext 2.10.0
 */
package es.uam.sara.tfg.dsl.generator

import javaRule.AttributeType
import javaRule.BlendModifiers
import javaRule.Constructor
import javaRule.ElementJava
import javaRule.Initialize
import javaRule.JavaDoc
import javaRule.Modifiers
import javaRule.Name
import javaRule.NameOperator
import javaRule.NameType
import javaRule.NoEmpty
import javaRule.Or
import javaRule.Parameter
import javaRule.Return
import javaRule.Rule
import javaRule.Satisfy
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.util.jar.Attributes

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class JRulesGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
		var i = 1;
		for (rule : resource.allContents.toIterable.filter(Rule)) {
			fsa.generateFile('Rule' + i + "Factory.java", rule.generateClass(i))
			i++;
		}
	}

	def CharSequence generateClass(Rule rule, int i) {
		var t = getType(rule.element)
		'''
		import java.util.*;
		import es.uam.sara.tfg.rule.*;
		import es.uam.sara.tfg.rule.Rule.*;
		import es.uam.sara.tfg.properties.*;
		«IF rule.element==ElementJava.INTERFACE»
			import es.uam.sara.tfg.properties.interfaces.*;
		«ELSEIF rule.element==ElementJava.CLASS»
			import es.uam.sara.tfg.properties.classes.*;
		«ELSEIF rule.element==ElementJava.ENUM»
			import es.uam.sara.tfg.properties.enumerations.*;
		«ELSEIF rule.element==ElementJava.METHOD»
			import es.uam.sara.tfg.properties.methods.*;
		«ELSEIF rule.element==ElementJava.ATTRIBUTE»
			import es.uam.sara.tfg.properties.attributes.*;
		«ELSEIF rule.element==ElementJava.PACKAGE»
			import es.uam.sara.tfg.properties.packages.*;
		«ENDIF»
		«IF rule.element!=ElementJava.PACKAGE»
			import org.eclipse.jdt.core.dom.«t»;
		«ENDIF»
		
		//«IF rule.no»no«ENDIF» «rule.quantifier» «rule.element»
		«IF rule.filter!=null»// whitch «IF rule.filter.no»no«ENDIF» «getTextProperty(rule.filter.filter)»«ENDIF»
		//«IF rule.satisfy!=null» satisfy «getTextProperty(rule.satisfy)»«ENDIF»
		public class Rule«i»Factory implements RuleFactory<«t»>{
			
			public Rule<«t»> getRule (List<«t»> elements){
					
					«IF rule.filter!=null»
						Or<«t»> filter= new Filter<«t»>(«rule.filter.no»,elements);
						«createProperty(rule, true)»
					«ELSE»
						Or<«t»> filter=null;
					«ENDIF»
					«IF rule.satisfy!=null»
						Or<«t»> satisfy= new Or<«t»>(elements);
						«createProperty(rule, false)»
					«ELSE»
						Or<«t»> satisfy=null;
					«ENDIF»
					
					return new Rule<«t»>(«rule.no», Quantifier.«rule.quantifier.literal.toUpperCase»,elements, filter, satisfy);
			}
			
		}'''

	}

	def CharSequence getTextProperty(Or or) {
		'''
			or(«FOR a : or.op» and:(«FOR s:a.op»«s.class.simpleName.replace("Impl", "")», «ENDFOR»)«ENDFOR»)
		'''
	}

	def CharSequence createProperty(Rule r, boolean filter) {
		var prop = null as Or
		var cad=""
		if (filter) {
			prop = r.filter.filter;
			cad="Filter"
		} else {
			prop = r.satisfy;
		}
		var t = getType(r.element)
		'''
			«var i=1»
			«FOR a : prop.op»
				And<«t»> and«cad»«(i)»= new And<«t»>(elements);
				«FOR s:a.op»
					«IF r.element ==  ElementJava.ATTRIBUTE»
						«new AttributesSatisfy().getPropertieAttributes(s, cad+i)»
					«ELSEIF r.element ==  ElementJava.METHOD»
						«getNamePropertieMethod(s,cad, i)»
					«ENDIF»
				«ENDFOR»
				«IF filter»
				filter.addAnd(and«cad»«(i++)»);
				«ELSE»
				satisfy.addAnd(and«cad»«(i++)»);
				«ENDIF»
			«ENDFOR»
		'''
	}

	

	

	def CharSequence getType(ElementJava e) {
		if (e == ElementJava.PACKAGE) {
			return "String"
		} else if (e == ElementJava.INTERFACE) {
			return "TypeDeclaration"
		} else if (e == ElementJava.CLASS) {
			return "TypeDeclaration"
		} else if (e == ElementJava.ENUM) {
			return "EnumDeclaration"
		} else if (e == ElementJava.METHOD) {
			return "MethodDeclaration"
		} else {
			return "FieldDeclaration"
		}
	}

}
